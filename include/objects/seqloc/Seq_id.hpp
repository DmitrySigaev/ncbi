/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using specifications from the ASN data definition file
 *   'seqloc.asn'.
 *
 * ---------------------------------------------------------------------------
 * $Log$
 * Revision 1.17  2002/06/07 11:13:01  clausen
 * Added comment about util/sequence.hpp
 *
 * Revision 1.16  2002/06/06 20:32:01  clausen
 * Moved methods using object manager to objects/util
 *
 * Revision 1.15  2002/05/22 14:03:34  grichenk
 * CSerialUserOp -- added prefix UserOp_ to Assign() and Equals()
 *
 * Revision 1.14  2002/05/03 21:28:04  ucko
 * Introduce T(Signed)SeqPos.
 *
 * Revision 1.13  2002/01/10 18:43:34  clausen
 * Added GetLength
 *
 * Revision 1.12  2001/08/31 15:59:59  clausen
 * Added new constructors for FastA construction and added tpg, tpd, and tpe id types
 *
 * Revision 1.11  2001/07/25 19:11:09  grichenk
 * Equals() and Assign() re-declared as protected
 *
 * Revision 1.10  2001/07/16 16:22:44  grichenk
 * Added CSerialUserOp class to create Assign() and Equals() methods for
 * user-defind classes.
 * Added SerialAssign<>() and SerialEquals<>() functions.
 *
 * Revision 1.9  2001/06/25 18:52:01  grichenk
 * Prohibited copy constructor and assignment operator
 *
 * Revision 1.8  2001/04/17 04:13:03  vakatov
 * Utilize the redesigned "CSerializable" base class.
 * Completely get rid of the non-standard "AsFastaString()" method in
 * favor of more standard "DumpAsFasta()" one.
 *
 * Revision 1.7  2001/04/16 16:55:19  kholodov
 * Modified: Added implementation for the ISerializable interface.
 *
 * Revision 1.6  2001/01/03 16:38:53  vasilche
 * Added CAbstractObjectManager - stub for object manager.
 * CRange extracted to separate file.
 *
 * Revision 1.5  2000/12/26 17:28:34  vasilche
 * Simplified and formatted code.
 *
 * Revision 1.4  2000/12/08 22:18:41  ostell
 * changed MakeFastString to AsFastaString and to use ostream instead of string
 *
 * Revision 1.3  2000/12/08 20:45:56  ostell
 * added MakeFastaString()
 *
 * Revision 1.2  2000/11/27 20:36:39  vasilche
 * Enum should be defined in public area.
 *
 * Revision 1.1  2000/11/21 18:58:12  vasilche
 * Added Match() methods for CSeq_id, CObject_id and CDbtag.
 *
 * ===========================================================================
 */

#ifndef OBJECTS_SEQLOC_SEQ_ID_HPP
#define OBJECTS_SEQLOC_SEQ_ID_HPP


// generated includes
#include <objects/seqloc/Seq_id_.hpp>
#include <serial/serializable.hpp>

// generated classes

BEGIN_NCBI_SCOPE
BEGIN_objects_SCOPE // namespace ncbi::objects::

class CSeq_id : public CSeq_id_Base,
                public CSerializable
{
    typedef CSeq_id_Base Tparent;

public:

    //
    // See also CSeq_id related functions in "util/sequence.hpp":
    //
    //TSeqPos GetLength(const CSeq_id&, CScope*);
    //bool IsSameBioseq(const CSeq_id&, const CSeq_id&, CScope*);
    //
     
    // Default constructor
    CSeq_id( void );

    // FastA constructors
    CSeq_id( const string& the_id );  // Entire Fast A SeqId as a string

    // With proper choice
    CSeq_id(CSeq_id_Base::E_Choice the_type,
            const string&          acc_in,  // see explanation in x_Init below
            const string&          name_in,
            // force not optional; if not given, use the constructor below 
            const string&          version_in,
            const string&          release_in = kEmptyStr);

    CSeq_id(CSeq_id_Base::E_Choice the_type,
            const string&          acc_in,  // see explanation in x_Init below
            const string&          name_in,
            int                    version    = 0,
            const string&          release_in = kEmptyStr);

    // Need to lookup choice
    CSeq_id(const string& the_type,
            const string& acc_in,     // see explanation in x_Init below
            const string& name_in,
            // force not optional; if not given, use the constructor below 
            const string& version_in,
            const string& release_in = kEmptyStr);

    CSeq_id(const string& the_type,
            const string& acc_in,   // see explanation in x_Init below
            const string& name_in,
            int           version    = 0 ,
            const string& release_in = kEmptyStr);

    // Destructor
    virtual ~CSeq_id(void);

    // Converts a string to a choice, no need to require a member.
    static CSeq_id::E_Choice WhichInverseSeqId(const char* SeqIdCode);

    // Match() - TRUE if SeqIds are equivalent
    bool Match(const CSeq_id& sid2) const;

    // Compare return values
    enum E_SIC { 
        e_error = 0,  // some problem
        e_DIFF,       // different SeqId types-can't compare
        e_NO,         // SeqIds compared, but are different
        e_YES         // SeqIds compared, are equivalent
    };

    // Compare() - more general
    E_SIC Compare(const CSeq_id& sid2) const;

    // Return compatible CTextseq_id
    const CTextseq_id* GetTextseq_Id(void) const;

    // Implement serializable interface
    virtual void WriteAsFasta(ostream& out) const;
    const CSerializable& DumpAsFasta(void)  const { return Dump(eAsFasta); }

private:
    void x_Init 
    (CSeq_id_Base::E_Choice the_type,
     // Just first string, as in text seqid, for unusual
     // cases (patents, pdb) not really an acc
     const string&          acc_in,
     const string&          name_in    = kEmptyStr,
     int                    version    = 0,
     const string&          release_in = kEmptyStr);

    // Prohibit copy constructor & assignment operator
    CSeq_id(const CSeq_id&);
    CSeq_id& operator= (const CSeq_id&);

    //CRef<CAbstractObjectManager> m_ObjectManager;
};



/////////////////// CSeq_id inline methods

// Match - just uses Compare
inline
bool CSeq_id::Match (const CSeq_id& sid2) const
{
    return Compare(sid2) == e_YES;
}


/////////////////// end of CSeq_id inline methods


END_objects_SCOPE // namespace ncbi::objects::
END_NCBI_SCOPE


#endif // OBJECTS_SEQLOC_SEQ_ID_HPP
