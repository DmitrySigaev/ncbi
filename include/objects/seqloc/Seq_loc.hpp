/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  Cliff Clausen, Eugene Vasilchenko
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using specifications from the ASN data definition file
 *   'seqloc.asn'.
 *
 * ---------------------------------------------------------------------------
 * $Log$
 * Revision 1.6  2002/01/10 18:20:48  clausen
 * Added IsOneBioseq, GetStart, and GetId
 *
 * Revision 1.5  2001/10/22 11:39:49  clausen
 * Added Compare()
 *
 * Revision 1.4  2001/06/25 18:52:02  grichenk
 * Prohibited copy constructor and assignment operator
 *
 * Revision 1.3  2001/01/05 20:11:41  vasilche
 * CRange, CRangeMap were moved to util.
 *
 * Revision 1.2  2001/01/03 16:38:58  vasilche
 * Added CAbstractObjectManager - stub for object manager.
 * CRange extracted to separate file.
 *
 * Revision 1.1  2000/11/17 21:35:02  vasilche
 * Added GetLength() method to CSeq_loc class.
 *
 *
 * ===========================================================================
 */

#ifndef OBJECTS_SEQLOC_SEQ_LOC_HPP
#define OBJECTS_SEQLOC_SEQ_LOC_HPP


// generated includes
#include <objects/seqloc/Seq_loc_.hpp>
#include <objects/seqloc/Seq_loc_mix.hpp>
#include <objects/seqloc/Packed_seqpnt.hpp>
#include <objects/seqloc/Packed_seqint.hpp>

//
#include <util/range.hpp>


BEGIN_NCBI_SCOPE
BEGIN_objects_SCOPE // namespace ncbi::objects::

class CScope;

class CSeq_loc : public CSeq_loc_Base
{
public:
    typedef CSeq_loc_Base Tparent;
    typedef CPacked_seqpnt_Base::TPoints TPoints;
    typedef CPacked_seqint_Base::Tdata   TIntervals;
    typedef CSeq_loc_mix_Base::Tdata     TLocations;

    // constructor
    CSeq_loc(void);
    // destructor
    virtual ~CSeq_loc(void);

    // returns length, in residues, of Seq_loc
    // return = -1 = couldn't calculate due to error
    // return = -2 = couldn't calculate because of data type
    enum {
        eError     = -1,
        eUndefined = -2
    };

    // Method to determine the containment relationship between CSeq_locs
    enum ECompare {
        eNoOverlap = 0, // Sequences do not overlap
        eContained,     // *this contained by seqloc
        eContains,      // *this contains seqloc
        eSame,          // *this and seqloc contain each other
        eOverlap        // Sequences overlap each other
    };
    ECompare Compare(const CSeq_loc& seqloc, CScope* scope = 0) const;

    int GetLength(void) const;

    typedef CRange<int> TRange;
    TRange GetTotalRange(void) const;
    
    // Returns true if all CSeq_ids contained in this CSeq_loc represent the
    // same CBioseq within scope. CSeq_id::Compare used if scope == 0.
    bool IsOneBioseq(CScope* scope = 0) const;
    
    // Returns lowest residue position in this CSeq_loc if this represents
    // one CBioseq, else -1. Also returns -1 for e_not_set, e_Null, 
    // e_Feat, and e_Empty. For a bond, returns the lowest residue position of
    // the A member of the bond
    int GetStart(CScope* scope = 0) const;
    
    // Returns a pointer to the first CSeq_id found in this CSeq_loc
    // if exactly one CBioseq is represented, else returns a null pointer
    const CSeq_id* GetId(CScope* scope = 0) const;

private:
    // Prohibit copy constructor & assignment operator
    CSeq_loc(const CSeq_loc&);
    CSeq_loc& operator= (const CSeq_loc&);
};



/////////////////// CSeq_loc inline methods

// constructor
inline
CSeq_loc::CSeq_loc(void)
{
    return;
}


/////////////////// end of CSeq_loc inline methods


END_objects_SCOPE // namespace ncbi::objects::
END_NCBI_SCOPE


#endif // OBJECTS_SEQLOC_SEQ_LOC_HPP
