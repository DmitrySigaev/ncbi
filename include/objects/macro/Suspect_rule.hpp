/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Suspect_rule.hpp
/// User-defined methods of the data storage class.
///
/// This file was originally generated by application DATATOOL
/// using the following specifications:
/// 'macro.asn'.
///
/// New methods or data members can be added to it if needed.
/// See also: Suspect_rule_.hpp


#ifndef OBJECTS_MACRO_SUSPECT_RULE_HPP
#define OBJECTS_MACRO_SUSPECT_RULE_HPP


// generated includes
#include <objects/macro/Suspect_rule_.hpp>

// generated classes

BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::

/////////////////////////////////////////////////////////////////////////////
class CSuspect_rule : public CSuspect_rule_Base
{
    typedef CSuspect_rule_Base Tparent;
public:
    // constructor
    CSuspect_rule(void);
    // destructor
    ~CSuspect_rule(void);
 
    // C's MatchesSuspectProductRule()
    bool StringMatchesSuspectProductRule (const string& str) const;
    static bool IsAllCaps(const string& str);
    static bool IsAllLowerCase(const string& str);
    static bool IsAllPunctuation(const string& str);

/*
    // C's DoesObjectMatchConstraintChoiceSet()
    bool DoesObjectMatchConstraintChoiceSet(const CSeq_feat* feat) const;

    // get all string type data from object
    template <class T>
    void GetStringsFromObject(const T& obj, vector <string>& strs)
    {
       CTypesConstIterator it(CStdTypeInfo<string>::GetTypeInfo(),
                          CStdTypeInfo<utf8_string_type>::GetTypeInfo());
       for (it = ConstBegin(obj);  it;  ++it) {
          strs.push_back(*static_cast<const string*>(it.GetFoundPtr()));
       }
    };
*/


private:
    // Prohibit copy constructor and assignment operator
    CSuspect_rule(const CSuspect_rule& value);
    CSuspect_rule& operator=(const CSuspect_rule& value);

    string m_digit_str, m_alpha_str;

    bool x_IsSearchFuncEmpty(const CSearch_func& func) const;
    bool x_MatchesSearchFunc(const string& str, const CSearch_func& func) const;

    // func.Which(): CSearch_func::e_String_constraint
    bool x_DoesStringMatchConstraint(const string& str, 
                                    const CString_constraint* constraint) const;
    bool x_DoesSingleStringMatchConstraint(const string& str, 
                                      const CString_constraint* str_cons) const;
    bool x_IsStringConstraintEmpty(const CString_constraint* constraint) const;
    string x_SkipWeasel(const string& str) const;
    bool x_AdvancedStringMatch(const string& str, 
                                 const CString_constraint* str_cons) const;
    bool x_AdvancedStringCompare(const string& str, 
                                  const string& str_match, 
                                  const CString_constraint* str_cons, 
                                  bool is_start, 
                                  unsigned* ini_target_match_len = 0) const;
    bool x_CaseNCompareEqual(string str1, 
                               string str2, 
                               unsigned len1, bool case_sensitive) const;
    string x_StripUnimportantCharacters(const string& str, 
                                     bool strip_space, bool strip_punct) const;
    bool x_IsWholeWordMatch(const string& start, 
                              const size_t& found, 
                              const unsigned& match_len, 
                              bool disallow_slash = false) const;
    bool x_DisallowCharacter(const char ch, bool disallow_slash) const;
    bool x_IsStringInSpanInList (const string& str, const string& list) const;
    bool x_IsStringInSpan(const string& str, 
                            const string& first, const string& second) const;
    bool x_StringIsPositiveAllDigits(const string& str) const;
    bool x_GetSpanFromHyphenInString(const string& str, 
                                       const size_t& hyphen, 
                                       string& first, 
                                       string& second) const;

    // CSearch_func::e_Contains_plural
    bool x_StringMayContainPlural(const string& str) const;
    bool x_DoesStrContainPlural(const string& word, 
                                 char last_letter, 
                                 char second_to_last_letter, 
                                 char next_letter) const;

    // e_N_or_more_brackets_or_parentheses
    bool x_ContainsNorMoreSetsOfBracketsOrParentheses(const string& search, 
                                                        const int& n) const;
    char x_GetClose(char bp) const;
    bool x_SkipBracketOrParen(const unsigned& idx, string& start) const;

    // e_Three_numbers
    bool x_ContainsThreeOrMoreNumbersTogether(const string& search) const;
    bool x_FollowedByFamily(string& after_str) const;
    bool x_PrecededByOkPrefix (const string& start_str) const;
    bool x_InWordBeforeCytochromeOrCoenzyme(const string& start_str) const;

    // e_Underscore
    bool x_StringContainsUnderscore(const string& search) const;

    // e_Prefix_and_numbers
    bool x_IsPrefixPlusNumbers(const string& prefix, const string& search) const;

    // e_Unbalanced_paren
    bool x_StringContainsUnbalancedParentheses(const string& search) const;
    bool x_IsPropClose(const string& str, char open_p) const;

    // e_Has_term
    bool x_ProductContainsTerm(const string& pattern, const string& search) const;

};

/////////////////// CSuspect_rule inline methods

// constructor
inline
CSuspect_rule::CSuspect_rule(void)
{
    m_digit_str = "0123456789";
    m_alpha_str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
}


/////////////////// end of CSuspect_rule inline methods


END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_MACRO_SUSPECT_RULE_HPP
/* Original file checksum: lines: 86, chars: 2443, CRC32: 48b7bd55 */
