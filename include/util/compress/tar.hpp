#ifndef UTIL__TAR__HPP
#define UTIL__TAR__HPP

/*  $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Vladimir Ivanov
 *
 * File Description:  TAR archive API
 *                    Now support only POSIX.1-1988 (ustar) format.
 *
 */

#include <corelib/ncbistd.hpp>
#include <corelib/ncbifile.hpp>

/** @addtogroup Compression
 *
 * @{
 */

BEGIN_NCBI_SCOPE


/////////////////////////////////////////////////////////////////////////////
///
/// CTarException --
///
/// Define exceptions generated by TAR API.
///
/// CTarException inherits its basic functionality from CCoreException
/// and defines additional error codes for TAR-archive operations.

class CTarException : public CCoreException
{
public:
    /// Error types that file operations can generate.
    enum EErrCode {
        eFormat,
        eCRC,
        eCreate,
        eOpen,
        eRead,
        eWrite,
        eMemory
    };

    /// Translate from an error code value to its string representation.
    virtual const char* GetErrCodeString(void) const
    {
        switch (GetErrCode()) {
        case eFormat:  return "eFormat";
        case eCRC:     return "eCRC";
        case eCreate:  return "eCreate";
        case eOpen:    return "eOpen";
        case eRead:    return "eRead";
        case eWrite:   return "eWrite";
        case eMemory:  return "eMemory";
        default:       return CException::GetErrCodeString();
        }
    }

    // Standard exception boilerplate code.
    NCBI_EXCEPTION_DEFAULT(CTarException, CCoreException);
};


//////////////////////////////////////////////////////////////////////////////
//
// CTarEntryInfo class
//
// Store information about TAR archive entry

class CTarEntryInfo
{
public:
    // Constructor
    CTarEntryInfo(void)
        : m_Type(CDirEntry::eUnknown), m_Size(0) {}

    // Setters
    void SetName(const string& name)     { m_Name = name; }
    void SetType(CDirEntry::EType type)  { m_Type = type; }
    void SetSize(Int8 size)              { m_Size = (streamsize)size; }
    void SetLinkName(const string& name) { m_LinkName = name; }

    // Getters
    string           GetName(void)       { return m_Name; }
    CDirEntry::EType GetType(void)       { return m_Type; }
    Int8             GetSize(void)       { return m_Size; }
    string           GetLinkName(void)   { return m_LinkName; }

private:
    string           m_Name;     //< Name of file
    CDirEntry::EType m_Type;     //< Type
    streamsize       m_Size;     //< File size (or 0)
    string           m_LinkName; //< Name of linked file if 'type' = eLink

    friend class CTar;
};


//////////////////////////////////////////////////////////////////////////////
//
// CTar class
//

class CTar
{
public:
    /// Constructors
    CTar(const string& file_name);
    CTar(CNcbiIos& stream);

    /// Destructor
    virtual ~CTar(void);

    /// Extract archive to specified directory
    // Throw exception on error.
    void Extract(const string& dst_dir);

protected:
    enum EOpenMode {
        eCreate,
        eRead,
        eUpdate
    };
    enum EStatus {
        eSuccess = 0,
        eFailure,
        eEOF,
        eZeroBlock
    };
    void    x_Open(EOpenMode mode);
    void    x_Close(void);
    EStatus x_ReadEntryInfo(CTarEntryInfo& info);

protected:
    string         m_FileName;       //< TAR archive file name
    CNcbiIos*      m_Stream;         //< Achive stream buffer (used for IO)
    CNcbiFstream*  m_FileStream;     //< File archive stream
    bool           m_IsStreamOwned;  //< is m_Stream owned or not
    streamsize     m_BufferSize;     //< Buffer size for IO operations
};


END_NCBI_SCOPE


/* @} */


/*
 * ===========================================================================
 * $Log$
 * Revision 1.1  2004/12/02 17:46:14  ivanov
 * Initial draft revision
 *
 * ===========================================================================
 */

#endif  /* UTIL__TAR__HPP */
