#ifndef UTIL_COMPRESS__TAR__HPP
#define UTIL_COMPRESS__TAR__HPP

/*  $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Vladimir Ivanov
 *
 * File Description:  TAR archive API
 *                    Now supports only POSIX.1-1988 (ustar) format.
 *                    GNU tar format is supported partially.
 *                    New archives created using GNU format.
 *
 */

#include <corelib/ncbifile.hpp>


/** @addtogroup Compression
 *
 * @{
 */


BEGIN_NCBI_SCOPE


/////////////////////////////////////////////////////////////////////////////
///
/// CTarException --
///
/// Define exceptions generated by TAR API.
///
/// CTarException inherits its basic functionality from CCoreException
/// and defines additional error codes for TAR-archive operations.

class NCBI_XUTIL_EXPORT CTarException : public CCoreException
{
public:
    /// Error types that file operations can generate.
    enum EErrCode {
        eUnsupportedTarFormat,
        eUnsupportedEntryType,
        eBadName,
        eNameTooLong,
        eChecksum,
        eCreate,
        eOpen,
        eRead,
        eWrite,
        eBackup,
        eMemory,
        eRestoreAttrs
    };

    /// Translate from an error code value to its string representation.
    virtual const char* GetErrCodeString(void) const
    {
        switch (GetErrCode()) {
        case eUnsupportedTarFormat: return "eUnsupportedTarFormat";
        case eUnsupportedEntryType: return "eUnsupportedEntryType";
        case eBadName:              return "eBadName";
        case eNameTooLong:          return "eNameTooLong";
        case eChecksum:             return "eChecksum";
        case eCreate:               return "eCreate";
        case eOpen:                 return "eOpen";
        case eRead:                 return "eRead";
        case eWrite:                return "eWrite";
        case eBackup:               return "eBackup";
        case eMemory:               return "eMemory";
        case eRestoreAttrs:         return "eRestoreAttrs";
        default:                    return CException::GetErrCodeString();
        }
    }

    // Standard exception boilerplate code.
    NCBI_EXCEPTION_DEFAULT(CTarException, CCoreException);
};


//////////////////////////////////////////////////////////////////////////////
///
/// CTarEntryInfo class
///
/// Store information about TAR archive entry

class NCBI_XUTIL_EXPORT CTarEntryInfo
{
public:
    /// Which entry type.
    enum EType {
        eFile        = CDirEntry::eFile,    ///< Regular file
        eDir         = CDirEntry::eDir,     ///< Directory
        eLink        = CDirEntry::eLink,    ///< Symbolic link
        eUnknown     = CDirEntry::eUnknown, ///< Unknown type
        eGNULongName = eUnknown + 1,        ///< GNU long name
        eGNULongLink = eUnknown + 2         ///< GNU long link
    };

    // Constructor
    CTarEntryInfo()
        : m_Type(eUnknown)
    {
        memset(&m_Stat, 0, sizeof(m_Stat));
    }

    // No setters -- they are not needed for access by the user, and
    // settings are done directly from CTar for the sake of performance.

    // Getters only!
    const string& GetName(void)             const { return m_Name;          }
    EType         GetType(void)             const { return m_Type;          }
    Int8          GetSize(void)             const { return m_Stat.st_size;  }
    int           GetMode(void)             const { return m_Stat.st_mode;  }
    void          GetMode(CDirEntry::TMode* user_mode,
                          CDirEntry::TMode* group_mode = 0,
                          CDirEntry::TMode* other_mode = 0) const;
    int           GetUserId(void)           const { return m_Stat.st_uid;   }
    int           GetGroupId(void)          const { return m_Stat.st_gid;   }
    const string& GetLinkName(void)         const { return m_LinkName;      }
    const string& GetUserName(void)         const { return m_UserName;      }
    const string& GetGroupName(void)        const { return m_GroupName;     }
    time_t        GetModificationTime(void) const { return m_Stat.st_mtime; }

private:
    string       m_Name;       ///< Name of file
    EType        m_Type;       ///< Type
    string       m_UserName;   ///< User name
    string       m_GroupName;  ///< Group name (empty string for MSWin)
    string       m_LinkName;   ///< Name of linked file if type is eLink
    struct stat  m_Stat;       ///< Dir entry compatible info

    friend class CTar;
};


NCBI_XUTIL_EXPORT ostream& operator << (ostream&, const CTarEntryInfo&);


/// Forward declarations of helper structures used for archive processing.
struct SHeader;
struct SProcessData;


//////////////////////////////////////////////////////////////////////////////
///
/// CTar class
///
/// Throw exceptions on error.
/// Note that if a stream constructor was used then CTar can only perform
/// one pass over the archive.  This means that only one action will
/// succeed.  Before next action, you should explicitly reset the stream
/// position to the beginning of the acrhive.

class NCBI_XUTIL_EXPORT CTar
{
public:
    /// General flags
    enum EFlags {
        // --- Extract/List/Test ---
        /// Ignore blocks of zeros in archive.
        /// Generally, 2 or more consecutive zero blocks indicate EOF.
        fIgnoreZeroBlocks  = (1<<1),

        // --- Extract/Append ---
        ///< Follow symbolik links (instead of overwriting them)
        fFollowLinks       = (1<<2),

        // --- Extract ---
        /// Allow to overwrite existing entries with entries from archive
        fOverwrite         = (1<<3),
        /// Update entries that are older than entries in archive
        fUpdate            = (1<<4) | fOverwrite,
        /// Backup destination if it exists (all entries including dirs)
        fBackup            = (1<<5) | fOverwrite,
        ///< If destination entry exists, it must have the same type as source
        fEqualTypes        = (1<<6),
        /// Create extracted files with the same ownership
        fPreserveOwner     = (1<<7),
        /// Create extracted files with the same permissions
        fPreservePerm      = (1<<8),
        /// Preserve date/times for extracted files
        fPreserveTime      = (1<<9),
        /// Preserve all attributes
        fPreserveAll       = fPreserveOwner | fPreservePerm | fPreserveTime,

        /// Default flags
        fDefault           = fOverwrite | fPreserveAll
    };
    typedef unsigned int TFlags;  ///< Binary OR of "EFlags"


    /// Constructors
    CTar(const string& file_name);
    CTar(CNcbiIos& stream);

    /// Destructor
    virtual ~CTar();

    /// Define a vector of pointers to entries.
    typedef vector< AutoPtr<CTarEntryInfo> > TEntries;


    //------------------------------------------------------------------------
    // Main functions
    //------------------------------------------------------------------------

    /// Create a new empty archive
    ///
    /// If a file with such name already exists it will be rewritten.
    /// @sa
    ///   Append, Update
    void Create(void);

    /// Append an entry at the end of an archive that already exists.
    ///
    /// Appended entry can be either a file or a directory.
    /// The name of the entry may not contain '..'.
    /// Leading slash in an absolute path will be removed.
    /// The names of appended entries will be converted to Unix format.
    /// All entries will be added at the end of the archive.
    /// @sa
    ///   Create, Update
    void Append(const string& entry_name);

    /// Only append entries that are newer than corresponding ones
    /// already in the archive.
    ///
    /// Add more recent copies, if available, of archive members and place
    /// them at the end of the archive.
    /// @sa
    ///   Create, Append
    void Update(const string& entry_name);

/*
    // Delete an entry from the archive (not for use on magnetic tapes :-)
    void Delete(const string& entry_name);

    // Find entires on the file system that differ with corresponding
    // entries already in the archive.
    TEntries Diff(const string& diff_dir);
*/

    /// Extract entire archive into a specified directory.
    ///
    /// Extract all archive entries, which names match pre-set masks.
    /// @param dst_dir
    ///   Directory name to extract the files to.
    /// @sa SetMask, UnsetMask
    void Extract(const string& dst_dir);

    /// Get information about archive entries.
    ///
    /// @return
    ///   An array containing information on those archive entries
    ///   which names match pre-set masks.
    /// @sa SetMask
    TEntries List(void);

    /// Verify archive integrity.
    /// 
    /// Emulate extracting files from archive without creating them on disk.
    /// @sa SetMask
    void Test(void);


    //------------------------------------------------------------------------
    // Utility functions
    //------------------------------------------------------------------------

    /// Get flags.
    TFlags GetFlags(void) const;

    /// Set flags.
    void   SetFlags(TFlags flags);

    /// Set name mask.
    ///
    /// Use this set of masks to process entries in archive.
    /// The masks apply to list/test/extract entries from TAR archive.
    /// If masks are not defined then all archive entries will be processed.
    /// @param mask
    ///   Set of masks.
    /// @param if_to_own
    ///   Flag to take ownership on the masks (delete on destruction).
    /// @param use_case
    ///   Whether to do a case sensitive (eCase -- default),
    ///   or a case-insensitive (eNocase) match .
    void SetMask(CMask *mask, EOwnership if_to_own = eNoOwnership,
                 NStr::ECase use_case = NStr::eCase);

    /// Unset used name masks.
    ///
    /// Upon mask reset, all entries become subject to achive processing in
    /// list/test/extract operations.
    void UnsetMask();

    /// Get base directory to search for files while added to the archive.
    const string& GetBaseDir(void) const;

    /// Set base directory to search for files while added to the archive.
    /// Only used for files that are specified via relative paths.
    void SetBaseDir(const string& dir_name);

protected:
    /// File archive open mode
    enum EOpenMode {
        eCreate,
        eRead,
        eUpdate,
        eUndefined
    };
    enum EStatus {
        eSuccess = 0,
        eFailure,
        eEOF,
        eZeroBlock
    };
    enum EAction {
        eList,
        eExtract,
        eTest
    };
    enum EMask {
        eUseMask,
        eIgnoreMask
    };

    // Open/close archive
    void x_Open(EOpenMode mode);
    void x_Close(void);

    // Read information about next entry in the TAR archive
    EStatus x_ReadEntryInfo(CTarEntryInfo& info);

    // Pack either name or linkname into archive file header
    bool x_PackName(SHeader* header, const CTarEntryInfo& info, bool link);

    // Write information about entry into the TAR archive
    void x_WriteEntryInfo(const string&        name,
                          const CTarEntryInfo& info);

    // Read the archive and do some "action".
    void x_ReadAndProcess(EAction action, SProcessData* data = 0,
                          EMask use_mask = eUseMask);

    // Process next entry from the archive for a specified action.
    // If process == FALSE, just skip the entry without processing.
    void x_ProcessEntry(const CTarEntryInfo& info, bool process,
                        EAction action, SProcessData* data = 0);

    // Try to extract an entry from the archive into the file system,
    // and return the entry size (if any) still remaining in the archive.
    streamsize x_ExtractEntry(const CTarEntryInfo& info, SProcessData& data);

    // Restore attributes of a specified entry.
    // If 'target' not specified, theb CDirEntry will be constructed
    // from 'info'. In this case, 'info' should have correct name for
    // the destination dir entry.
    void x_RestoreAttrs(const CTarEntryInfo& info, CDirEntry* dst = 0);

    // Read/write specified number of bytes from/to the archive.
    // These routines do the proper alignment at the end of each I/O.
    size_t x_ReadArchive(char* buffer, size_t n);
    void   x_WriteArchive(const char* buffer, size_t n);

    // Check path and convert it to an archive name.
    string x_ToArchiveName(const string& path) const;

    // Append an entry to the archive.
    void x_Append(const string& name, const TEntries* update_list = 0);
    // Append file entry to the archive. Convenience upcall for x_Append().
    void x_AppendFile(const string& name, const CTarEntryInfo& info);

protected:
    string         m_FileName;       ///< Tar archive file name.
    CNcbiFstream*  m_FileStream;     ///< File stream of the archive.
    EOpenMode      m_OpenMode;       ///< What was it open for.
    CNcbiIos*      m_Stream;         ///< Archive stream (used for all I/O).
    streamsize     m_StreamPos;      ///< Position within the archive
    size_t         m_BufferSize;     ///< Buffer size for IO operations.
    char*          m_Buffer;         ///< I/O buffer.
    TFlags         m_Flags;          ///< Bitwise OR of flags.
    CMask*         m_Mask;           ///< Masks for list/test/extract.
    EOwnership     m_MaskOwned;      ///< Flag to take ownership for m_Mask.
    NStr::ECase    m_MaskUseCase;    ///< Flag for mask matching.
    bool           m_IsModified;     ///< True after at least one write.
    string         m_BaseDir;        ///< Base directory to seek files to add
                                     ///< by relative paths.
};


//////////////////////////////////////////////////////////////////////////////
//
// Inline methods
//

inline
void CTar::Create(void)
{
    x_Open(eCreate);
}

inline
void CTar::Append(const string& name)
{
    x_Open(eUpdate);
    x_Append(name);
}

inline
void CTar::Test(void)
{
    x_ReadAndProcess(eTest);
}

inline
CTar::TFlags CTar::GetFlags(void) const
{
    return m_Flags;
}

inline
void CTar::SetFlags(TFlags flags)
{
    m_Flags = flags;
}

inline
void CTar::SetMask(CMask *mask, EOwnership if_to_own, NStr::ECase use_case)
{
    UnsetMask();
    m_Mask = mask;
    m_MaskOwned = if_to_own;
    m_MaskUseCase = use_case;
}

inline
void CTar::UnsetMask()
{
    // Delete owned mask
    if ( m_MaskOwned ) {
        delete m_Mask;
    }
    m_Mask = 0;
}

inline
const string& CTar::GetBaseDir(void) const
{
    return m_BaseDir;
}

inline
void CTar::SetBaseDir(const string& dir_name)
{
    m_BaseDir = CDirEntry::AddTrailingPathSeparator(dir_name);
}


END_NCBI_SCOPE


/* @} */


/*
 * ===========================================================================
 * $Log$
 * Revision 1.9  2005/05/27 21:12:54  lavr
 * Revert to use of std::ios as a main I/O stream (instead of std::iostream)
 *
 * Revision 1.8  2005/05/27 13:55:44  lavr
 * Major revamp/redesign/fix/improvement/extension of this API
 *
 * Revision 1.7  2005/05/05 13:41:58  ivanov
 * Added const to parameters in private methods
 *
 * Revision 1.6  2005/05/05 12:32:33  ivanov
 * + CTar::Update()
 *
 * Revision 1.5  2005/04/27 13:52:58  ivanov
 * Added support for (re)storing permissions/owner/times
 *
 * Revision 1.4  2005/01/31 15:30:59  ivanov
 * Lines wrapped at 79th column
 *
 * Revision 1.3  2005/01/31 14:23:35  ivanov
 * Added class CTarEntryInfo to store information about TAR entry.
 * Added CTar methods:           Create, Append, List, Test.
 * Added CTar utility functions: GetFlags/SetFlags, SetMask/UnsetMask,
 *                               GetBaseDir/SetBaseDir.
 *
 * Revision 1.2  2004/12/14 17:55:48  ivanov
 * Added GNU tar long name support
 *
 * Revision 1.1  2004/12/02 17:46:14  ivanov
 * Initial draft revision
 *
 * ===========================================================================
 */

#endif  /* UTIL_COMPRESS__TAR__HPP */
