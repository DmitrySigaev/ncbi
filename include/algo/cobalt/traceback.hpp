/* $Id$
* ===========================================================================
*
*                            PUBLIC DOMAIN NOTICE
*               National Center for Biotechnology Information
*
*  This software/database is a "United States Government Work" under the
*  terms of the United States Copyright Act.  It was written as part of
*  the author's offical duties as a United States Government employee and
*  thus cannot be copyrighted.  This software/database is freely available
*  to the public for use. The National Library of Medicine and the U.S.
*  Government have not placed any restriction on its use or reproduction.
*
*  Although all reasonable efforts have been taken to ensure the accuracy
*  and reliability of the software and data, the NLM and the U.S.
*  Government do not and cannot warrant the performance or results that
*  may be obtained by using this software or data. The NLM and the U.S.
*  Government disclaim all warranties, express or implied, including
*  warranties of performance, merchantability or fitness for any particular
*  purpose.
*
*  Please cite the author in any work or product based on this material.
*
* ===========================================================================*/

/*****************************************************************************

File name: traceback.hpp

Author: Jason Papadopoulos

Contents: Interface for CEditScript class

******************************************************************************/

/// @file traceback.hpp
/// Interface for CEditScript class

#ifndef _ALGO_COBALT_TRACEBACK_HPP_
#define _ALGO_COBALT_TRACEBACK_HPP_

#include <algo/blast/core/gapinfo.h>
#include <algo/cobalt/base.hpp>
#include <algo/cobalt/seq.hpp>

BEGIN_NCBI_SCOPE
BEGIN_SCOPE(cobalt)

class CEditScript {
public:
    CEditScript() {}
    CEditScript(GapEditScript *blast_tback);

    ~CEditScript() {}

    /// Return a blast traceback structure corresponding
    /// to a subset of the complete traceback available
    /// @param tback_range The portion of the traceback desired.
    ///                    The starting and ending offsets in this
    ///                    range will also be included in the traceback
    ///                    structure returned [in]
    /// @return The subset of the traceback
    ///
    CEditScript MakeEditScript(TRange tback_range);

    /// Return a blast traceback structure corresponding
    /// to a subset of the complete traceback available
    /// @param tback The edit script generated by the CNWAligner class [in]
    /// @param tback_range The portion of the traceback desired.
    ///                    The starting and ending offsets in this
    ///                    range will also be included in the traceback
    ///                    structure returned [in]
    /// @return The subset of the traceback
    ///
    static CEditScript MakeEditScript(const CNWAligner::TTranscript& tback,
                                      TRange tback_range);

    /// Given a subject offset, find the corresponding query offset
    /// assuming traceback is specified
    /// @param script Linked list of blast traceback operations [in]
    /// @param q Offset of first query position in script [in]
    /// @param s Offset of first subject position in script [in]
    /// @param s_stop The subject offset whose query offset is desired [in]
    /// @param new_q_stop The query offset corresponding to s_stop.
    ///                   If s_stop aligns with a gap in the query,
    ///                   new_q_stop either includes or excludes the gap [out]
    /// @param new_s_stop The subject offset corresponding to new_q_stop.
    ///                   This may not be the same as s_stop [out]
    /// @param tback The traceback position of new_q_stop [out]
    /// @param go_past_q_gap If s_stop aligns with a gap, include the
    ///                      gap if true [in]
    void FindOffsetFromSeq2(TOffsetPair start_offsets,
                            TOffsetPair& new_offsets,
                            TOffset seq2_target, TOffset& new_tback,
                            bool go_past_seq1_gap);

    /// Given a query offset, find the corresponding subject offset
    /// assuming traceback is specified
    /// @param script Linked list of blast traceback operations [in]
    /// @param q Offset of first query position in script [in]
    /// @param s Offset of first subject position in script [in]
    /// @param q_stop The query offset whose subject offset is desired [in]
    /// @param new_q_stop The query offset corresponding to new_s_stop.
    ///                   This may not be the same as q_stop [out]
    /// @param new_s_stop The subject offset corresponding to q_stop.
    ///                   If q_stop aligns with a gap in the query,
    ///                   new_s_stop either includes or excludes the gap [out]
    /// @param tback The traceback position of new_s_stop [out]
    /// @param go_past_s_gap If q_stop aligns with a gap, include the
    ///                      gap if true [in]
    void FindOffsetFromSeq1(TOffsetPair start_offsets,
                            TOffsetPair& new_offsets,
                            TOffset seq1_target, TOffset& new_tback,
                            bool go_past_seq2_gap);


    int GetScore(TRange tback_range, TOffsetPair start_offsets,
                 CSequence& seq1, int **seq2_pssm,
                 int gap_open, int gap_extend);

    vector<TOffsetPair> ListMatchRegions(TOffsetPair start_offsets);

    void VerifyScript(TRange seq1_range, TRange seq2_range);

private:

    struct STracebackOp {
        EGapAlignOpType op_type;
        int num_ops;

        STracebackOp(EGapAlignOpType op, int num)
                        : op_type(op), num_ops(num) {}
    };

    typedef vector<STracebackOp> TScriptOps;

    TScriptOps m_Script;

    void AddOps(EGapAlignOpType op_type, int num_ops);
};


END_SCOPE(cobalt)
END_NCBI_SCOPE

#endif // _ALGO_COBALT_TRACEBACK_HPP_

/*--------------------------------------------------------------------
  $Log$
  Revision 1.1  2005/11/07 18:15:52  papadopo
  Initial revision

--------------------------------------------------------------------*/
