<package>
	<job id="new-project-wsh-js">
	
		<script language="VBScript">
        Function VbAskData(prompt, title, defvalue)
            VbAskData = InputBox(prompt, title, defvalue) 
        End Function

        Function VbAskQuestionYNC(prompt, title)
            Dim reply
            reply = MsgBox(prompt, vbYesNoCancel, title)
            If reply = vbYes Then
                VbAskQuestionYNC = "yes"
            End If
            If reply = vbNo Then
                VbAskQuestionYNC = "no"
            End If
        End Function

        Function VbAskQuestionYN(prompt, title)
            Dim reply
            reply = MsgBox(prompt, vbYesNo, title)
            If reply = vbYes Then
                VbAskQuestionYN = "yes"
            End If
            If reply = vbNo Then
                VbAskQuestionYN = "no"
            End If
        End Function
		</script>

		<script language="JScript" src="project_utilits.js">
		</script>

		<script language="JScript">
		// Framework
		
		function InputData(prompt, defvalue)
		{
		    var answer = VbAskData(prompt, WScript.ScriptFullName, defvalue);
            if ((typeof(answer) == "undefined") || answer.length == 0) {
    			WScript.Quit(1);
            }
            return answer;
		}
		function InputFlagYNC(prompt)
		{
		    var answer = VbAskQuestionYNC(prompt, WScript.ScriptFullName);
            if ((typeof(answer) == "undefined") || answer.length == 0) {
    			WScript.Quit(1);
            }
            return answer == "yes";
		}
		function InputFlagYN(prompt)
		{
		    var answer = VbAskQuestionYN(prompt, WScript.ScriptFullName);
            if ((typeof(answer) == "undefined") || answer.length == 0) {
    			WScript.Quit(1);
            }
            return answer == "yes";
		}
		// Verify command line arguments
		function VerifyArguments(oArgs)
		{
			if (oArgs.Length < 2) {
				return false;
			}
			if (oArgs.Length > 5) {
				return false;
			}
			
			return true;
		}
		// Verify task object
		function VerifyTask(oShell, oTask)
		{
            var err = false;
			// Project name
			var oRe = /^[a-z]([a-z]|\d|[_])*$/g;
			if (oTask.ProjectName.match(oRe) == null) {
				WScript.Echo("ERROR: Invalid project name: \"" + oTask.ProjectName + "\"");
				WScript.Echo("       Project name should start with a lower-case character");
				WScript.Echo("       and contain lower-case character(s), underscore(s), or digit(s)");
				err = true;
			}
			// Project type
			if ((typeof(oTask.ProjectTemplate) == "undefined") || oTask.ProjectTemplate.length == 0) {
				WScript.Echo("ERROR: Invalid project type: \"" + oTask.ProjectType + "\"");
				WScript.Echo("       Supported project types are:");
				var keys = (new VBArray(oTask.TemplatesDict.Keys())).toArray();
				for(var key_ind in keys) {
					WScript.Echo( "         " + keys[key_ind] );
				}
				err = true;
			}
			
			// Path to C++ Toolkit
			var oFso = new ActiveXObject("Scripting.FileSystemObject");
			if ( !oFso.FolderExists(oTask.ToolkitPath) ||
			     (!(!oTask.DllBuild && oFso.FolderExists(oTask.ToolkitPath + "\\static\\bin")) &&
			      !( oTask.DllBuild && oFso.FolderExists(oTask.ToolkitPath + "\\dll\\bin")) &&
			      !oFso.FolderExists(oTask.ToolkitPath + "\\bin"))) {
				WScript.Echo("ERROR: Pre-built NCBI C++ toolkit is not found in:\n\"" + oTask.ToolkitPath + "\"");
				if (oTask.DllBuild) {
				    if (oFso.FolderExists(oTask.ToolkitPath + "\\static\\bin")) {
        				WScript.Echo("\nConsider using static build - do not specify -dll flag");
				    }
				} else {
				    if (oFso.FolderExists(oTask.ToolkitPath + "\\dll\\bin")) {
        				WScript.Echo("\nConsider using DLL build - specify -dll flag");
				    }
				}
				err = true;
			}
			if ( !oFso.FolderExists(oTask.ToolkitSrcPath) ||
			     !oFso.FolderExists(oTask.ToolkitSrcPath + "\\include") ||
			     !oFso.FolderExists(oTask.ToolkitSrcPath + "\\src")) {
				WScript.Echo("ERROR: Pre-built NCBI C++ toolkit sources are not found in:\n\"" + oTask.ToolkitPath + "\"");
				err = true;
			}
			if (err) {
				WScript.Quit(1);	
			}
		}
		// Create usage string
		function Usage()
		{
			var usage_str;
			//usage_str  = "Usage:\n";
			//usage_str += "cscript new_project.wsf <project-name> <project-template> <path-to-pre-built-toolkit> [-dll]";
			usage_str  = "USAGE: cscript new_project.wsf <name> <type> [builddir] [-dll] [-v]\n";
			usage_str += "SYNOPSIS:\n";
			usage_str += "    Create new MSVC7.1 application project from sample template:\n";
			usage_str += "      Create local build tree structure. Fill-in the local tree.\n";
			usage_str += "      Copy and adjust sample code.\n";
//			usage_str += "      Add to project_tree_builder.ini entries for pre-built NCBI C++ toolkit.\n";
			usage_str += "      Run project tree builder on local build tree.\n";
			usage_str += "      Open created solution in MSVC7.1 IDE.\n";
			usage_str += "ARGUMENTS:\n";
			usage_str += "    <name>      -- name of the project\n";
			usage_str += "    <type>      -- one of the following:\n";
			usage_str += "                   app[/basic]  for a simple application\n";
			usage_str += "                   app/cgi      for a CGI application\n";
			usage_str += "                   app/dbapi    for a DBAPI application\n";
			usage_str += "                   app/gui      for a FLTK application\n";
			usage_str += "                   app/objects  for an application that uses ASN.1 objects\n";
			usage_str += "                   app/objmgr   for an application that uses Object Manager\n";
			usage_str += "                   app/alnmgr   for an application that uses Alignment Manager\n";
			usage_str += "                   app/soap/client   for a SOAP client\n";
			usage_str += "                   app/soap/server   for a SOAP server\n";
			usage_str += "    [builddir]  -- path to the pre-built NCBI C++ toolkit\n";
			usage_str += "                       default path is: " + GetDefaultCXX_ToolkitFolder() + "\\" + GetDefaultCXX_ToolkitSubFolder() + "\n";
			usage_str += "                       you can only specify a subfolder of " + GetDefaultCXX_ToolkitFolder() + "\n";
			usage_str += "    [-dll]      -- use NCBI C++ toolkit DLLs' instead of static libraries\n";
            usage_str += "    [-v]        -- show details about what is being made\n";
			usage_str += "EXAMPLES:\n";
			usage_str += "    cscript new_project.wsf my_app app/basic\n";
			usage_str += "    cscript new_project.wsf my_app app/basic -dll -v\n";
			usage_str += "    cscript new_project.wsf my_app app/basic cxx.potluck -dll\n";
			usage_str += "    cscript new_project.wsf my_app app/basic \\\\Snowman\\win-coremake\\Lib\\Ncbi\\CXX_Toolkit\\msvc71\\cxx.current -dll\n";
			
			return usage_str;
		}
		// Task object constructor
		function Task()
		{
			var toolkit_path;
			var oArgs = WScript.Arguments;
			var run_interactive = GetFlagValue(oArgs, "-i", false);
			if ( !run_interactive && VerifyArguments(oArgs) ) {
                SetVerbose(oArgs, "-v", false);
			    this.ProjectName = GetPositionalValue(oArgs, 0);
			    this.ProjectType = GetPositionalValue(oArgs, 1);
			    this.DllBuild    = GetFlagValue(oArgs, "-dll", false);
			    toolkit_path     = GetOptionalPositionalValue(oArgs, 2, 
			        GetDefaultCXX_ToolkitFolder() + "\\" + GetDefaultCXX_ToolkitSubFolder());
			} else {
				WScript.Echo(Usage());
				if (!run_interactive) {
    			    var oFso = new ActiveXObject("Scripting.FileSystemObject");
    			    var scripthost = oFso.GetBaseName(WScript.FullName);
    			    run_interactive = (scripthost == "cscript");
				    if (run_interactive) {
    				    run_interactive = InputFlagYN("Do you want to enter the data interactively?");
				    }
				    if (!run_interactive) {
				        WScript.Quit(1);
				    }
				}
			}
			if (run_interactive) {
                var prompt, answer, footer;
                prompt = "Enter Project Name";
//                footer = "\n\nPress Cancel to abort the script";
                footer="";
                this.ProjectName = InputData(prompt+footer, "test");
                prompt = "Enter Project Type\n";
			    prompt += "This can be one of the following:\n";
			    prompt += "\tapp\n";
			    prompt += "\tapp/basic\n";
			    prompt += "\tapp/cgi\n";
			    prompt += "\tapp/dbapi\n";
			    prompt += "\tapp/gui\n";
			    prompt += "\tapp/objects\n";
			    prompt += "\tapp/objmgr\n";
			    prompt += "\tapp/alnmgr\n";
			    prompt += "\tapp/soap/client\n";
			    prompt += "\tapp/soap/server";
                this.ProjectType = InputData(prompt+footer, "app/basic");
                prompt = "Enter path to the pre-built NCBI C++ toolkit";
			    toolkit_path = InputData(prompt+footer,
			        GetDefaultCXX_ToolkitFolder() + "\\" + GetDefaultCXX_ToolkitSubFolder());
			    prompt = "Use NCBI C++ toolkit DLLs?";
			    this.DllBuild = InputFlagYNC(prompt+footer);
			    prompt = "Use verbose output?"
                SetVerboseFlag( InputFlagYNC(prompt+footer));
			}
			this.ProjectFolder = this.ProjectName;

			this.TemplatesDict = new ActiveXObject("Scripting.Dictionary");
			this.TemplatesDict.Add("app",         "app/sample/basic");
			this.TemplatesDict.Add("app/basic",   "app/sample/basic");
			this.TemplatesDict.Add("app/cgi",     "app/sample/cgi");
			this.TemplatesDict.Add("app/dbapi",   "app/sample/dbapi");
			this.TemplatesDict.Add("app/gui",     "app/sample/gui");
			this.TemplatesDict.Add("app/objects", "app/sample/objects");
			this.TemplatesDict.Add("app/objmgr",  "app/sample/objmgr");
			this.TemplatesDict.Add("app/alnmgr",  "app/sample/alnmgr");
			this.TemplatesDict.Add("app/soap/client",  "app/sample/soap/client");
			this.TemplatesDict.Add("app/soap/server",  "app/sample/soap/server");
			if (this.TemplatesDict.Exists(this.ProjectType)) {
			    this.ProjectTemplate = this.TemplatesDict.Item(this.ProjectType);
			}

			if (toolkit_path.indexOf("\\\\") == 0 || toolkit_path.indexOf(":\\") == 1) {
				this.ToolkitPath = toolkit_path;
			} else {
				this.ToolkitPath = GetDefaultCXX_ToolkitFolder() + "\\" + toolkit_path;	
			}
            var oFso = new ActiveXObject("Scripting.FileSystemObject");
            var src_root = this.ToolkitPath;
            var src_path = src_root + "\\src";
            while (!oFso.FolderExists(src_path)) {
                src_root = oFso.GetParentFolderName(src_root)
                if (src_root == "") {
                    break;
                }
                src_path = src_root + "\\src";
            }
            this.ToolkitSrcPath = src_root;
		}
		// Diagnostic dump of task object
		function DumpTask(oTask)
		{
			VerboseEcho("ProjectName     = " + oTask.ProjectName);
			VerboseEcho("ProjectFolder   = " + oTask.ProjectFolder);
			VerboseEcho("ProjectType     = " + oTask.ProjectType);
			VerboseEcho("ProjectTemplate = " + oTask.ProjectTemplate);
			VerboseEcho("ToolkitPath     = " + oTask.ToolkitPath);
			VerboseEcho("ToolkitSrcPath  = " + oTask.ToolkitSrcPath);
			VerboseEcho("DllBuild        = " + oTask.DllBuild.toString());
		}
		
		// Fill local tree
		function FillTree(oShell, oTree)
		{
			FillTreeStructure(oShell, oTree);
		}

		// Copy project template from CVS
		function CopyProjectTemplate(oShell, oTree, oTask)
		{
		    var src = "/src/" + oTask.ProjectTemplate + "/*.*";
		    GetFileFromTree(oShell, oTree, oTask, src, oTree.SrcProjectBranch)
		}

		// Change Makefile.in and Makefile.*.app
		function AdjustProject(oShell, oTree, oTask)
		{
			var oFso = new ActiveXObject("Scripting.FileSystemObject");
			
			var filename = oTree.SrcProjectBranch + "\\Makefile.in";
			var modelname = filename + ".old";
			var samplename = "";

			// Makefile.in
            VerboseEcho("Modifying      " + filename);
			oFso.CopyFile(filename, modelname);
			var old_file = oFso.OpenTextFile(modelname, 1);
			var new_file = oFso.CreateTextFile(filename, true);
			while( !old_file.AtEndOfStream ) {
				var old_line = old_file.ReadLine();
				if (old_line.indexOf("APP_PROJ") == 0) {
					new_file.WriteLine("APP_PROJ = " + oTask.ProjectName);
//					new_file.WriteLine("REQUIRES = CXX_Toolkit");
				} else {
					new_file.WriteLine(old_line);
				}
			}
			old_file.Close();
			new_file.Close();
			oFso.DeleteFile(modelname, true);
			
			// Makefile.*.app
			// lookup file name
			var src_folder = oFso.GetFolder(oTree.SrcProjectBranch);
			var src_folder_contents = new Enumerator(src_folder.files);
			modelname = "";
			for( ; !src_folder_contents.atEnd(); src_folder_contents.moveNext()) {
				var src_file = src_folder_contents.item();
				if (oFso.GetExtensionName(src_file) == "app") {
					modelname = src_file;
					samplename = oFso.GetExtensionName( oFso.GetBaseName(src_file) );
				}
			}
			filename = oTree.SrcProjectBranch + "\\Makefile." + oTask.ProjectName + ".app";
            VerboseEcho("Converting model file " + modelname + " to " + filename);
			// open for reading
			var old_makefile = oFso.OpenTextFile(modelname, 1);
			// Create new makefile with new project name
			var new_makefile = oFso.CreateTextFile(filename, true);
			while( !old_makefile.AtEndOfStream ) {
				var old_line = old_makefile.ReadLine();
				if (old_line.indexOf("APP") == 0) {
					new_makefile.WriteLine("APP = " + oTask.ProjectName);
//				} else if (old_line.indexOf("SRC") == 0) {
//					new_makefile.WriteLine("SRC = " + oTask.ProjectName);
				} else {
					new_makefile.WriteLine(old_line);
				}
			}
			old_makefile.Close();
			new_makefile.Close();
			oFso.DeleteFile(modelname, true);

			// samplename.*
/*
			for( src_folder_contents.moveFirst(); !src_folder_contents.atEnd(); src_folder_contents.moveNext()) {
				var src_file = src_folder_contents.item();
				if (oFso.GetBaseName(src_file) == samplename) {
				    var ext = oFso.GetExtensionName(src_file);
				    var dest = oTree.SrcProjectBranch + "\\" + oTask.ProjectName + "." + ext;
                    VerboseEcho("Converting model file " + src_file + " to " + dest);
        			oFso.CopyFile(src_file, dest);
        			oFso.DeleteFile(src_file);
				}
			}
*/
		}
		// Run project tree builder
		function RunPtb(oShell, oTree, oTask)
		{
			var ptb;
			if ((typeof(oTask.RemotePtb) == "undefined") || oTask.RemotePtb.length == 0) {
			    var conf = GetConfigs(oTask)[0];
                var target_path;
                if (oTask.DllBuild) {
                    target_path = oTree.BinPathDll;
                } else {
                    target_path = oTree.BinPathStatic;
                }
                target_path += "\\" + conf;
			    ptb = target_path + "\\project_tree_builder.exe";
			} else {
			    ptb = oTask.RemotePtb;
			}
            var oFso = new ActiveXObject("Scripting.FileSystemObject");
            if (!oFso.FileExists(ptb)) {
                WScript.Echo("ERROR: File not found: " + ptb);
		        WScript.Quit(1);	
            }
	        var ptb_command_line;
	        ptb_command_line  = "\"" + ptb + "\"";
			if ( oTask.DllBuild ) {
				ptb_command_line += " -dll";
			}
			ptb_command_line += " -nobuildptb";
	        ptb_command_line += " -ext -nws -extroot \"";
            ptb_command_line += oTask.ToolkitPath;
			ptb_command_line += "\" -logfile \"" + oTree.TreeRoot + "\\" + oTask.ProjectName + "_log.txt\"";
			ptb_command_line += " -conffile \"" + oTree.CompilersBranch + "\\project_tree_builder.ini\"";
			ptb_command_line += " \"" + oTree.TreeRoot;
			ptb_command_line += "\" src\\";
			if ( oTask.DllBuild ) {
				ptb_command_line += " \"" + oTree.CompilersBranchDll   + "\\build\\" + oTask.ProjectName + ".sln\"";
			} else {
				ptb_command_line += " \"" + oTree.CompilersBranchStatic + "\\build\\" + oTask.ProjectName + ".sln\"";
			}
			execute(oShell, ptb_command_line);
		}
		// Open generated solution in  MSVC IDE
		function LoadSolution(oShell, oTree, oTask)
		{
			var sln_path = " \"";
			if ( oTask.DllBuild ) {
				sln_path += oTree.CompilersBranchDll;
			} else {
				sln_path += oTree.CompilersBranchStatic;
			}
			sln_path += "\\build\\" + oTask.ProjectName + ".sln\"";

			execute(oShell, "start \"\" " + sln_path);
		}
		
		</script>
		
		<script language="JScript">
		var oShell = WScript.CreateObject("WScript.shell");
		
		var oTask  = new Task();
		VerifyTask(oShell, oTask);
        VerboseEcho("========================= Task ========================================");
		DumpTask(oTask);
		
		var oTree  = new Tree(oShell, oTask);
        VerboseEcho("========================= Tree ========================================");
		DumpTree(oTree);
		
        VerboseEcho("========================= CreateTreeStructure =========================");
		CreateTreeStructure(oTree, oTask);
        VerboseEcho("========================= FillTree ====================================");
		FillTree           (oShell, oTree);
//        VerboseEcho("========================= AdjustLocalSite =============================");
// 		AdjustLocalSite    (oShell, oTree, oTask);
        VerboseEcho("========================= CopyProjectTemplate =========================");
 		CopyProjectTemplate(oShell, oTree, oTask);
        VerboseEcho("========================= AdjustProject ===============================");
 		AdjustProject      (oShell, oTree, oTask);
        VerboseEcho("========================= CopyPtb =====================================");
 		CopyPtb            (oShell, oTree, oTask);
        VerboseEcho("========================= CopyDatatool ================================");
        CopyDatatool       (oShell, oTree, oTask);
        VerboseEcho("========================= RunPtb ======================================");
 		RunPtb             (oShell, oTree, oTask);
        VerboseEcho("========================= LoadSolution ================================");
 		LoadSolution       (oShell, oTree, oTask);
        VerboseEcho("========================= done ========================================");
	 	</script>
	</job>
</package>
 
