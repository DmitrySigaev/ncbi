<package>
<job id="import-project-wsh-js">

<script language="JScript" src="project_utilits.js">
</script>

<script language="JScript">
// Framework

// Create usage string
function Usage()
{
    var usage_str;
    //usage_str  = "Usage:\n";
    //usage_str += "cscript import_project.wsf <project-name> <path-to-pre-built-toolkit> [-dll]";
    usage_str  = "USAGE: cscript import_project.wsf <cvs_tree_path> [builddir] [-dll [-b] [-r] [-v]\n";
    usage_str += "SYNOPSIS:\n";
    usage_str += "    Retrieve project (with all sub-projects) located in the NCBI C++ toolkit\n";
    usage_str += "    CVS tree at:\n";
    usage_str += "      " + GetCvsTreeRoot()+"/src/<cvs_tree_path>\n";
    usage_str += "      " + GetCvsTreeRoot()+"/include/<cvs_tree_path>\n";
    usage_str += "    Create local build tree structure. Fill-in local tree.\n";
    usage_str += "    Adjust Makefile.in in src/<cvs_tree_path> to require NCBI C++ toolkit.\n";
    usage_str += "    Add to project_tree_builder.ini entries for pre-built NCBI C++ toolkit.\n";
    usage_str += "    Run project tree builder on local build tree.\n";
    usage_str += "    Open created solution in MSVC7.1 IDE.\n";
    usage_str += "ARGUMENTS:\n";
    usage_str += "    <cvs_tree_path>  -- starting path for import\n";
    usage_str += "    [builddir]       -- path to the pre-built NCBI C++ toolkit\n";
    usage_str += "                        default path is: " + GetDefaultCXX_ToolkitFolder() + "\\" + GetDefaultCXX_ToolkitSubFolder() + "\n";
    usage_str += "                        you can only specify a subfolder of " + GetDefaultCXX_ToolkitFolder() + "\n";
    usage_str += "    [-dll]           -- use NCBI C++ toolkit DLLs' instead of static libraries\n";
    usage_str += "    [-b]             -- copy NCBI C++ toolkit DLLs' to local binary directories\n";
    usage_str += "    [-r]             -- copy NCBI C++ gui resources\n";
    usage_str += "    [-v]             -- show details about what is being made\n";
    usage_str += "EXAMPLES:\n";
    usage_str += "    cscript import_project.wsf objmgr/test\n";
    usage_str += "    cscript import_project.wsf objmgr/test -dll\n";
    usage_str += "    cscript import_project.wsf objmgr/test cxx.potluck -dll\n";
    usage_str += "    cscript import_project.wsf objmgr/test \\\\Snowman\\win-coremake\\Lib\\Ncbi\\CXX_Toolkit\\msvc71\\cxx.current -dll\n";

    return usage_str;
}
// Verify command line arguments
function VerifyArguments(oArgs)
{
    if (oArgs.Length < 1) {
        return false;
    }
    if (oArgs.Length > 6) {
        return false;
    }

    return true;
}
// Verify task object
function VerifyTask(oTask)
{
    var err = false;
    if (oShell.CurrentDirectory.search(/ /) != -1) {
		WScript.Echo("ERROR: Name of the current directory contains spaces");
		err = true;
    }
    //Project name
    var oRe = /^[a-z]([a-z]|\d|[_]|[/])*$/g;
    if (oTask.ProjectName.match(oRe) == null) {
        WScript.Echo("ERROR: Invalid project name: \"" + oTask.ProjectName + "\"");
		WScript.Echo("       Project name should start with a lower-case character");
		WScript.Echo("       and contain lower-case character(s), underscore(s), digit(s), or slash(es)");
		err = true;
    }
    //Path to C++ Toolkit
    var oFso = new ActiveXObject("Scripting.FileSystemObject");
	if ( !oFso.FolderExists(oTask.ToolkitPath) ||
 		 !oFso.FolderExists(oTask.ToolkitPath + "\\bin") ) {
		WScript.Echo("ERROR: Pre-built NCBI C++ toolkit is not found in:\n\"" + oTask.ToolkitPath + "\"");
		err = true;
    }
	if ( !oFso.FolderExists(oTask.ToolkitSrcPath) ||
			!oFso.FolderExists(oTask.ToolkitSrcPath + "\\include") ||
			!oFso.FolderExists(oTask.ToolkitSrcPath + "\\src")) {
		WScript.Echo("ERROR: Pre-built NCBI C++ toolkit sources are not found in:\n\"" + oTask.ToolkitPath + "\"");
		err = true;
	}
	if (err) {
		WScript.Quit(1);	
	}
}       
// Task object constructor
function Task()
{
    var oArgs = WScript.Arguments;
    if ( !VerifyArguments(oArgs) ) {
        WScript.Echo(Usage());
        WScript.Quit(1);
    }
    SetVerbose(oArgs, "-v", false);

    this.ProjectName = GetPositionalValue(oArgs, 0);
    this.ProjectFolder = "imported_projects";
    this.DllBuild    = GetFlagValue(oArgs, "-dll", false);
    if ( this.DllBuild ) {
        this.CopyDlls    = GetFlagValue(oArgs, "-b", false);
    } else {
        this.CopyDlls    = false;
    }
    if ( this.DllBuild ) {
        this.CopyRes    = GetFlagValue(oArgs, "-r", false);
    } else {
        this.CopyRes    = false;
    }

    var toolkit_path = GetOptionalPositionalValue(oArgs, 1, 
        GetDefaultCXX_ToolkitFolder() + "\\" + GetDefaultCXX_ToolkitSubFolder());
    if (toolkit_path.indexOf("\\\\") == 0 || toolkit_path.indexOf(":\\") == 1) {
        this.ToolkitPath = toolkit_path;
    } else {
        this.ToolkitPath = GetDefaultCXX_ToolkitFolder() + "\\" + toolkit_path; 
    }
    var oFso = new ActiveXObject("Scripting.FileSystemObject");
    var src_root = this.ToolkitPath;
    var src_path = src_root + "\\src";
    while (!oFso.FolderExists(src_path)) {
        src_root = oFso.GetParentFolderName(src_root)
        if (src_root == "") {
            break;
        }
        src_path = src_root + "\\src";
    }
    this.ToolkitSrcPath = src_root;
}
// Diagnostic dump of task object
function DumpTask(oTask)
{
    VerboseEcho("ProjectName    = " + oTask.ProjectName);
	VerboseEcho("ProjectFolder  = " + oTask.ProjectFolder);
    VerboseEcho("ToolkitPath    = " + oTask.ToolkitPath);
    VerboseEcho("ToolkitSrcPath = " + oTask.ToolkitSrcPath);
    VerboseEcho("DllBuild       = " + oTask.DllBuild.toString());
    VerboseEcho("CopyDlls       = " + oTask.CopyDlls.toString());
    VerboseEcho("CopyRes        = " + oTask.CopyRes.toString());
}

// Fill local tree
function FillTree(oShell, oTree, oTask)
{
    FillTreeStructure(oShell, oTree);

    var include_dir = "include/" + BackSlashes(oTask.ProjectName);
    var src_dir     = "src/"     + BackSlashes(oTask.ProjectName);
    CheckoutSubDir(oShell, oTree, include_dir);
    CheckoutSubDir(oShell, oTree, src_dir);

    FillMakefileinTree(oShell, oTree, oTask);
}
// Project will require pre-built C++ Toolkit       
function AdjustProject(oShell, oTree, oTask)
{
    var oFso = new ActiveXObject("Scripting.FileSystemObject");

    // Makefile.in - open for appending
    var makefile_path = oTree.SrcProjectBranch + "\\Makefile.in";
    if ( oFso.FileExists(makefile_path) ) {
        VerboseEcho("Modifying (appending): " + makefile_path);
        var makefile = oFso.OpenTextFile(makefile_path, 8);
        makefile.WriteLine("REQUIRES = CXX_Toolkit");
        makefile.Close();
    } else {
        WScript.Echo("ERROR: " + makefile_path + " not found");
		WScript.Quit(1);	
    }
}
// Generate solution name. Must be the same as we can import more projects
function SolutionName(oTask)
{
    if ( oTask.DllBuild ) {
        return "imported_projects_dll";
    } else {
        return "imported_projects_static";
    }
}
// Run project tree builder
function RunPtb(oShell, oTree, oTask)
{
	var ptb_command_line;
	if ((typeof(oTask.RemotePtb) == "undefined") || oTask.RemotePtb.length == 0) {
        var conf = GetConfigs(oTask)[0];
        var target_path = oTree.BinPathStatic + "\\" + conf;
        ptb_command_line = target_path + "\\project_tree_builder.exe";
    } else {
		ptb_command_line = oTask.RemotePtb;
    }
    var oFso = new ActiveXObject("Scripting.FileSystemObject");
    if ( !oFso.FileExists(ptb_command_line) ) {
        WScript.Echo("ERROR: " + ptb_command_line + " not found");
		WScript.Quit(1);	
    }
    if ( oTask.DllBuild ) {
        ptb_command_line += " -dll";
    }
    ptb_command_line += " -logfile " + oTree.TreeRoot + "\\" + SolutionName(oTask) + "_log.txt";
    ptb_command_line += " -conffile " + oTree.CompilersBranch + "\\project_tree_builder.ini";
    ptb_command_line += " " + oTree.TreeRoot;
    ptb_command_line += " src\\";
    if ( oTask.DllBuild ) {
        ptb_command_line += " " + oTree.CompilersBranchDll   + "\\build\\" +  SolutionName(oTask) + ".sln";
    } else {
        ptb_command_line += " " + oTree.CompilersBranchStatic + "\\build\\" + SolutionName(oTask) + ".sln";
    }
    execute(oShell, ptb_command_line);
}
// Open (re-)generated solution in  MSVC IDE
function LoadSolution(oShell, oTree, oTask)
{
    var sln_path = " ";
    if ( oTask.DllBuild ) {
        sln_path += oTree.CompilersBranchDll;
    } else {
        sln_path += oTree.CompilersBranchStatic;
    }
    sln_path += "\\build\\" + SolutionName(oTask) + ".sln";

    execute(oShell, "start " + sln_path);
}

function FillMakefileinTree(oShell, oTree, oTask)
{
    var oFso = new ActiveXObject("Scripting.FileSystemObject");
    var dir_cvs_start   = "src/"  + ForwardSlashes(oTask.ProjectName);
    var dir_here_start  = oTree.SrcRootBranch + "\\" + BackSlashes(oTask.ProjectName);
    var dir_cvs = oFso.GetParentFolderName(dir_cvs_start);
    var dir_here = oFso.GetParentFolderName(dir_here_start);
    while (dir_here != oTree.SrcRootBranch) {
        GetFileFromTree(oShell, oTree, oTask, "/" + dir_cvs + "/Makefile.in", dir_here);
        AdjustMakefilein(oFso, dir_here);
        dir_cvs  = oFso.GetParentFolderName(dir_cvs);
        dir_here = oFso.GetParentFolderName(dir_here);
    }
}

function AdjustMakefilein(oFso, dir_here)
{
    var dir = oFso.GetFolder(dir_here);
    var dir_subdir = new Enumerator(dir.SubFolders);
    var all_subdir = new Array;
    for( ; !dir_subdir.atEnd(); dir_subdir.moveNext()) {
        var name = oFso.GetFileName(dir_subdir.item());
        if (name != "CVS") {
            all_subdir.push(name);
        }
    }
    var mkfile = dir_here + "\\Makefile.in";
    var mkfile_old = mkfile + ".old";
    VerboseEcho("Verifying      " + mkfile);

	oFso.CopyFile(mkfile, mkfile_old);
	var old_file = oFso.OpenTextFile(mkfile_old, 1);
	var new_file = oFso.CreateTextFile(mkfile, true);
	var subproj_started = false;
	var all_subproj = new Array;
	while( !old_file.AtEndOfStream ) {
		var old_line = old_file.ReadLine();
		if (!subproj_started && old_line.indexOf("SUB_PROJ") == -1) {
			new_file.WriteLine(old_line);
			continue;
		}
		if (old_line.indexOf("SUB_PROJ") != -1) {
    		if (old_line.indexOf("SUB_PROJ") == 0) {
		        subproj_started = true;
		    } else {
    			new_file.WriteLine(old_line);
	    		continue;
		    }
		}
		if (subproj_started) {
            var subproj = old_line.split(" ");
            for (var i = 0; i < subproj.length; i++) {
                all_subproj.push(subproj[i]);
            }
		    subproj_started = (old_line.indexOf("\\") != -1);
		}
		if (subproj_started) {
			new_file.WriteLine(old_line);
			continue;
		}
		for (var idir = 0; idir < all_subdir.length; ++idir) {
		    var found = false;
		    for (var iprj = 0; !found && iprj < all_subproj.length; ++iprj) {
		        if (all_subproj[iprj] == all_subdir[idir]) {
		            found = true;
		        }
		    }
		    if (!found) {
		        old_line += " " + all_subdir[idir];
		    }
		}
		new_file.WriteLine(old_line);
	}
	old_file.Close();
	new_file.Close();
	oFso.DeleteFile(mkfile_old, true);
}

</script>

<script language="JScript">
// Main script line:
var oShell = WScript.CreateObject("WScript.shell");

var oTask  = new Task();
VerifyTask(oTask);
VerboseEcho("========================= Task ========================================");
DumpTask(oTask);

var oTree  = new Tree(oShell, oTask);
VerboseEcho("========================= Tree ========================================");
DumpTree(oTree);

VerboseEcho("========================= CreateTreeStructure =========================");
CreateTreeStructure(oTree, oTask);
VerboseEcho("========================= FillTree ====================================");
FillTree           (oShell, oTree, oTask);
VerboseEcho("========================= AdjustLocalSite =============================");
AdjustLocalSite    (oShell, oTree, oTask);
VerboseEcho("========================= AdjustProject ===============================");
AdjustProject      (oShell, oTree, oTask);
VerboseEcho("========================= CopyDlls ====================================");
CopyDlls           (oShell, oTree, oTask);
VerboseEcho("========================= CopyRes =====================================");
CopyRes            (oShell, oTree, oTask);

VerboseEcho("========================= CopyPtb =====================================");
CopyPtb            (oShell, oTree, oTask);
VerboseEcho("========================= CopyDatatool ================================");
CopyDatatool       (oShell, oTree, oTask);

VerboseEcho("========================= RunPtb ======================================");
RunPtb             (oShell, oTree, oTask);
VerboseEcho("========================= LoadSolution ================================");
LoadSolution       (oShell, oTree, oTask);
VerboseEcho("========================= done ========================================");

</script>
</job>
</package>

