diff -urN fltk-1.1.6.orig/FL/Fl.H fltk-1.1.6/FL/Fl.H
--- fltk-1.1.6.orig/FL/Fl.H	Thu Apr 21 09:31:58 2005
+++ fltk-1.1.6/FL/Fl.H	Thu Apr 21 09:28:39 2005
@@ -261,7 +261,28 @@
   // Widget deletion:
   static void delete_widget(Fl_Widget *w);
   static void do_widget_deletion();
+
+  // patch for focus handling
+public:
+    typedef void (FFocusCallback)(Fl_Widget* new_focus, void* data);
+
+    /// deprecated
+    static void       set_focus_callback(FFocusCallback* callback, void* data);
+    FFocusCallback*   get_focus_callback() const;
+    typedef FFocusCallback TFocusCallback_F;
+
+    static void       focus_callback(FFocusCallback* callback, void* data);
+    FFocusCallback*   focus_callback() const;
+
+private:
+    static TFocusCallback_F*   focus_callback_;
+    static void*    focus_callback_data_;
+  // end of patch for focus handling
 };
+
+// patch for focus handling
+#define NCBI_SET_FOCUS_PATCH
+// end of patch for focus handling
 
 #endif // !Fl_H
 
diff -urN fltk-1.1.6.orig/src/Fl.cxx fltk-1.1.6/src/Fl.cxx
--- fltk-1.1.6.orig/src/Fl.cxx	Thu Apr 21 09:31:59 2005
+++ fltk-1.1.6/src/Fl.cxx	Thu Apr 21 09:28:57 2005
@@ -437,12 +437,46 @@
 
 ////////////////////////////////////////////////////////////////
 
+// patch for focus handling
+Fl::FFocusCallback*   Fl::focus_callback_ = NULL;
+void*   Fl::focus_callback_data_ = NULL;
+
+/// deprecated
+void  Fl::set_focus_callback(FFocusCallback* callback, void* data)
+{
+    focus_callback(callback, data);
+}
+
+void Fl::focus_callback(FFocusCallback* callback, void* data)
+{
+    focus_callback_ = callback;
+    focus_callback_data_ = data; 
+}
+
+Fl::FFocusCallback* Fl::get_focus_callback() const
+{
+    return focus_callback();
+}
+
+Fl::FFocusCallback* Fl::focus_callback() const
+{
+    return focus_callback_;
+}
+// end of patch
+
 Fl_Widget* fl_oldfocus; // kludge for Fl_Group...
 
 void Fl::focus(Fl_Widget *o) {
   if (o && !o->visible_focus()) return;
   if (grab()) return; // don't do anything while grab is on
   Fl_Widget *p = focus_;
+
+  // patch for focus handling
+  if(focus_callback_)  {
+    (*focus_callback_)(o, focus_callback_data_);
+  }
+  // end of patch
+
   if (o != p) {
     Fl::compose_reset();
     focus_ = o;
