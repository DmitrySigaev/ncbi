/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using specifications from the data definition file
 *   'omssa.asn'.
 */

#ifndef OBJECTS_OMSSA_MOD_HPP
#define OBJECTS_OMSSA_MOD_HPP


// generated includes
#include <objects/omssa/MSMod.hpp>
#include <objects/omssa/MSRequest.hpp>

// generated classes

BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::

// the number of mods defined in asn.1 spec
const int kNumMods = 5;

// there are five kinds of mods:
// 1. specific to an AA
// 2. N terminus, not specific to an AA
// 3. N terminus, specific to an AA
// 4. C terminus, not specific to an AA
// 5. C terminus, specific to an AA

const int kNumModType = 5;

enum EMSModType {
    eModAA = 0,
    eModN,
    eModNAA,
    eModC,
    eModCAA
};


/////////////////////////////////////////////////////////////////////////////
//
//  Informational arrays for mods
//
//  These are separate arrays for speed considerations
//


// categorizes existing mods as the types listed above
const EMSModType ModTypes[kNumMods] = {
    eModN,
    eModAA,
    eModNAA,
    eModAA,
    eModAA
};

// the characters to compare
// rows are indexed by mod
// column are the AA's modified (if any)
const char ModChar [3][kNumMods] = {
    {'\x0','\xc','\xc','\x3','\xd' },
    {'\x0','\x0','\x0','\x0','\xf' },
    {'\x0','\x0','\x0','\x0','\x0' }
};

// the number of characters to compare
const int NumModChars[] = { 0, 1, 1, 1, 2 };

const int ModMass[] = { 0, 1600, 0, 5702, 98 };

/////////////////////////////////////////////////////////////////////////////
//
//  CMSMod::
//
//  Given a set of variable mods, sorts them into categories for quick access
//

class CMSMod {
public:
    CMSMod(void) {};
    CMSMod(const CMSRequest::TVariable &Mods);
    // initialize variable mod type array
    void Init(const CMSRequest::TVariable &Mods);
    CMSRequest::TVariable &GetAAMods(EMSModType Type);    
private:
    CMSRequest::TVariable ModLists[kNumModType];
};

///////////////////  CMSMod  inline methods

inline CMSRequest::TVariable & CMSMod::GetAAMods(EMSModType Type) 
{ 
    return ModLists[Type]; 
}


END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


/*
* ===========================================================================
*
* $Log$
* Revision 1.1  2004/03/01 18:24:07  lewisg
* better mod handling
*
*
* ===========================================================================
*/

#endif // OBJECTS_OMSSA_MSMOD_HPP
/* Original file checksum: lines: 63, chars: 1907, CRC32: 6c23d0ae */
