/*  $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author: Christiam Camacho
 *
 */

/** @file makeblastdb.cpp
 * Command line tool to create BLAST databases. This is the successor to
 * formatdb from the C toolkit
 */

#ifndef SKIP_DOXYGEN_PROCESSING
static char const rcsid[] = 
    "$Id$";
#endif /* SKIP_DOXYGEN_PROCESSING */

#include <ncbi_pch.hpp>
#include <corelib/ncbiapp.hpp>
#include <algo/blast/api/version.hpp>
#include <objtools/writers/writedb/writedb.hpp>
#include <objtools/writers/writedb/writedb_error.hpp>
//#include <objtools/seqmasks_io/mask_cmdline_args.hpp>

#ifndef SKIP_DOXYGEN_PROCESSING
USING_NCBI_SCOPE;
USING_SCOPE(blast);
#endif

class CMakeBlastDBApp : public CNcbiApplication
{
public:
    CMakeBlastDBApp() {
        SetVersion(blast::Version);
    }
private:
    virtual void Init();
    virtual int Run();
    
};

void CMakeBlastDBApp::Init()
{
    HideStdArgs(fHideConffile | fHideDryRun);

    auto_ptr<CArgDescriptions> arg_desc(new CArgDescriptions);

    // Specify USAGE context
    arg_desc->SetUsageContext(GetArguments().GetProgramBasename(), 
                  "Application to create BLAST databases, version " 
                  + blast::Version.Print());

    const string kInput("in");
    const string kOutput("out");
    string dflt("Default = input file name provided to -");
    dflt += kInput + " argument";

    arg_desc->SetCurrentGroup("Input options");
    arg_desc->AddDefaultKey(kInput, "input_file", 
                            "Input file name containing the following, "
                            "automatically detected input types:\n"
                            "\tFASTA\n"
                            "\tSeq-entry in ASN.1 (text or binary)\n"
                            "\tSeq-entry in XML\n",
                            CArgDescriptions::eInputFile, "-");
    arg_desc->AddDefaultKey("dbtype", "molecule_type",
                            "Molecule type of input",
                            CArgDescriptions::eString, "prot");
    arg_desc->SetConstraint("dbtype", &(*new CArgAllow_Strings,
                                        "nucl", "prot"));

    arg_desc->SetCurrentGroup("Sequence masking options");
    arg_desc->AddOptionalKey("masks", "input_file",
                             "Input file containing masks generated by NCBI "
                             "masking applications (e.g.: dustmasker, "
                             "segmasker, winmasker)",
                             CArgDescriptions::eInputFile);
    arg_desc->AddOptionalKey("algorithm_name", "name",
                             "Name of the filtering algorithm used to create "
                             "masks",
                             CArgDescriptions::eString);
    arg_desc->AddOptionalKey("algorithm_options", "string",
                             "Options provided to the filtering algorithm used "
                             "to create masks",
                             CArgDescriptions::eString);

    arg_desc->SetCurrentGroup("Configuration options");
    arg_desc->AddOptionalKey("title", "database_title",
                             "Title for BLAST database\n" + dflt,
                             CArgDescriptions::eString);
    arg_desc->AddFlag("parse_seqids", "Parse the sequence identifiers", true);
    // FIXME: should this be renamed?
    arg_desc->AddFlag("verbose", 
                      "Check for non-unique string ids in the database", true);

    arg_desc->SetCurrentGroup("Output options");
    arg_desc->AddOptionalKey(kOutput, "database_name",
                             "Name of BLAST database to be created\n" + dflt,
                             CArgDescriptions::eString);
    // FIXME: make CWriteDB_File::x_DefaultByteLimit into a public constant in
    // CWriteDB
    const Uint8 kDfltByteLimit = 1000*1000*1000 - 1;
    arg_desc->AddDefaultKey("max_file_sz", "number_of_bytes",
                        "Maximum file size for BLAST database files in bytes",
                        CArgDescriptions::eInteger, 
                        NStr::UInt8ToString(kDfltByteLimit));
    SetupArgDescriptions(arg_desc.release());
}

int CMakeBlastDBApp::Run(void)
{
    int status = 0;

    try {

        throw runtime_error("Implement me!");

    } catch (const CException& exptn) {
        cerr << exptn.what() << endl;
        status = exptn.GetErrCode();
    } catch (const exception& e) {
        cerr << e.what() << endl;
        status = -1;
    } catch (...) {
        cerr << "Unknown exception" << endl;
        status = -1;
    }
    return status;
}


#ifndef SKIP_DOXYGEN_PROCESSING
int main(int argc, const char* argv[] /*, const char* envp[]*/)
{
    return CMakeBlastDBApp().AppMain(argc, argv, 0, eDS_Default, 0);
}
#endif /* SKIP_DOXYGEN_PROCESSING */
