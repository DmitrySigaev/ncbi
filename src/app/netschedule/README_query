README for query.

There are two basic ways to query NetSchedule jobs: QERY command, which can
count, select, drop, cancel, reschedule jobs which satisfy its WHERE-like
condition (drop, cancel, and reschedule are not implemented yet), and QSEL
which has SELECT-like syntax (with some limitations and implementation details
showing through).

General syntax.
netschedule_control -query "WHERE part" -fields "SELECT part" -queue q_name -service service_name
e.g.
netschedule_control -query "status=Done and scaffold=S123" -fields "id,tag.transcript" -queue sample \
  -service coredev1:9101
where scaffold in WHERE part and trascript in SELECT part are examples of tag usage.

WHERE part. Can contain only fields which have indices built on. These fields and possible values are:
status = Status, Status can be one of Pending, Running, Done,
    Failed, Reading, Confirmed, ReadFailed
id = JobId
tag_name = value

There are following fields which can participate in SELECT part:

id           - job id in encoded form
status       - job status in verbose form
time_submit  - time of job submission
timeout      - lifetime of the job since last change
run_timeout  - time, allocated for the job run for this queue
subm_addr    - host, the job was submitted from
subm_port    - port
subm_timeout - run timeout, allocated at submit time. defaults to run_timeout
run_count    - number of runs since last reschedule
affinity     - affinity token
mask         - exclusivity mask
runs         - number of actual run attempts, including returns !!! bad name
input        -
output       -
progress_msg

Tags. Tag keys can be mentioned in SELECT part prefixed with "tag.", e.g. if
you have tag "scaffold" you can ask for its value by including "tag.scaffold"
in the query. If there is no such tag for the record, it is excluded from
result set even if it satisfied WHERE clause conditions. (should it be so?)

There are run related fields you can ask for in SELECT part. If you do not mention
'run' field, you get the information about last run. If you do mention 'run', every
record is multiplied the number of times it ran, and run information for every run is
recorded in corresponding record.
Run related fields:

run         - run number
run_status  - end status of the run
time_start  - start time of the run
time_done   - end time of the run
node_id     - the node id of the node executed the run
node_addr   - its IP address (name)
node_port   - its control port
ret_code    - Unix return code of the run
err_msg     - error message of the run


Fields, which are in DB, but not accessible:
input_overflow
output_overflow

What does not work now:
Everything seems to be working!

Examples of queries.

QERY "status in (Pending, Running, Failed)" SLCT "id,input,subm_addr"
which is translated into netschedule_control syntax as following
netschedule_control -query "status in (Pending, Running, Failed)" -fields "id,input,subm_addr" \
                    -service coredev1:9101 -queue sample