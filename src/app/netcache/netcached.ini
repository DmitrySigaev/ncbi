[server]

; Port numbers server responds to clients on.
;ports = 9000, 9001

; Control port for communication between servers and administrative commands
;control_port = 9010

; Logging of starting and ending points of every request (request-start and
; request-stop entries in the log).
;log_requests = yes

; Name of client to be used for execution of all administrative commands (like
; database re-initialization, server re-configuration, shutdown etc).
; If an attempt will be made to execute these commands with any other client
; name an error will be the result.
;admin_client_name = netcache_control

; Whether to force server to always use poll or to choose between select and
; poll dynamically.
;force_use_poll = yes

; maximum number of open connections to the server
;max_connections=100

; Maximum number of worker threads in the server.
;max_threads = 20

; Turn on special debugging mode of NetCache. Never turn it on in production.
;debug_mode = false

; Maximum amount of the memory NetCache uses for all its data.
; At least half of this amount NetCache will use for database cache. If the
; number given is too low for all data NetCache will use as much as necessary
; but least possible ensuring that at least half of this figure is used for
; database cache at all times.
; NB: Memory counted towards this limit doesn't include thread stacks memory
; (8 Mb per thread with default Linux settings), size of executable and probably
; other types of memory not allocated directly inside application.
;memory_limit=1Gb

; Amount of memory considered to be dangerous.
; There's a possibility that memory consumption in NetCache will raise
; significantly if it's under very heavy load. It's almost impossible to reach
; such state and this state is allowed as a trade-off for writing speed. But
; if memory consumption will raise above this alert level NetCache will start
; to work slower releasing some of allocated memory. So this alert level is
; almost a hard memory limit
; NB: Memory counted towards this limit doesn't include thread stacks memory
; (8 Mb per thread with default Linux settings), size of executable and probably
; other types of memory not allocated directly inside application.
; NB: This value should be at least twice as big as memory_limit.
;memory_alert=4Gb

; Priority of client's parameters involved in determining their specific
; settings. Priority is from most specific one to most general. So the following
; value will devide all clients first by the port they are connected to and then
; by cache name they have provided in the command (for the case of ICache).
;app_setup_priority = cache, port

; The following values are default settings for all clients and can be overridden
; for specific clients later. Description of all parameters is given only in this
; section.

; Disable the client completely, do not allow him to execute any command.
;disable_client = false

; Maximum execution time for each command in seconds
;cmd_timeout = 600

; Network inactivity timeout in seconds
;network_timeout = 10

; Default blob expiration timeout in seconds
;blob_ttl = 3600

; Default expiration timeout for blob's version (works only for ICache)
;ver_ttl = 3600

; Granularity of expiration time measuring. Any change in that time less than
; this value won't be recorded. Bigger values can save some writes to database
; and thus some disk activity and performance.
;ttl_unit = 300

; Update blob's time stamp on every read and calculate its expiration time
; from the last read.
;prolong_on_read = true

; Try to find blob on other servers if it's not found locally
;search_on_read = true

; Number of servers required to process the command before it's reported to
; client as successfully finished. 0 means all available servers should process
; the command.
;quorum = 1

; Policy of using passwords for accessing blobs in NetCache. Possible values:
;   no_password - only commands without passwords are accepted
;   with_password - only commands with password are accepted
;   any - any type of command can be sent, either with password or without it
;blob_password_policy=any



; The following is an example of client-by-client specific parameters. Each
; clients group should be described by section with name starting with
; 'app_setup_'. This section should contain client's parameters that identify
; the group and section name that contains specific parameters. Meaning of all
; specific parameters is described in the "server" section.

;[app_setup_1h]
; Parameters identifying clients.
;port = 9000
; Name of the section with specific parameters.
;setup = app_group_1h

;[app_setup_24h]
;port = 9001
;setup = app_group_24h

;[app_setup_blobs]
;port = 9002
;cache = blobs
;setup = app_group_objcache

;[app_setup_ids]
;port = 9002
;cache = ids
;setup = app_group_ids

;[app_setup_bad_cache]
;port = 9001
;cache = foo
;setup = app_group_bad


;[app_group_1h]
;blob_ttl = 3600
;prolong_on_read = true

;[app_group_24h]
;blob_ttl = 184000
;ttl_unit = 3600

;[app_group_objcache]
;blob_ttl = 184000
;ver_ttl = 3600
;prolong_on_read = true

;[app_group_ids]
;blob_ttl = 3600
;prolong_on_read = false

;[app_group_bad]
;disable_client = true



[storage]
; Directory to keep the database.
;path = ./cache

; Prefix for all files in the database
;prefix = nccache

; Size of each file in the storage
;each_file_size = 100Mb

; Maximum percentage of garbage allowed. When amount of garbage exceeds this
; value NetCache will try to compact the storage.
;max_garbage_pct = 50

; Minimum size of storage when compaction makes sense. If total size of storage
; is less than this value NetCache won't compact it no matter how much garbage
; it has.
;min_storage_size = 1Gb

; Maximum time in seconds that is worth waiting for an extremely slow I/O
; operation.
;max_io_wait_time = 10

; Garbage collector processes blobs in groups of specified amount.
;gc_batch_size = 500

; Periods of syncing all written data to disk (in seconds). 0 means do not
; perform any syncs at all - kernel will flush data to disk at its own
; convenience.
;sync_time_period = 0

; Limit for database size when garbage collector starts/stops deletion of oldest
; blobs even though they are not yet expired. Value of 0 for db_limit_del_old_on
; means that this feature shouldn't be activated.
;db_limit_del_old_on = 0
;db_limit_del_old_off = 0

; Limit for database size when NetCache stops/starts accepting any new blobs
; from client (even it's just re-writing of the old blob). Value of 0 for
; db_limit_stop_write_on means that this feature shouldn't be activated.
;db_limit_stop_write_on = 0
;db_limit_stop_write_off = 0

; Limit in free disk space when NetCache stops/starts accepting any new blobs
; from client.
;disk_free_limit = 5Gb

; Minimum time that should pass between two consecutive saves of current record
; number in synchronization log.
;min_rec_no_save_period = 30


[mirror]
; Set of servers participating in the mirroring and replication.
; All servers are in the format <group>:<server name>:<control port>.
; Contents of group name doesn't matter - its string value is considered as group
; identification. When each server needs to proxy some client requests it will
; direct them to members of their own group first.
;server_0 = be:nctest11.be-md:9120
;server_1 = be:nctest21.be-md:9120
;server_2 = st:nctest31.st-va:9120
;server_3 = st:nctest32.st-va:9120
;server_4 = be:nctest11.be-md:9121
;server_5 = be:nctest21.be-md:9121
;server_6 = st:nctest31.st-va:9121
;server_7 = st:nctest32.st-va:9121
; Set of slot numbers served by each server participating in the mirroring
;srv_slots_0 = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
;srv_slots_1 = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
;srv_slots_2 = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
;srv_slots_3 = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
;srv_slots_4 = 26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50
;srv_slots_5 = 26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50
;srv_slots_6 = 26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50
;srv_slots_7 = 26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50

; File names to output some statistical information useful for building some graphs
; about NetCache's performance
;mirroring_log_file = ./mirroring.log
;periodic_log_file = ./periodic.log
;copy_delay_log_file = ./copy_delay.log

; Filename to store event logs on server shutdown for future synchronization with other
; servers. It's better to be in the same directory as database
;sync_log_file = ./cache/sync_events.log

; Maximum number of records to store in event logs for each slot
;max_slot_log_records = 100000

; Number of records to leave as a reserve below limit when cleaning happens because number
; of records hit the limit
;clean_slot_log_reserve = 1000

; Maximum number of records in the event log to clean in one cleaning transaction
;max_clean_log_batch = 10000

; Minimum time period that should pass between two consecutive forced cleanings (when all
; synchronizations on the slot are aborted to allow cleaning to proceed).
;min_forced_clean_log_period = 10

; Time interval between attempts to clean event log
;clean_log_attempt_interval = 1

; Time interval between periodic synchronizations
;deferred_sync_interval = 10

; Interval in events log below last sync time to add to periodic sync
;deferred_sync_tail_time = 10

; Timeout of inactivity in periodic sync when server can be considered out of service
;deferred_sync_timeout = 10

; Time interval between periodic sync retries when sync fails for some reason
;failed_sync_retry_delay = 1

; Time interval during which network errors should occur with some server to consider
; that server out of service and not requiring initial synchronization.
;network_error_timeout = 300

; Blobs that are larger than this size (in KB) are considered "large".
; These blobs are mirrored at a lesser priority than smaller blobs,
; see 'small_blob_threads_pct' above.
;small_blob_max_size = 100

; Maximum number of active deferred synchronization transactions to hold. More
; synchronization transactions still can be supported in the passive mode
; (i.e. initiated by other servers).
;max_active_syncs = 4

; Maximum allowed number of active deferred synchronization transactions with the same
; peer. This parameter is important when some server with completely wiped out
; database is launched. If this parameter is not low enough then all servers start
; all their active syncs with the new peer and nobody performs sync with each other.
;max_syncs_one_server = 2

; Maximum time percentage that can be spent for deferred synchronization as opposed
; to all other tasks. This number is good to be low to avoid slowing down response
; to clients when some server is restoring full database from scratch.
; Number interpretation is very implementation specific and should be thought of
; only relatively.
;max_deferred_time_pct = 10

; Maximum number of connections to each peer NetCache
;max_peer_connections = 100

; Maximum number of connections to each peer which can execute background tasks
; (instant or deferred synchronization).
;max_peer_bg_connections = 50

; Number of consecutive network errors to happen before the peer NetCache will be
; throttled (no physical attempts to connect to it will be made).
;peer_errors_for_throttle = 10

; Time in seconds to not attempt any physical connections to peer.
;peer_throttle_period = 10

; Timeout in seconds for connection to peer
;peer_connection_timeout = 0.1

; Timeout in seconds for network communication with peer
;peer_communication_timeout = 10

; Maximum amount of events pending to each peer for instant synchronization. Any events
; above this limit will be immediately discarded.
;max_instant_queue_size = 10000
