/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */ 
/// This file was generated by application DATATOOL
///
/// ATTENTION:
///   Don't edit or commit this file into SVN as this file will
///   be overridden (by DATATOOL) without warning!

#include <ncbi_pch.hpp>
#include <objects/seqfeat/SeqFeatData.hpp>
#include <objects/seqfeat/Seq_feat.hpp>
#include <objects/misc/sequence_macros.hpp>
#include <misc/discrepancy_report/hauto_disc_class.hpp>

BEGIN_NCBI_SCOPE
USING_NCBI_SCOPE;
USING_SCOPE(objects);
USING_SCOPE(DiscRepAutoNmSpc);

void CAutoDiscClass::x_LookAtSeqEntry_seq_seq( CBioseq & arg0 )
{ // type Sequence
  m_NewSeqEntry.CheckBioseq( arg0 );
} // end of x_LookAtSeqEntry_seq_seq

void CAutoDiscClass::x_LookAtSeqEntry_seq( CBioseq & arg0 )
{ // type Reference
    x_LookAtSeqEntry_seq_seq( arg0 );
} // end of x_LookAtSeqEntry_seq

void CAutoDiscClass::x_LookAtSeqEntry_set_set_seq_set_E( CSeq_entry & arg0 )
{ // type Reference
    LookAtSeqEntry( arg0 );
} // end of x_LookAtSeqEntry_set_set_seq_set_E

template< typename Tcontainer_ncbi_cref_cseq_entry_ >
void CAutoDiscClass::x_LookAtSeqEntry_set_set_seq_set( Tcontainer_ncbi_cref_cseq_entry_ & arg0 )
{ // type UniSequence
  NON_CONST_ITERATE( typename Tcontainer_ncbi_cref_cseq_entry_, iter, arg0 ) { 
    x_LookAtSeqEntry_set_set_seq_set_E( **iter );
  }
} // end of x_LookAtSeqEntry_set_set_seq_set

void CAutoDiscClass::x_LookAtSeqEntry_set_set( CBioseq_set & arg0 )
{ // type Sequence
  m_NewSeqEntry.CheckBioseqSet( arg0 );
  if( arg0.IsSetSeq_set() ) {
    x_LookAtSeqEntry_set_set_seq_set( arg0.SetSeq_set() );
  }
} // end of x_LookAtSeqEntry_set_set

void CAutoDiscClass::x_LookAtSeqEntry_set( CBioseq_set & arg0 )
{ // type Reference
    x_LookAtSeqEntry_set_set( arg0 );
} // end of x_LookAtSeqEntry_set

void CAutoDiscClass::LookAtSeqEntry( CSeq_entry & arg0 )
{ // type Choice
  switch( arg0.Which() ) {
  case CSeq_entry::e_Seq:
    x_LookAtSeqEntry_seq( arg0.SetSeq() );
    break;
  case CSeq_entry::e_Set:
    x_LookAtSeqEntry_set( arg0.SetSet() );
    break;
  default:
    break;
  }
} // end of LookAtSeqEntry


END_NCBI_SCOPE
