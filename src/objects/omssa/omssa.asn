-- $Id: omssa.asn,v 1.9 2004/06/21 21:19:49 lewisg Exp $
--**********************************************************************
--
--  OMSSA (Open Mass Spectrometry Search Algorithm) data definitions
--  Lewis Geer, 2003
--
--  make using something like
--  "datatool -m omssa.asn -oc ObjOmssa -oA -od omssa.def"
--
--  note that this file requires omssa.def
--
--**********************************************************************

OMMSA DEFINITIONS ::=
BEGIN


-- Holds a single spectrum

MSSpectrum ::= SEQUENCE {
	charge SEQUENCE OF INTEGER,  -- may be more than one if unknown
	precursormz INTEGER,  -- scaled Da
	mz SEQUENCE OF INTEGER,  -- scaled Da
	abundance SEQUENCE OF INTEGER,  -- scaled
	ids SEQUENCE OF VisibleString OPTIONAL, -- unique name of spectrum
	number INTEGER -- unique number of spectrum
	}


-- Holds a set of spectra

MSSpectrumset ::= SEQUENCE OF MSSpectrum


-- enumerate enzymes

MSEnzymes ::= INTEGER {
	trypsin (0),
	argc (1),
	aspn (2),
	chymotrypsin (3),
	formicacid (4),
	lysc (5),
	lyscp (6),
	pepsina (7),
	tryp-cnbr (8),
	trychymo (9),
	trypsinp (10),
	v8de (11),
	v8e (12),
	none (255)
	}


-- enumerate modifications

MSMod ::= INTEGER {
    kmethyl (0),          -- methylation of K
    moxy (1),             -- oxidation of methionine
    ccarboxymethyl (2),   -- carboxymethyl cysteine
    ccarbamidomethyl(3),  -- carbamidomethyl cysteine
    kqdeamidation (4),    -- deamidation of K and Q
    cpropionamide (5),    -- propionamide cysteine
    sphosphorylation (6), -- phosphorylation of S
    tphosphorylation (7), -- phosphorylation of T
    yphosphorylation (8), -- phosphorylation of Y    
    ntermmcleave (9),     -- N terminal methionine cleavage
    ntermacetyl (10),     -- N terminal acetyl
    ntermmethyl (11),     -- N terminal methyl
    ntermtrimethyl (12),  -- N terminal trimethyl
    dmethythiol (13),     -- beta methythiolation of D
    qmethyl (14),         -- methylation of Q
    ktrimethyl (15),      -- trimethylation of K
    none(255)
    }


-- How is charge to be handled?  Some input files are not clear
-- on this.  For example, a dta file only specifies one charge, 
-- even though the charge is not really known.

MSChargeHandle ::= INTEGER {
	calculate (0),  -- guess the charge(s) from the data
	usefile (1)     -- use what the input file says
	}

-- Search type
MSSearchType ::= INTEGER {
	monoisotopic(0),
	average(1)
	}


MSSearchSettings ::= SEQUENCE {
	searchtype MSSearchType,  -- average or monoisotopic?
	peptol REAL,  -- peptide mass tolerance
	msmstol REAL, -- msms mass tolerance
          -- next 3 fields define intensity fraction below
          -- which peaks will be discard
        cutlo REAL, -- the start of the cutoff, fraction of most intense peak
        cuthi REAL, -- the end of the cutoff
        cutinc REAL, -- the increment of the cutoff
        singlewin INTEGER,  -- the size of the single charge filtering window
        doublewin INTEGER,  -- the size of the double charge filtering window
	singlenum INTEGER,  -- the number of peaks allowed in the single window
        doublenum INTEGER,  -- the number of peaks allowed in the double window
	fixed SEQUENCE OF MSMod,
	variable SEQUENCE OF MSMod,
	enzyme MSEnzymes,
	missedcleave INTEGER, 
	hitlistlen INTEGER DEFAULT 25,  -- the number of hits kept in memory
	                                -- for a spectrum
	db VisibleString,  -- sequence set to search, e.g. "nr"
        tophitnum INTEGER, -- number of m/z to consider in first pass
        minhit INTEGER DEFAULT 2, -- minimum number of m/z values for a valid hit
        minspectra INTEGER DEFAULT 4, -- minimum number of m/z for a valid spectra
        scale INTEGER DEFAULT 100,  -- scale for m/z float to integer
	taxids SEQUENCE OF INTEGER OPTIONAL,  -- taxa to limit search
	chargehandling MSChargeHandle OPTIONAL  -- how to deal with charges
}


-- The search request that is given to the OMSSA algorithm

MSRequest ::= SEQUENCE {
	spectra MSSpectrumset,
        settings MSSearchSettings,
	rid VisibleString OPTIONAL  -- request id
	}


-- enumeration of ion types

MSIonType ::= INTEGER {
	a (0),
	b (1),
        c (2),
	x (3),
	y (4),
	z (5)
	}
	

-- defines a particular ion

MSMZHit ::= SEQUENCE {
	ion MSIonType,
	charge INTEGER,
	number INTEGER,
	mz INTEGER  -- scaled m/z value in Da
}


-- contains information about sequences with identical peptide
-- sequences

MSPepHit ::= SEQUENCE {
	start INTEGER,       -- start position (inclusive) in sequence
	stop INTEGER,        -- stop position (inclusive) in sequence
	gi INTEGER OPTIONAL, -- genbank identifier
	accession VisibleString OPTIONAL,
	defline VisibleString OPTIONAL
}	

-- hits to a given spectrum

MSHits ::= SEQUENCE {
	evalue REAL,     -- expected number of random hits from database
	pvalue REAL,
	charge INTEGER,  -- the charge state used in search.  -1 == not +1
	pephits SEQUENCE OF MSPepHit,
	mzhits SEQUENCE OF MSMZHit OPTIONAL,
	pepstring VisibleString OPTIONAL,  -- the peptide sequence
        mass INTEGER OPTIONAL  -- scaled mass of peptide in Da
	}


-- error return for a particular spectrum's hitset

MSHitError ::= INTEGER {
	none (0),
	generalerr (1),
	unable2read (2),
	notenuffpeaks (3)
	}


-- contains a set of hits to a single spectrum

MSHitSet ::= SEQUENCE {
    number INTEGER, -- unique number of spectrum
    error MSHitError OPTIONAL,
    hits SEQUENCE OF MSHits OPTIONAL,
    ids SEQUENCE OF VisibleString OPTIONAL -- filenames or other ids of spectra searched
	}


-- error return for the entire response

MSResponseError ::= INTEGER {
	none (0),
	generalerr (1),
	noblastdb (2),
	noinput (3)
	}


-- search results

MSResponse ::= SEQUENCE {
	hitsets SEQUENCE OF MSHitSet,
        scale INTEGER DEFAULT 100,  -- scale to change m/z float to integer
	rid VisibleString OPTIONAL,  -- request id
	error MSResponseError OPTIONAL,
        version VisibleString OPTIONAL  -- version of OMSSA
	}	
	
END
