/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using specifications from the ASN data definition file
 *   'seqloc.asn'.
 */

// standard includes

// generated includes
#include <ncbi_pch.hpp>
#include <objects/seqloc/Packed_seqint.hpp>
#include <objects/seqloc/Seq_id.hpp>
#include <objects/seqloc/Seq_interval.hpp>
#include <corelib/ncbiutil.hpp>

// generated classes

BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::

// constructor
CPacked_seqint::CPacked_seqint(TId& id, const TRanges& ivals, TStrand strand)
{
    ITERATE(TRanges, ival, ivals) {
        AddInterval(id, ival->GetFrom(), ival->GetTo(), strand);
    }
}


// destructor
CPacked_seqint::~CPacked_seqint(void)
{
}

// length calculator
TSeqPos CPacked_seqint::GetLength(void) const
{
    TSeqPos length = 0;
    ITERATE ( Tdata, i, Get() ) {
            length += (**i).GetLength();
    }
    return length;
}


bool CPacked_seqint::IsPartialLeft (void) const

{
    if ( !Get().empty() ) {
        return Get ().front ()->IsPartialLeft ();
    }
    return false;
}

bool CPacked_seqint::IsPartialRight (void) const

{
    if ( !Get().empty() ) {
        return Get ().back ()->IsPartialRight ();
    }
    return false;
}


void CPacked_seqint::SetPartialLeft (bool val)
{
    if ( !Set().empty() ) {
        Set().front()->SetPartialLeft(val);
    }
    _ASSERT(val == IsPartialLeft());
}


void CPacked_seqint::SetPartialRight(bool val)
{
    if ( !Set().empty() ) {
        Set().back()->SetPartialRight(val);
    }
    _ASSERT(val == IsPartialRight());
}


bool CPacked_seqint::IsReverseStrand(void) const
{
    bool rev = Get().front()->IsSetStrand()
        &&  IsReverse(Get().front()->GetStrand());
    ITERATE(Tdata, i, Get()) {
        if ( (*i)->IsSetStrand() ) {
            if ( rev != IsReverse((*i)->GetStrand()) ) {
                return false;
            }
        }
        if ( rev ) {
            return false; // at least one strand is not set (not reverse)
        }
    }
    return rev;
}


TSeqPos CPacked_seqint::GetStart(TSeqPos /*circular_length*/) const
{
    if ( IsReverseStrand() ) {
        return Get().back()->GetFrom();
    }
    return Get().front()->GetFrom();
}


TSeqPos CPacked_seqint::GetEnd(TSeqPos /*circular_length*/) const
{
    if ( IsReverseStrand() ) {
        return Get().front()->GetTo();
    }
    return Get().back()->GetTo();
}


void CPacked_seqint::AddInterval(const CSeq_interval& ival)
{
    CRef<CSeq_interval> new_ival(new CSeq_interval);
    new_ival->Assign(ival);
    Set().push_back(new_ival);
}


void CPacked_seqint::AddInterval(const CSeq_id& id, TSeqPos from, TSeqPos to,
                                 ENa_strand strand)
{
    CSeq_interval ival;
    ival.SetFrom(from);
    ival.SetTo(to);
    ival.SetId().Assign(id);
    if (strand != eNa_strand_unknown) {
        ival.SetStrand(strand);
    }
    AddInterval(ival);
}


void CPacked_seqint::AddIntervals(const CPacked_seqint& ivals)
{
    AddIntervals(ivals.Get());
}


void CPacked_seqint::AddIntervals(const Tdata& ivals)
{
    copy(ivals.begin(), ivals.end(), back_inserter(Set()));
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

/*
 * ===========================================================================
 *
 * $Log$
 * Revision 6.9  2004/10/22 16:01:20  kans
 * protect IsPartialXXX with Get empty test
 *
 * Revision 6.8  2004/10/22 15:12:28  kans
 * implemented functions for getting and setting partial flags for packed int and packed point
 *
 * Revision 6.7  2004/09/01 15:33:44  grichenk
 * Check strand in GetStart and GetEnd. Circular length argument
 * made optional.
 *
 * Revision 6.6  2004/05/19 17:26:25  gorelenk
 * Added include of PCH - ncbi_pch.hpp
 *
 * Revision 6.5  2004/01/28 17:18:01  shomrat
 * Added methods to ease the construction of objects
 *
 * Revision 6.4  2003/08/11 14:39:13  ucko
 * +AddInterval; CVS log to end
 *
 * Revision 6.3  2003/03/11 15:55:44  kuznets
 * iterate -> ITERATE
 *
 * Revision 6.2  2002/05/03 21:28:17  ucko
 * Introduce T(Signed)SeqPos.
 *
 * Revision 6.1  2000/11/17 21:35:09  vasilche
 * Added GetLength() method to CSeq_loc class.
 *
 * ===========================================================================
 */
