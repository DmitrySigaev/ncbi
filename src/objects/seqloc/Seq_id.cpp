/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using specifications from the ASN data definition file
 *   'seqloc.asn'.
 *
 * ---------------------------------------------------------------------------
 * $Log$
 * Revision 6.6  2000/12/08 20:45:14  ostell
 * added MakeFastaString()
 *
 * Revision 6.5  2000/12/04 15:09:41  vasilche
 * Added missing include.
 *
 * Revision 6.4  2000/11/30 22:08:18  ostell
 * finished Match()
 *
 * Revision 6.3  2000/11/30 16:13:12  ostell
 * added support for Textseq_id to Seq_id.Match()
 *
 * Revision 6.2  2000/11/28 12:47:41  ostell
 * fixed first switch statement to break properly
 *
 * Revision 6.1  2000/11/21 18:58:29  vasilche
 * Added Match() methods for CSeq_id, CObject_id and CDbtag.
 *
 *
 * ===========================================================================
 */

// standard includes

// generated includes
#include <objects/seqloc/Seq_id.hpp>
#include <objects/general/Object_id.hpp>
#include <objects/general/Dbtag.hpp>
#include <objects/seqloc/Giimport_id.hpp>
#include <objects/seqloc/PDB_seq_id.hpp>
#include <objects/seqloc/Textseq_id.hpp>
#include <objects/seqloc/Patent_seq_id.hpp>

// generated classes

BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::

// destructor
CSeq_id::~CSeq_id(void)
{
}

// Compare() - are SeqIds equivalent?
CSeq_id::E_SIC CSeq_id::Compare(const CSeq_id& sid2) const
{
	E_Choice type1 = Which();
	E_Choice type2 = sid2.Which();
	const CTextseq_id *tsip1 = 0, *tsip2 = 0;

	if (type1 != type2)  // only one case where this will work
	{
		switch (type1)
		{
			case e_Genbank:
			case e_Embl:
			case e_Ddbj:
			{
				switch (type2)
				{
					case e_Genbank:
					case e_Embl:
					case e_Ddbj:
						break;  // ok
					default:
						return e_DIFF;
				}
				break;  // goto next switch
			}
			default:
				return e_DIFF;
		}
		// now do the match
		switch (type1)
		{
                        case e_Genbank:
				tsip1 = &GetGenbank();
				break;
                        case e_Embl:
				tsip1 = &GetEmbl();
				break;
                        case e_Ddbj:
				tsip1 = &GetDdbj();
				break;
		}
                switch (type2)
                {
                        case e_Genbank:
                                tsip2 = &(sid2.GetGenbank());
                                break;
                        case e_Embl:
                                tsip2 = &(sid2.GetEmbl());
                                break;
                        case e_Ddbj:
                                tsip2 = &(sid2.GetDdbj());
                                break;
                }

		if ((tsip1 != 0) && (tsip2 != 0))
		{
			if (tsip1->Match(*tsip2))
				return e_YES;
			else
				return e_NO;
		}
		return e_DIFF;
	}

	switch (type1)    // now we only need to know one
	{
        case e_Local:
	{
		if ((GetLocal()).Match(sid2.GetLocal()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Gibbsq:
	{
		if ((GetGibbsq()) == (sid2.GetGibbsq()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Gibbmt:
	{
		if ((GetGibbmt()) == (sid2.GetGibbmt()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Giim:
	{
		if ((GetGiim().GetId()) == (sid2.GetGiim().GetId()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Pir:
	{
		if (GetPir().Match(sid2.GetPir()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Swissprot:
	{
		if (GetSwissprot().Match(sid2.GetSwissprot()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Patent:
	{
		if (GetPatent().Match(sid2.GetPatent()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Other:
	{
		if (GetOther().Match(sid2.GetOther()))
			return e_YES;
		else
			return e_NO;
	}
        case e_General:
	{
		if (GetGeneral().Match(sid2.GetGeneral()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Gi:
	{
		if ((GetGi()) == (sid2.GetGi()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Prf:
	{
		if (GetPrf().Match(sid2.GetPrf()))
			return e_YES;
		else
			return e_NO;
	}
        case e_Pdb:
	{
		if (GetPdb().Match(sid2.GetPdb()))
			return e_YES;
		else
			return e_NO;
	}
        case e_not_set:
        default:
		break;
	}
	return e_error;  // should never get here 
}
        static char * txtid [16] = {              /* FASTA_LONG formats */
                "???" ,         /* not-set = ??? */
                "lcl",          /* local = lcl|integer or string */
                "bbs",     /* gibbsq = bbs|integer */
                "bbm",          /* gibbmt = bbm|integer */
                "gim",          /* giim = gim|integer */
                "gb",           /* genbank = gb|accession|locus */
                "emb",          /* embl = emb|accession|locus */
                "pir",          /* pir = pir|accession|name */
                "sp",           /* swissprot = sp|accession|name */
                "pat",          /* patent = pat|country|patent number (string)|seq number (integer) */
                "ref",          /* other = ref|accession|name|release - changed from oth to ref */
                "gnl",          /* general = gnl|database(string)|id (string or number) */
                "gi",           /* gi = gi|integer */
                "dbj",          /* ddbj = dbj|accession|locus */
                "prf",          /* prf = prf|accession|name */
                "pdb" };        /* pdb = pdb|entry name (string)|chain id (char) */

void CSeq_id::MakeFastaString(string& s) const
{
	E_Choice the_type = Which();
	if (the_type > e_Pdb)  // new SeqId type
		the_type = e_not_set;

	s += txtid[the_type];
	s += '|';

	switch (the_type)
	{
           case e_not_set:
		break;
           case e_Local:
		GetLocal().MakeString(s);
		break;
           case e_Gibbsq:
		s += NStr::IntToString(GetGibbsq());
		break;
           case e_Gibbmt:
		s += NStr::IntToString(GetGibbsq());
		break;
           case e_Giim:
		s += NStr::IntToString(GetGiim().GetId());
		break;
           case e_Genbank:
		GetGenbank().MakeFastaString(s);
		break;
           case e_Embl:
		GetEmbl().MakeFastaString(s);
		break;
           case e_Pir:
		GetPir().MakeFastaString(s);
		break;
           case e_Swissprot:
		GetSwissprot().MakeFastaString(s);
		break;
           case e_Patent:
		GetPatent().MakeFastaString(s);
		break;
           case e_Other:
		GetOther().MakeFastaString(s);
		break;
           case e_General:
		{
		const CDbtag& dbt = GetGeneral();
		s += dbt.GetDb();
		s += '|';
		dbt.GetTag().MakeString(s);
		}
		break;
           case e_Gi:
		s += NStr::IntToString(GetGibbsq());
		break;
           case e_Ddbj:
		GetDdbj().MakeFastaString(s);
		break;
           case e_Prf:
		GetPrf().MakeFastaString(s);
		break;
           case e_Pdb:
		GetPdb().MakeFastaString(s);
		break;
	   default:
		s += "[UnknownSeqIdType]";
		break;

	}
	return;
}
END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

