/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 */

// standard includes
#include <ncbi_pch.hpp>

// generated includes
#include <objects/seqfeat/RNA_ref.hpp>

// generated classes

BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::

// destructor
CRNA_ref::~CRNA_ref(void)
{
}


// perform basic cleanup functionality (trim spaces from strings etc.)
void CRNA_ref::BasicCleanup(void)
{
    if (IsSetExt()) {
        TExt& ext = SetExt();
        switch (ext.Which()) {
        case TExt::e_Name:
            x_CleanupExtName();
            break;
        case TExt::e_TRNA:
            x_CleanupExtTRNA();
            break;
        default:
            break;
        }
    }
}


void CRNA_ref::x_CleanupExtName(void)
{
    static const string rRNA = " rRNA";
    static const string kRibosomalrRna = " ribosomal rRNA";

    _ASSERT(IsSetExt()  &&  GetExt().IsName());

    string& name = SetExt().SetName();
    CleanString(name);

    if (name.empty()) {
        ResetExt();
    } else if (IsSetType()) {
        switch (GetType()) {
        case eType_rRNA:
        {{
            size_t len = name.length();
            if (len >= rRNA.length()                       &&
                NStr::EndsWith(name, rRNA, NStr::eNocase)  &&
                !NStr::EndsWith(name, kRibosomalrRna, NStr::eNocase)) {
                name.replace(len - rRNA.length(), name.size(), kRibosomalrRna);
            }
            break;
        }}
        case eType_tRNA:
        {{
            // !!!
            break;
        }}
        case eType_other:
        {{
            if (NStr::EqualNocase(name, "its1")) {
                name = "internal transcribed spacer 1";
            } else if (NStr::EqualNocase(name, "its2")) {
                name = "internal transcribed spacer 2";
            } else if (NStr::EqualNocase(name, "its3")) {
                name = "internal transcribed spacer 3";
            }
            break;
        }}
        default:
            break;
        }
    }
}


void CRNA_ref::x_CleanupExtTRNA(void)
{
    _ASSERT(IsSetExt()  &&  GetExt().IsTRNA());
    // !!!
}

END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


/*
* ===========================================================================
*
* $Log$
* Revision 6.1  2005/05/20 13:36:54  shomrat
* Added BasicCleanup()
*
*
* ===========================================================================
*/
/* Original file checksum: lines: 65, chars: 1885, CRC32: 6e6c3f8a */
