# $Id$

ALL_SUB_PROJ = $(SUB_PROJ) $(POTENTIAL_SUB_PROJ) $(EXPENDABLE_SUB_PROJ)
LOCAL_CONFIGURABLES = Makefile $(ALL_SUB_PROJ:%=%/Makefile) $(EXTRA_CONFIGURABLES)

SUB_MF_IN = $(ALL_SUB_PROJ:%=$(srcdir)/%/Makefile.in)

# XXX - we have to wildcard under $(builddir) rather than
# $(abs_top_srcdir), so explicitly list any new root configurables to
# ensure they get picked up properly.
ROOT_CONFIGURABLES  = $(builddir)/Makefile* $(builddir)/*.sh
CONFIGURABLES = $(ROOT_CONFIGURABLES) $(LOCAL_CONFIGURABLES)

UPDATE_CONFIGURABLE = $(abs_top_srcdir)/scripts/update_configurable.sh $(build_root)

config_status = $(build_root)/status/config.status

configurables: $(CONFIGURABLES)

# If this is just a normal single-colon rule, gmake ignores it for
# some targets (such as ncbicfg.c).
%:: $(srcdir)/%.in $(config_status)
	$(UPDATE_CONFIGURABLE) $@

# Meanwhile, Solaris make ignores the above rule for the local Makefile
# and requires an explicit one.  (Sigh.)
Makefile: $(srcdir)/Makefile.in $(config_status)
	$(UPDATE_CONFIGURABLE) $@

%/Makefile: $(srcdir)/%/Makefile.in $(config_status)
	$(UPDATE_CONFIGURABLE) $@

$(SUB_MF_IN):
	@-cd $(srcdir)  &&  test -d CVS  &&  \
	    cvs upd -ld -D 1970-01-01 `basename \`dirname $@\``
	@-cd $(srcdir)  &&  test -d CVS  &&  \
	    cvs upd -A `basename \`dirname $@\``/Makefile.in
	mkdir -p `dirname $@`
	test -f $@  ||  cp -p $(abs_top_srcdir)/src/Makefile.in.skel $@

$(builddir)/%: $(abs_top_srcdir)/src/%.in $(config_status)
	$(UPDATE_CONFIGURABLE) $@

# Some versions of Solaris make seem to need an explicit rule here too.
$(builddir)/Makefile.meta: $(abs_top_srcdir)/src/Makefile.meta.in $(config_status)
	$(UPDATE_CONFIGURABLE) $@

$(config_status): $(abs_top_srcdir)/configure $(abs_top_srcdir)/config.h.in
	$(abs_top_srcdir)/scripts/maybe_reconfigure.sh $(builddir)

.PHONY: configurables
.PRECIOUS: $(CONFIGURABLES) $(SUB_MF_IN)
# .SUFFIXES: .in

# Necessary to keep Solaris make from trying to rebuild everything for
# no good reason.
.POSIX:
