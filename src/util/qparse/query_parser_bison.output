Conflict in state 18 between rule 38 and token AND resolved as reduce.
Conflict in state 18 between rule 38 and token NOT resolved as reduce.
Conflict in state 18 between rule 38 and token OR resolved as shift.
Conflict in state 18 between rule 38 and token SUB resolved as shift.
Conflict in state 18 between rule 38 and token XOR resolved as shift.
Conflict in state 18 between rule 38 and token RANGE resolved as shift.
Conflict in state 18 between rule 38 and token EQ resolved as shift.
Conflict in state 18 between rule 38 and token NOTEQ resolved as shift.
Conflict in state 18 between rule 38 and token GT resolved as shift.
Conflict in state 18 between rule 38 and token GE resolved as shift.
Conflict in state 18 between rule 38 and token LT resolved as shift.
Conflict in state 18 between rule 38 and token LE resolved as shift.
Conflict in state 51 between rule 19 and token AND resolved as reduce.
Conflict in state 51 between rule 19 and token NOT resolved as shift.
Conflict in state 51 between rule 19 and token OR resolved as shift.
Conflict in state 51 between rule 19 and token SUB resolved as shift.
Conflict in state 51 between rule 19 and token XOR resolved as shift.
Conflict in state 51 between rule 19 and token RANGE resolved as shift.
Conflict in state 51 between rule 19 and token EQ resolved as shift.
Conflict in state 51 between rule 19 and token NOTEQ resolved as shift.
Conflict in state 51 between rule 19 and token GT resolved as shift.
Conflict in state 51 between rule 19 and token GE resolved as shift.
Conflict in state 51 between rule 19 and token LT resolved as shift.
Conflict in state 51 between rule 19 and token LE resolved as shift.
Conflict in state 53 between rule 37 and token AND resolved as reduce.
Conflict in state 53 between rule 37 and token NOT resolved as reduce.
Conflict in state 53 between rule 37 and token OR resolved as shift.
Conflict in state 53 between rule 37 and token SUB resolved as shift.
Conflict in state 53 between rule 37 and token XOR resolved as shift.
Conflict in state 53 between rule 37 and token RANGE resolved as shift.
Conflict in state 53 between rule 37 and token EQ resolved as shift.
Conflict in state 53 between rule 37 and token NOTEQ resolved as shift.
Conflict in state 53 between rule 37 and token GT resolved as shift.
Conflict in state 53 between rule 37 and token GE resolved as shift.
Conflict in state 53 between rule 37 and token LT resolved as shift.
Conflict in state 53 between rule 37 and token LE resolved as shift.
Conflict in state 53 between rule 38 and token OR resolved as shift.
Conflict in state 53 between rule 38 and token SUB resolved as shift.
Conflict in state 53 between rule 38 and token XOR resolved as shift.
Conflict in state 53 between rule 38 and token RANGE resolved as shift.
Conflict in state 53 between rule 38 and token EQ resolved as shift.
Conflict in state 53 between rule 38 and token NOTEQ resolved as shift.
Conflict in state 53 between rule 38 and token GT resolved as shift.
Conflict in state 53 between rule 38 and token GE resolved as shift.
Conflict in state 53 between rule 38 and token LT resolved as shift.
Conflict in state 53 between rule 38 and token LE resolved as shift.
Conflict in state 55 between rule 21 and token AND resolved as reduce.
Conflict in state 55 between rule 21 and token NOT resolved as reduce.
Conflict in state 55 between rule 21 and token OR resolved as reduce.
Conflict in state 55 between rule 21 and token SUB resolved as shift.
Conflict in state 55 between rule 21 and token XOR resolved as shift.
Conflict in state 55 between rule 21 and token RANGE resolved as shift.
Conflict in state 55 between rule 21 and token EQ resolved as shift.
Conflict in state 55 between rule 21 and token NOTEQ resolved as shift.
Conflict in state 55 between rule 21 and token GT resolved as shift.
Conflict in state 55 between rule 21 and token GE resolved as shift.
Conflict in state 55 between rule 21 and token LT resolved as shift.
Conflict in state 55 between rule 21 and token LE resolved as shift.
Conflict in state 57 between rule 20 and token AND resolved as reduce.
Conflict in state 57 between rule 20 and token NOT resolved as reduce.
Conflict in state 57 between rule 20 and token OR resolved as reduce.
Conflict in state 57 between rule 20 and token SUB resolved as reduce.
Conflict in state 57 between rule 20 and token XOR resolved as shift.
Conflict in state 57 between rule 20 and token RANGE resolved as shift.
Conflict in state 57 between rule 20 and token EQ resolved as shift.
Conflict in state 57 between rule 20 and token NOTEQ resolved as shift.
Conflict in state 57 between rule 20 and token GT resolved as shift.
Conflict in state 57 between rule 20 and token GE resolved as shift.
Conflict in state 57 between rule 20 and token LT resolved as shift.
Conflict in state 57 between rule 20 and token LE resolved as shift.
Conflict in state 59 between rule 22 and token AND resolved as reduce.
Conflict in state 59 between rule 22 and token NOT resolved as reduce.
Conflict in state 59 between rule 22 and token OR resolved as reduce.
Conflict in state 59 between rule 22 and token SUB resolved as reduce.
Conflict in state 59 between rule 22 and token XOR resolved as reduce.
Conflict in state 59 between rule 22 and token RANGE resolved as shift.
Conflict in state 59 between rule 22 and token EQ resolved as shift.
Conflict in state 59 between rule 22 and token NOTEQ resolved as shift.
Conflict in state 59 between rule 22 and token GT resolved as shift.
Conflict in state 59 between rule 22 and token GE resolved as shift.
Conflict in state 59 between rule 22 and token LT resolved as shift.
Conflict in state 59 between rule 22 and token LE resolved as shift.
Conflict in state 60 between rule 25 and token AND resolved as reduce.
Conflict in state 60 between rule 25 and token NOT resolved as reduce.
Conflict in state 60 between rule 25 and token OR resolved as reduce.
Conflict in state 60 between rule 25 and token SUB resolved as reduce.
Conflict in state 60 between rule 25 and token XOR resolved as reduce.
Conflict in state 60 between rule 25 and token RANGE resolved as reduce.
Conflict in state 60 between rule 25 and token EQ resolved as shift.
Conflict in state 60 between rule 25 and token NOTEQ resolved as shift.
Conflict in state 60 between rule 25 and token GT resolved as shift.
Conflict in state 60 between rule 25 and token GE resolved as shift.
Conflict in state 60 between rule 25 and token LT resolved as shift.
Conflict in state 60 between rule 25 and token LE resolved as shift.
Conflict in state 61 between rule 30 and token AND resolved as reduce.
Conflict in state 61 between rule 30 and token NOT resolved as reduce.
Conflict in state 61 between rule 30 and token OR resolved as reduce.
Conflict in state 61 between rule 30 and token SUB resolved as reduce.
Conflict in state 61 between rule 30 and token XOR resolved as reduce.
Conflict in state 61 between rule 30 and token RANGE resolved as reduce.
Conflict in state 61 between rule 30 and token EQ resolved as reduce.
Conflict in state 61 between rule 30 and token NOTEQ resolved as shift.
Conflict in state 61 between rule 30 and token GT resolved as shift.
Conflict in state 61 between rule 30 and token GE resolved as shift.
Conflict in state 61 between rule 30 and token LT resolved as shift.
Conflict in state 61 between rule 30 and token LE resolved as shift.
Conflict in state 62 between rule 31 and token AND resolved as reduce.
Conflict in state 62 between rule 31 and token NOT resolved as reduce.
Conflict in state 62 between rule 31 and token OR resolved as reduce.
Conflict in state 62 between rule 31 and token SUB resolved as reduce.
Conflict in state 62 between rule 31 and token XOR resolved as reduce.
Conflict in state 62 between rule 31 and token RANGE resolved as reduce.
Conflict in state 62 between rule 31 and token EQ resolved as reduce.
Conflict in state 62 between rule 31 and token NOTEQ resolved as reduce.
Conflict in state 62 between rule 31 and token GT resolved as shift.
Conflict in state 62 between rule 31 and token GE resolved as shift.
Conflict in state 62 between rule 31 and token LT resolved as shift.
Conflict in state 62 between rule 31 and token LE resolved as shift.
Conflict in state 63 between rule 32 and token AND resolved as reduce.
Conflict in state 63 between rule 32 and token NOT resolved as reduce.
Conflict in state 63 between rule 32 and token OR resolved as reduce.
Conflict in state 63 between rule 32 and token SUB resolved as reduce.
Conflict in state 63 between rule 32 and token XOR resolved as reduce.
Conflict in state 63 between rule 32 and token RANGE resolved as reduce.
Conflict in state 63 between rule 32 and token EQ resolved as reduce.
Conflict in state 63 between rule 32 and token NOTEQ resolved as reduce.
Conflict in state 63 between rule 32 and token GT resolved as reduce.
Conflict in state 63 between rule 32 and token GE resolved as shift.
Conflict in state 63 between rule 32 and token LT resolved as shift.
Conflict in state 63 between rule 32 and token LE resolved as shift.
Conflict in state 64 between rule 33 and token AND resolved as reduce.
Conflict in state 64 between rule 33 and token NOT resolved as reduce.
Conflict in state 64 between rule 33 and token OR resolved as reduce.
Conflict in state 64 between rule 33 and token SUB resolved as reduce.
Conflict in state 64 between rule 33 and token XOR resolved as reduce.
Conflict in state 64 between rule 33 and token RANGE resolved as reduce.
Conflict in state 64 between rule 33 and token EQ resolved as reduce.
Conflict in state 64 between rule 33 and token NOTEQ resolved as reduce.
Conflict in state 64 between rule 33 and token GT resolved as reduce.
Conflict in state 64 between rule 33 and token GE resolved as reduce.
Conflict in state 64 between rule 33 and token LT resolved as shift.
Conflict in state 64 between rule 33 and token LE resolved as shift.
Conflict in state 65 between rule 34 and token AND resolved as reduce.
Conflict in state 65 between rule 34 and token NOT resolved as reduce.
Conflict in state 65 between rule 34 and token OR resolved as reduce.
Conflict in state 65 between rule 34 and token SUB resolved as reduce.
Conflict in state 65 between rule 34 and token XOR resolved as reduce.
Conflict in state 65 between rule 34 and token RANGE resolved as reduce.
Conflict in state 65 between rule 34 and token EQ resolved as reduce.
Conflict in state 65 between rule 34 and token NOTEQ resolved as reduce.
Conflict in state 65 between rule 34 and token GT resolved as reduce.
Conflict in state 65 between rule 34 and token GE resolved as reduce.
Conflict in state 65 between rule 34 and token LT resolved as reduce.
Conflict in state 65 between rule 34 and token LE resolved as shift.
Conflict in state 66 between rule 35 and token AND resolved as reduce.
Conflict in state 66 between rule 35 and token NOT resolved as reduce.
Conflict in state 66 between rule 35 and token OR resolved as reduce.
Conflict in state 66 between rule 35 and token SUB resolved as reduce.
Conflict in state 66 between rule 35 and token XOR resolved as reduce.
Conflict in state 66 between rule 35 and token RANGE resolved as reduce.
Conflict in state 66 between rule 35 and token EQ resolved as reduce.
Conflict in state 66 between rule 35 and token NOTEQ resolved as reduce.
Conflict in state 66 between rule 35 and token GT resolved as reduce.
Conflict in state 66 between rule 35 and token GE resolved as reduce.
Conflict in state 66 between rule 35 and token LT resolved as reduce.
Conflict in state 66 between rule 35 and token LE resolved as reduce.


State 3 contains 1 shift/reduce conflict.
State 18 contains 5 shift/reduce conflicts.
State 26 contains 3 shift/reduce conflicts.
State 39 contains 17 shift/reduce conflicts.
State 42 contains 3 shift/reduce conflicts and 18 reduce/reduce conflicts.
State 43 contains 19 reduce/reduce conflicts.
State 50 contains 3 shift/reduce conflicts.
State 51 contains 5 shift/reduce conflicts.
State 52 contains 3 shift/reduce conflicts.
State 53 contains 5 shift/reduce conflicts and 9 reduce/reduce conflicts.
State 54 contains 3 shift/reduce conflicts.
State 55 contains 5 shift/reduce conflicts.
State 56 contains 3 shift/reduce conflicts.
State 57 contains 5 shift/reduce conflicts.
State 58 contains 3 shift/reduce conflicts.
State 59 contains 5 shift/reduce conflicts.
State 60 contains 5 shift/reduce conflicts.
State 61 contains 5 shift/reduce conflicts.
State 62 contains 5 shift/reduce conflicts.
State 63 contains 5 shift/reduce conflicts.
State 64 contains 5 shift/reduce conflicts.
State 65 contains 5 shift/reduce conflicts.
State 66 contains 5 shift/reduce conflicts.


Grammar

  Number, Line, Rule
    1 112 input -> exp
    2 114 input -> select_clause
    3 119 select_clause -> SELECT obj_list FROM obj_list opt_where
    4 155 opt_where -> /* empty */
    5 160 opt_where -> WHERE exp
    6 170 obj_list -> scalar_value
    7 175 obj_list -> obj_list ',' scalar_value
    8 185 scalar_value -> NUM_INT
    9 192 scalar_value -> STRING
   10 197 scalar_value -> IDENT
   11 203 scalar_list -> scalar_value
   12 208 scalar_list -> scalar_list ',' scalar_value
   13 216 in_sub_expr -> scalar_list
   14 218 in_sub_expr -> select_clause
   15 222 exp -> scalar_value
   16 227 exp -> STRING IDENT
   17 236 exp -> exp exp
   18 247 exp -> '(' exp ')'
   19 257 exp -> exp AND exp
   20 262 exp -> exp SUB exp
   21 267 exp -> exp OR exp
   22 272 exp -> exp XOR exp
   23 277 exp -> scalar_value BETWEEN scalar_value AND scalar_value
   24 290 exp -> scalar_value NOT_BETWEEN scalar_value AND scalar_value
   25 304 exp -> exp RANGE exp
   26 309 exp -> scalar_value LIKE scalar_value
   27 314 exp -> scalar_value NOT_LIKE scalar_value
   28 319 exp -> scalar_value IN '(' in_sub_expr ')'
   29 330 exp -> scalar_value NOT_IN '(' in_sub_expr ')'
   30 341 exp -> exp EQ exp
   31 346 exp -> exp NOTEQ exp
   32 350 exp -> exp GT exp
   33 354 exp -> exp GE exp
   34 358 exp -> exp LT exp
   35 362 exp -> exp LE exp
   36 366 exp -> '(' exp ')'
   37 371 exp -> exp NOT exp
   38 376 exp -> NOT exp
   39 385 exp -> error STRING
   40 394 exp -> error IDENT
   41 403 exp -> error NUM_INT
   42 412 exp -> exp error
   43 424 exp -> '(' exp error
   44 434 exp -> exp OR error
   45 444 exp -> exp XOR error
   46 454 exp -> exp NOT error
   47 464 exp -> exp AND error
   48 474 exp -> exp SUB error


Terminals, with rules where they appear

$ (-1)
'(' (40) 18 28 29 36 43
')' (41) 18 28 29 36
',' (44) 7 12
error (256) 39 40 41 42 43 44 45 46 47 48
IDENT (257) 10 16 40
STRING (258) 9 16 39
NUM_INT (259) 8 41
SELECT (260) 3
FROM (261) 3
WHERE (262) 5
AND (263) 19 23 24 47
NOT (264) 37 38 46
OR (265) 21 44
SUB (266) 20 48
XOR (267) 22 45
RANGE (268) 25
EQ (269) 30
NOTEQ (270) 31
GT (271) 32
GE (272) 33
LT (273) 34
LE (274) 35
BETWEEN (275) 23
NOT_BETWEEN (276) 24
LIKE (277) 26
NOT_LIKE (278) 27
IN (279) 28
NOT_IN (280) 29


Nonterminals, with rules where they appear

input (30)
    on left: 1 2
select_clause (31)
    on left: 3, on right: 2 14
opt_where (32)
    on left: 4 5, on right: 3
obj_list (33)
    on left: 6 7, on right: 3 7
scalar_value (34)
    on left: 8 9 10, on right: 6 7 11 12 15 23 24 26 27 28 29
scalar_list (35)
    on left: 11 12, on right: 12 13
in_sub_expr (36)
    on left: 13 14, on right: 28 29
exp (37)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
    33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48,
    on right: 1 5 17 18 19 20 21 22 25 30 31 32 33 34 35 36 37 38 42
    43 44 45 46 47 48


state 0

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    SELECT	shift, and go to state 5
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    input	go to state 85
    select_clause	go to state 8
    scalar_value	go to state 9
    exp 	go to state 10



state 1

    exp  ->  error . STRING   (rule 39)
    exp  ->  error . IDENT   (rule 40)
    exp  ->  error . NUM_INT   (rule 41)

    IDENT	shift, and go to state 11
    STRING	shift, and go to state 12
    NUM_INT	shift, and go to state 13



state 2

    scalar_value  ->  IDENT .   (rule 10)

    $default	reduce using rule 10 (scalar_value)



state 3

    scalar_value  ->  STRING .   (rule 9)
    exp  ->  STRING . IDENT   (rule 16)

    IDENT	shift, and go to state 14

    IDENT	[reduce using rule 9 (scalar_value)]
    $default	reduce using rule 9 (scalar_value)



state 4

    scalar_value  ->  NUM_INT .   (rule 8)

    $default	reduce using rule 8 (scalar_value)



state 5

    select_clause  ->  SELECT . obj_list FROM obj_list opt_where   (rule 3)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    obj_list	go to state 16
    scalar_value	go to state 17



state 6

    exp  ->  NOT . exp   (rule 38)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 18



state 7

    exp  ->  '(' . exp ')'   (rule 18)
    exp  ->  '(' . exp ')'   (rule 36)
    exp  ->  '(' . exp error   (rule 43)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 19



state 8

    input  ->  select_clause .   (rule 2)

    $default	reduce using rule 2 (input)



state 9

    exp  ->  scalar_value .   (rule 15)
    exp  ->  scalar_value . BETWEEN scalar_value AND scalar_value   (rule 23)
    exp  ->  scalar_value . NOT_BETWEEN scalar_value AND scalar_value   (rule 24)
    exp  ->  scalar_value . LIKE scalar_value   (rule 26)
    exp  ->  scalar_value . NOT_LIKE scalar_value   (rule 27)
    exp  ->  scalar_value . IN '(' in_sub_expr ')'   (rule 28)
    exp  ->  scalar_value . NOT_IN '(' in_sub_expr ')'   (rule 29)

    BETWEEN	shift, and go to state 20
    NOT_BETWEEN	shift, and go to state 21
    LIKE	shift, and go to state 22
    NOT_LIKE	shift, and go to state 23
    IN  	shift, and go to state 24
    NOT_IN	shift, and go to state 25

    $default	reduce using rule 15 (exp)



state 10

    input  ->  exp .   (rule 1)
    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 27
    NOT 	shift, and go to state 28
    OR  	shift, and go to state 29
    SUB 	shift, and go to state 30
    XOR 	shift, and go to state 31
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 1 (input)
    scalar_value	go to state 9
    exp 	go to state 39



state 11

    exp  ->  error IDENT .   (rule 40)

    $default	reduce using rule 40 (exp)



state 12

    exp  ->  error STRING .   (rule 39)

    $default	reduce using rule 39 (exp)



state 13

    exp  ->  error NUM_INT .   (rule 41)

    $default	reduce using rule 41 (exp)



state 14

    exp  ->  STRING IDENT .   (rule 16)

    $default	reduce using rule 16 (exp)



state 15

    scalar_value  ->  STRING .   (rule 9)

    $default	reduce using rule 9 (scalar_value)



state 16

    select_clause  ->  SELECT obj_list . FROM obj_list opt_where   (rule 3)
    obj_list  ->  obj_list . ',' scalar_value   (rule 7)

    FROM	shift, and go to state 40
    ',' 	shift, and go to state 41



state 17

    obj_list  ->  scalar_value .   (rule 6)

    $default	reduce using rule 6 (obj_list)



state 18

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  NOT exp .   (rule 38)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    OR  	shift, and go to state 29
    SUB 	shift, and go to state 30
    XOR 	shift, and go to state 31
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 38 (exp)
    error	[reduce using rule 38 (exp)]
    IDENT	[reduce using rule 38 (exp)]
    STRING	[reduce using rule 38 (exp)]
    NUM_INT	[reduce using rule 38 (exp)]
    AND 	reduce using rule 38 (exp)
    NOT 	reduce using rule 38 (exp)
    '(' 	[reduce using rule 38 (exp)]
    ')' 	reduce using rule 38 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 19

    exp  ->  exp . exp   (rule 17)
    exp  ->  '(' exp . ')'   (rule 18)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  '(' exp . ')'   (rule 36)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  '(' exp . error   (rule 43)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 42
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 27
    NOT 	shift, and go to state 28
    OR  	shift, and go to state 29
    SUB 	shift, and go to state 30
    XOR 	shift, and go to state 31
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7
    ')' 	shift, and go to state 43

    scalar_value	go to state 9
    exp 	go to state 39



state 20

    exp  ->  scalar_value BETWEEN . scalar_value AND scalar_value   (rule 23)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 44



state 21

    exp  ->  scalar_value NOT_BETWEEN . scalar_value AND scalar_value   (rule 24)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 45



state 22

    exp  ->  scalar_value LIKE . scalar_value   (rule 26)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 46



state 23

    exp  ->  scalar_value NOT_LIKE . scalar_value   (rule 27)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 47



state 24

    exp  ->  scalar_value IN . '(' in_sub_expr ')'   (rule 28)

    '(' 	shift, and go to state 48



state 25

    exp  ->  scalar_value NOT_IN . '(' in_sub_expr ')'   (rule 29)

    '(' 	shift, and go to state 49



state 26

    exp  ->  error . STRING   (rule 39)
    exp  ->  error . IDENT   (rule 40)
    exp  ->  error . NUM_INT   (rule 41)
    exp  ->  exp error .   (rule 42)

    IDENT	shift, and go to state 11
    STRING	shift, and go to state 12
    NUM_INT	shift, and go to state 13

    IDENT	[reduce using rule 42 (exp)]
    STRING	[reduce using rule 42 (exp)]
    NUM_INT	[reduce using rule 42 (exp)]
    $default	reduce using rule 42 (exp)



state 27

    exp  ->  exp AND . exp   (rule 19)
    exp  ->  exp AND . error   (rule 47)

    error	shift, and go to state 50
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 51



state 28

    exp  ->  exp NOT . exp   (rule 37)
    exp  ->  NOT . exp   (rule 38)
    exp  ->  exp NOT . error   (rule 46)

    error	shift, and go to state 52
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 53



state 29

    exp  ->  exp OR . exp   (rule 21)
    exp  ->  exp OR . error   (rule 44)

    error	shift, and go to state 54
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 55



state 30

    exp  ->  exp SUB . exp   (rule 20)
    exp  ->  exp SUB . error   (rule 48)

    error	shift, and go to state 56
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 57



state 31

    exp  ->  exp XOR . exp   (rule 22)
    exp  ->  exp XOR . error   (rule 45)

    error	shift, and go to state 58
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 59



state 32

    exp  ->  exp RANGE . exp   (rule 25)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 60



state 33

    exp  ->  exp EQ . exp   (rule 30)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 61



state 34

    exp  ->  exp NOTEQ . exp   (rule 31)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 62



state 35

    exp  ->  exp GT . exp   (rule 32)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 63



state 36

    exp  ->  exp GE . exp   (rule 33)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 64



state 37

    exp  ->  exp LT . exp   (rule 34)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 65



state 38

    exp  ->  exp LE . exp   (rule 35)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 66



state 39

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp exp .   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 27
    NOT 	shift, and go to state 28
    OR  	shift, and go to state 29
    SUB 	shift, and go to state 30
    XOR 	shift, and go to state 31
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 17 (exp)
    error	[reduce using rule 17 (exp)]
    IDENT	[reduce using rule 17 (exp)]
    STRING	[reduce using rule 17 (exp)]
    NUM_INT	[reduce using rule 17 (exp)]
    AND 	[reduce using rule 17 (exp)]
    NOT 	[reduce using rule 17 (exp)]
    OR  	[reduce using rule 17 (exp)]
    SUB 	[reduce using rule 17 (exp)]
    XOR 	[reduce using rule 17 (exp)]
    RANGE	[reduce using rule 17 (exp)]
    EQ  	[reduce using rule 17 (exp)]
    NOTEQ	[reduce using rule 17 (exp)]
    GT  	[reduce using rule 17 (exp)]
    GE  	[reduce using rule 17 (exp)]
    LT  	[reduce using rule 17 (exp)]
    LE  	[reduce using rule 17 (exp)]
    '(' 	[reduce using rule 17 (exp)]
    ')' 	reduce using rule 17 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 40

    select_clause  ->  SELECT obj_list FROM . obj_list opt_where   (rule 3)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    obj_list	go to state 67
    scalar_value	go to state 17



state 41

    obj_list  ->  obj_list ',' . scalar_value   (rule 7)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 68



state 42

    exp  ->  error . STRING   (rule 39)
    exp  ->  error . IDENT   (rule 40)
    exp  ->  error . NUM_INT   (rule 41)
    exp  ->  exp error .   (rule 42)
    exp  ->  '(' exp error .   (rule 43)

    IDENT	shift, and go to state 11
    STRING	shift, and go to state 12
    NUM_INT	shift, and go to state 13

    $   	reduce using rule 43 (exp)
    error	reduce using rule 42 (exp)
    error	[reduce using rule 43 (exp)]
    IDENT	[reduce using rule 42 (exp)]
    IDENT	[reduce using rule 43 (exp)]
    STRING	[reduce using rule 42 (exp)]
    STRING	[reduce using rule 43 (exp)]
    NUM_INT	[reduce using rule 42 (exp)]
    NUM_INT	[reduce using rule 43 (exp)]
    AND 	reduce using rule 42 (exp)
    AND 	[reduce using rule 43 (exp)]
    NOT 	reduce using rule 42 (exp)
    NOT 	[reduce using rule 43 (exp)]
    OR  	reduce using rule 42 (exp)
    OR  	[reduce using rule 43 (exp)]
    SUB 	reduce using rule 42 (exp)
    SUB 	[reduce using rule 43 (exp)]
    XOR 	reduce using rule 42 (exp)
    XOR 	[reduce using rule 43 (exp)]
    RANGE	reduce using rule 42 (exp)
    RANGE	[reduce using rule 43 (exp)]
    EQ  	reduce using rule 42 (exp)
    EQ  	[reduce using rule 43 (exp)]
    NOTEQ	reduce using rule 42 (exp)
    NOTEQ	[reduce using rule 43 (exp)]
    GT  	reduce using rule 42 (exp)
    GT  	[reduce using rule 43 (exp)]
    GE  	reduce using rule 42 (exp)
    GE  	[reduce using rule 43 (exp)]
    LT  	reduce using rule 42 (exp)
    LT  	[reduce using rule 43 (exp)]
    LE  	reduce using rule 42 (exp)
    LE  	[reduce using rule 43 (exp)]
    '(' 	reduce using rule 42 (exp)
    '(' 	[reduce using rule 43 (exp)]
    ')' 	reduce using rule 42 (exp)
    ')' 	[reduce using rule 43 (exp)]
    $default	reduce using rule 42 (exp)


state 43

    exp  ->  '(' exp ')' .   (rule 18)
    exp  ->  '(' exp ')' .   (rule 36)

    $   	reduce using rule 18 (exp)
    $   	[reduce using rule 36 (exp)]
    error	reduce using rule 18 (exp)
    error	[reduce using rule 36 (exp)]
    IDENT	reduce using rule 18 (exp)
    IDENT	[reduce using rule 36 (exp)]
    STRING	reduce using rule 18 (exp)
    STRING	[reduce using rule 36 (exp)]
    NUM_INT	reduce using rule 18 (exp)
    NUM_INT	[reduce using rule 36 (exp)]
    AND 	reduce using rule 18 (exp)
    AND 	[reduce using rule 36 (exp)]
    NOT 	reduce using rule 18 (exp)
    NOT 	[reduce using rule 36 (exp)]
    OR  	reduce using rule 18 (exp)
    OR  	[reduce using rule 36 (exp)]
    SUB 	reduce using rule 18 (exp)
    SUB 	[reduce using rule 36 (exp)]
    XOR 	reduce using rule 18 (exp)
    XOR 	[reduce using rule 36 (exp)]
    RANGE	reduce using rule 18 (exp)
    RANGE	[reduce using rule 36 (exp)]
    EQ  	reduce using rule 18 (exp)
    EQ  	[reduce using rule 36 (exp)]
    NOTEQ	reduce using rule 18 (exp)
    NOTEQ	[reduce using rule 36 (exp)]
    GT  	reduce using rule 18 (exp)
    GT  	[reduce using rule 36 (exp)]
    GE  	reduce using rule 18 (exp)
    GE  	[reduce using rule 36 (exp)]
    LT  	reduce using rule 18 (exp)
    LT  	[reduce using rule 36 (exp)]
    LE  	reduce using rule 18 (exp)
    LE  	[reduce using rule 36 (exp)]
    '(' 	reduce using rule 18 (exp)
    '(' 	[reduce using rule 36 (exp)]
    ')' 	reduce using rule 18 (exp)
    ')' 	[reduce using rule 36 (exp)]
    $default	reduce using rule 18 (exp)


state 44

    exp  ->  scalar_value BETWEEN scalar_value . AND scalar_value   (rule 23)

    AND 	shift, and go to state 69



state 45

    exp  ->  scalar_value NOT_BETWEEN scalar_value . AND scalar_value   (rule 24)

    AND 	shift, and go to state 70



state 46

    exp  ->  scalar_value LIKE scalar_value .   (rule 26)

    $default	reduce using rule 26 (exp)



state 47

    exp  ->  scalar_value NOT_LIKE scalar_value .   (rule 27)

    $default	reduce using rule 27 (exp)



state 48

    exp  ->  scalar_value IN '(' . in_sub_expr ')'   (rule 28)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4
    SELECT	shift, and go to state 5

    select_clause	go to state 71
    scalar_value	go to state 72
    scalar_list	go to state 73
    in_sub_expr	go to state 74



state 49

    exp  ->  scalar_value NOT_IN '(' . in_sub_expr ')'   (rule 29)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4
    SELECT	shift, and go to state 5

    select_clause	go to state 71
    scalar_value	go to state 72
    scalar_list	go to state 73
    in_sub_expr	go to state 75



state 50

    exp  ->  error . STRING   (rule 39)
    exp  ->  error . IDENT   (rule 40)
    exp  ->  error . NUM_INT   (rule 41)
    exp  ->  exp AND error .   (rule 47)

    IDENT	shift, and go to state 11
    STRING	shift, and go to state 12
    NUM_INT	shift, and go to state 13

    IDENT	[reduce using rule 47 (exp)]
    STRING	[reduce using rule 47 (exp)]
    NUM_INT	[reduce using rule 47 (exp)]
    $default	reduce using rule 47 (exp)



state 51

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp AND exp .   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 28
    OR  	shift, and go to state 29
    SUB 	shift, and go to state 30
    XOR 	shift, and go to state 31
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 19 (exp)
    error	[reduce using rule 19 (exp)]
    IDENT	[reduce using rule 19 (exp)]
    STRING	[reduce using rule 19 (exp)]
    NUM_INT	[reduce using rule 19 (exp)]
    AND 	reduce using rule 19 (exp)
    '(' 	[reduce using rule 19 (exp)]
    ')' 	reduce using rule 19 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 52

    exp  ->  error . STRING   (rule 39)
    exp  ->  error . IDENT   (rule 40)
    exp  ->  error . NUM_INT   (rule 41)
    exp  ->  exp NOT error .   (rule 46)

    IDENT	shift, and go to state 11
    STRING	shift, and go to state 12
    NUM_INT	shift, and go to state 13

    IDENT	[reduce using rule 46 (exp)]
    STRING	[reduce using rule 46 (exp)]
    NUM_INT	[reduce using rule 46 (exp)]
    $default	reduce using rule 46 (exp)



state 53

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp NOT exp .   (rule 37)
    exp  ->  NOT exp .   (rule 38)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    OR  	shift, and go to state 29
    SUB 	shift, and go to state 30
    XOR 	shift, and go to state 31
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 37 (exp)
    $   	[reduce using rule 38 (exp)]
    error	[reduce using rule 37 (exp)]
    error	[reduce using rule 38 (exp)]
    IDENT	[reduce using rule 37 (exp)]
    IDENT	[reduce using rule 38 (exp)]
    STRING	[reduce using rule 37 (exp)]
    STRING	[reduce using rule 38 (exp)]
    NUM_INT	[reduce using rule 37 (exp)]
    NUM_INT	[reduce using rule 38 (exp)]
    AND 	reduce using rule 37 (exp)
    AND 	[reduce using rule 38 (exp)]
    NOT 	reduce using rule 37 (exp)
    NOT 	[reduce using rule 38 (exp)]
    '(' 	[reduce using rule 37 (exp)]
    '(' 	[reduce using rule 38 (exp)]
    ')' 	reduce using rule 37 (exp)
    ')' 	[reduce using rule 38 (exp)]
    scalar_value	go to state 9
    exp 	go to state 39



state 54

    exp  ->  error . STRING   (rule 39)
    exp  ->  error . IDENT   (rule 40)
    exp  ->  error . NUM_INT   (rule 41)
    exp  ->  exp OR error .   (rule 44)

    IDENT	shift, and go to state 11
    STRING	shift, and go to state 12
    NUM_INT	shift, and go to state 13

    IDENT	[reduce using rule 44 (exp)]
    STRING	[reduce using rule 44 (exp)]
    NUM_INT	[reduce using rule 44 (exp)]
    $default	reduce using rule 44 (exp)



state 55

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp OR exp .   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    SUB 	shift, and go to state 30
    XOR 	shift, and go to state 31
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 21 (exp)
    error	[reduce using rule 21 (exp)]
    IDENT	[reduce using rule 21 (exp)]
    STRING	[reduce using rule 21 (exp)]
    NUM_INT	[reduce using rule 21 (exp)]
    AND 	reduce using rule 21 (exp)
    NOT 	reduce using rule 21 (exp)
    OR  	reduce using rule 21 (exp)
    '(' 	[reduce using rule 21 (exp)]
    ')' 	reduce using rule 21 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 56

    exp  ->  error . STRING   (rule 39)
    exp  ->  error . IDENT   (rule 40)
    exp  ->  error . NUM_INT   (rule 41)
    exp  ->  exp SUB error .   (rule 48)

    IDENT	shift, and go to state 11
    STRING	shift, and go to state 12
    NUM_INT	shift, and go to state 13

    IDENT	[reduce using rule 48 (exp)]
    STRING	[reduce using rule 48 (exp)]
    NUM_INT	[reduce using rule 48 (exp)]
    $default	reduce using rule 48 (exp)



state 57

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp SUB exp .   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    XOR 	shift, and go to state 31
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 20 (exp)
    error	[reduce using rule 20 (exp)]
    IDENT	[reduce using rule 20 (exp)]
    STRING	[reduce using rule 20 (exp)]
    NUM_INT	[reduce using rule 20 (exp)]
    AND 	reduce using rule 20 (exp)
    NOT 	reduce using rule 20 (exp)
    OR  	reduce using rule 20 (exp)
    SUB 	reduce using rule 20 (exp)
    '(' 	[reduce using rule 20 (exp)]
    ')' 	reduce using rule 20 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 58

    exp  ->  error . STRING   (rule 39)
    exp  ->  error . IDENT   (rule 40)
    exp  ->  error . NUM_INT   (rule 41)
    exp  ->  exp XOR error .   (rule 45)

    IDENT	shift, and go to state 11
    STRING	shift, and go to state 12
    NUM_INT	shift, and go to state 13

    IDENT	[reduce using rule 45 (exp)]
    STRING	[reduce using rule 45 (exp)]
    NUM_INT	[reduce using rule 45 (exp)]
    $default	reduce using rule 45 (exp)



state 59

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp XOR exp .   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 22 (exp)
    error	[reduce using rule 22 (exp)]
    IDENT	[reduce using rule 22 (exp)]
    STRING	[reduce using rule 22 (exp)]
    NUM_INT	[reduce using rule 22 (exp)]
    AND 	reduce using rule 22 (exp)
    NOT 	reduce using rule 22 (exp)
    OR  	reduce using rule 22 (exp)
    SUB 	reduce using rule 22 (exp)
    XOR 	reduce using rule 22 (exp)
    '(' 	[reduce using rule 22 (exp)]
    ')' 	reduce using rule 22 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 60

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp RANGE exp .   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 25 (exp)
    error	[reduce using rule 25 (exp)]
    IDENT	[reduce using rule 25 (exp)]
    STRING	[reduce using rule 25 (exp)]
    NUM_INT	[reduce using rule 25 (exp)]
    AND 	reduce using rule 25 (exp)
    NOT 	reduce using rule 25 (exp)
    OR  	reduce using rule 25 (exp)
    SUB 	reduce using rule 25 (exp)
    XOR 	reduce using rule 25 (exp)
    RANGE	reduce using rule 25 (exp)
    '(' 	[reduce using rule 25 (exp)]
    ')' 	reduce using rule 25 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 61

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp EQ exp .   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 30 (exp)
    error	[reduce using rule 30 (exp)]
    IDENT	[reduce using rule 30 (exp)]
    STRING	[reduce using rule 30 (exp)]
    NUM_INT	[reduce using rule 30 (exp)]
    AND 	reduce using rule 30 (exp)
    NOT 	reduce using rule 30 (exp)
    OR  	reduce using rule 30 (exp)
    SUB 	reduce using rule 30 (exp)
    XOR 	reduce using rule 30 (exp)
    RANGE	reduce using rule 30 (exp)
    EQ  	reduce using rule 30 (exp)
    '(' 	[reduce using rule 30 (exp)]
    ')' 	reduce using rule 30 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 62

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp NOTEQ exp .   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 31 (exp)
    error	[reduce using rule 31 (exp)]
    IDENT	[reduce using rule 31 (exp)]
    STRING	[reduce using rule 31 (exp)]
    NUM_INT	[reduce using rule 31 (exp)]
    AND 	reduce using rule 31 (exp)
    NOT 	reduce using rule 31 (exp)
    OR  	reduce using rule 31 (exp)
    SUB 	reduce using rule 31 (exp)
    XOR 	reduce using rule 31 (exp)
    RANGE	reduce using rule 31 (exp)
    EQ  	reduce using rule 31 (exp)
    NOTEQ	reduce using rule 31 (exp)
    '(' 	[reduce using rule 31 (exp)]
    ')' 	reduce using rule 31 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 63

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp GT exp .   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 32 (exp)
    error	[reduce using rule 32 (exp)]
    IDENT	[reduce using rule 32 (exp)]
    STRING	[reduce using rule 32 (exp)]
    NUM_INT	[reduce using rule 32 (exp)]
    AND 	reduce using rule 32 (exp)
    NOT 	reduce using rule 32 (exp)
    OR  	reduce using rule 32 (exp)
    SUB 	reduce using rule 32 (exp)
    XOR 	reduce using rule 32 (exp)
    RANGE	reduce using rule 32 (exp)
    EQ  	reduce using rule 32 (exp)
    NOTEQ	reduce using rule 32 (exp)
    GT  	reduce using rule 32 (exp)
    '(' 	[reduce using rule 32 (exp)]
    ')' 	reduce using rule 32 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 64

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp GE exp .   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 33 (exp)
    error	[reduce using rule 33 (exp)]
    IDENT	[reduce using rule 33 (exp)]
    STRING	[reduce using rule 33 (exp)]
    NUM_INT	[reduce using rule 33 (exp)]
    AND 	reduce using rule 33 (exp)
    NOT 	reduce using rule 33 (exp)
    OR  	reduce using rule 33 (exp)
    SUB 	reduce using rule 33 (exp)
    XOR 	reduce using rule 33 (exp)
    RANGE	reduce using rule 33 (exp)
    EQ  	reduce using rule 33 (exp)
    NOTEQ	reduce using rule 33 (exp)
    GT  	reduce using rule 33 (exp)
    GE  	reduce using rule 33 (exp)
    '(' 	[reduce using rule 33 (exp)]
    ')' 	reduce using rule 33 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 65

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp LT exp .   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 34 (exp)
    error	[reduce using rule 34 (exp)]
    IDENT	[reduce using rule 34 (exp)]
    STRING	[reduce using rule 34 (exp)]
    NUM_INT	[reduce using rule 34 (exp)]
    AND 	reduce using rule 34 (exp)
    NOT 	reduce using rule 34 (exp)
    OR  	reduce using rule 34 (exp)
    SUB 	reduce using rule 34 (exp)
    XOR 	reduce using rule 34 (exp)
    RANGE	reduce using rule 34 (exp)
    EQ  	reduce using rule 34 (exp)
    NOTEQ	reduce using rule 34 (exp)
    GT  	reduce using rule 34 (exp)
    GE  	reduce using rule 34 (exp)
    LT  	reduce using rule 34 (exp)
    '(' 	[reduce using rule 34 (exp)]
    ')' 	reduce using rule 34 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 66

    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp LE exp .   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    '(' 	shift, and go to state 7

    $   	reduce using rule 35 (exp)
    error	[reduce using rule 35 (exp)]
    IDENT	[reduce using rule 35 (exp)]
    STRING	[reduce using rule 35 (exp)]
    NUM_INT	[reduce using rule 35 (exp)]
    AND 	reduce using rule 35 (exp)
    NOT 	reduce using rule 35 (exp)
    OR  	reduce using rule 35 (exp)
    SUB 	reduce using rule 35 (exp)
    XOR 	reduce using rule 35 (exp)
    RANGE	reduce using rule 35 (exp)
    EQ  	reduce using rule 35 (exp)
    NOTEQ	reduce using rule 35 (exp)
    GT  	reduce using rule 35 (exp)
    GE  	reduce using rule 35 (exp)
    LT  	reduce using rule 35 (exp)
    LE  	reduce using rule 35 (exp)
    '(' 	[reduce using rule 35 (exp)]
    ')' 	reduce using rule 35 (exp)
    scalar_value	go to state 9
    exp 	go to state 39



state 67

    select_clause  ->  SELECT obj_list FROM obj_list . opt_where   (rule 3)
    obj_list  ->  obj_list . ',' scalar_value   (rule 7)

    WHERE	shift, and go to state 76
    ',' 	shift, and go to state 41

    $default	reduce using rule 4 (opt_where)

    opt_where	go to state 77



state 68

    obj_list  ->  obj_list ',' scalar_value .   (rule 7)

    $default	reduce using rule 7 (obj_list)



state 69

    exp  ->  scalar_value BETWEEN scalar_value AND . scalar_value   (rule 23)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 78



state 70

    exp  ->  scalar_value NOT_BETWEEN scalar_value AND . scalar_value   (rule 24)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 79



state 71

    in_sub_expr  ->  select_clause .   (rule 14)

    $default	reduce using rule 14 (in_sub_expr)



state 72

    scalar_list  ->  scalar_value .   (rule 11)

    $default	reduce using rule 11 (scalar_list)



state 73

    scalar_list  ->  scalar_list . ',' scalar_value   (rule 12)
    in_sub_expr  ->  scalar_list .   (rule 13)

    ',' 	shift, and go to state 80

    $default	reduce using rule 13 (in_sub_expr)



state 74

    exp  ->  scalar_value IN '(' in_sub_expr . ')'   (rule 28)

    ')' 	shift, and go to state 81



state 75

    exp  ->  scalar_value NOT_IN '(' in_sub_expr . ')'   (rule 29)

    ')' 	shift, and go to state 82



state 76

    opt_where  ->  WHERE . exp   (rule 5)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 6
    '(' 	shift, and go to state 7

    scalar_value	go to state 9
    exp 	go to state 83



state 77

    select_clause  ->  SELECT obj_list FROM obj_list opt_where .   (rule 3)

    $default	reduce using rule 3 (select_clause)



state 78

    exp  ->  scalar_value BETWEEN scalar_value AND scalar_value .   (rule 23)

    $default	reduce using rule 23 (exp)



state 79

    exp  ->  scalar_value NOT_BETWEEN scalar_value AND scalar_value .   (rule 24)

    $default	reduce using rule 24 (exp)



state 80

    scalar_list  ->  scalar_list ',' . scalar_value   (rule 12)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 15
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 84



state 81

    exp  ->  scalar_value IN '(' in_sub_expr ')' .   (rule 28)

    $default	reduce using rule 28 (exp)



state 82

    exp  ->  scalar_value NOT_IN '(' in_sub_expr ')' .   (rule 29)

    $default	reduce using rule 29 (exp)



state 83

    opt_where  ->  WHERE exp .   (rule 5)
    exp  ->  exp . exp   (rule 17)
    exp  ->  exp . AND exp   (rule 19)
    exp  ->  exp . SUB exp   (rule 20)
    exp  ->  exp . OR exp   (rule 21)
    exp  ->  exp . XOR exp   (rule 22)
    exp  ->  exp . RANGE exp   (rule 25)
    exp  ->  exp . EQ exp   (rule 30)
    exp  ->  exp . NOTEQ exp   (rule 31)
    exp  ->  exp . GT exp   (rule 32)
    exp  ->  exp . GE exp   (rule 33)
    exp  ->  exp . LT exp   (rule 34)
    exp  ->  exp . LE exp   (rule 35)
    exp  ->  exp . NOT exp   (rule 37)
    exp  ->  exp . error   (rule 42)
    exp  ->  exp . OR error   (rule 44)
    exp  ->  exp . XOR error   (rule 45)
    exp  ->  exp . NOT error   (rule 46)
    exp  ->  exp . AND error   (rule 47)
    exp  ->  exp . SUB error   (rule 48)

    error	shift, and go to state 26
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 27
    NOT 	shift, and go to state 28
    OR  	shift, and go to state 29
    SUB 	shift, and go to state 30
    XOR 	shift, and go to state 31
    RANGE	shift, and go to state 32
    EQ  	shift, and go to state 33
    NOTEQ	shift, and go to state 34
    GT  	shift, and go to state 35
    GE  	shift, and go to state 36
    LT  	shift, and go to state 37
    LE  	shift, and go to state 38
    '(' 	shift, and go to state 7

    $   	reduce using rule 5 (opt_where)
    ')' 	reduce using rule 5 (opt_where)
    scalar_value	go to state 9
    exp 	go to state 39



state 84

    scalar_list  ->  scalar_list ',' scalar_value .   (rule 12)

    $default	reduce using rule 12 (scalar_list)



state 85

    $   	go to state 86



state 86

    $   	go to state 87



state 87

    $default	accept


