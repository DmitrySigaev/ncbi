Conflict in state 13 between rule 24 and token AND resolved as reduce.
Conflict in state 13 between rule 24 and token NOT resolved as reduce.
Conflict in state 13 between rule 24 and token OR resolved as shift.
Conflict in state 13 between rule 24 and token SUB resolved as shift.
Conflict in state 13 between rule 24 and token XOR resolved as shift.
Conflict in state 13 between rule 24 and token RANGE resolved as shift.
Conflict in state 13 between rule 24 and token EQ resolved as shift.
Conflict in state 13 between rule 24 and token NOTEQ resolved as shift.
Conflict in state 13 between rule 24 and token GT resolved as shift.
Conflict in state 13 between rule 24 and token GE resolved as shift.
Conflict in state 13 between rule 24 and token LT resolved as shift.
Conflict in state 13 between rule 24 and token LE resolved as shift.
Conflict in state 37 between rule 9 and token AND resolved as reduce.
Conflict in state 37 between rule 9 and token NOT resolved as shift.
Conflict in state 37 between rule 9 and token OR resolved as shift.
Conflict in state 37 between rule 9 and token SUB resolved as shift.
Conflict in state 37 between rule 9 and token XOR resolved as shift.
Conflict in state 37 between rule 9 and token RANGE resolved as shift.
Conflict in state 37 between rule 9 and token EQ resolved as shift.
Conflict in state 37 between rule 9 and token NOTEQ resolved as shift.
Conflict in state 37 between rule 9 and token GT resolved as shift.
Conflict in state 37 between rule 9 and token GE resolved as shift.
Conflict in state 37 between rule 9 and token LT resolved as shift.
Conflict in state 37 between rule 9 and token LE resolved as shift.
Conflict in state 39 between rule 23 and token AND resolved as reduce.
Conflict in state 39 between rule 23 and token NOT resolved as reduce.
Conflict in state 39 between rule 23 and token OR resolved as shift.
Conflict in state 39 between rule 23 and token SUB resolved as shift.
Conflict in state 39 between rule 23 and token XOR resolved as shift.
Conflict in state 39 between rule 23 and token RANGE resolved as shift.
Conflict in state 39 between rule 23 and token EQ resolved as shift.
Conflict in state 39 between rule 23 and token NOTEQ resolved as shift.
Conflict in state 39 between rule 23 and token GT resolved as shift.
Conflict in state 39 between rule 23 and token GE resolved as shift.
Conflict in state 39 between rule 23 and token LT resolved as shift.
Conflict in state 39 between rule 23 and token LE resolved as shift.
Conflict in state 39 between rule 24 and token OR resolved as shift.
Conflict in state 39 between rule 24 and token SUB resolved as shift.
Conflict in state 39 between rule 24 and token XOR resolved as shift.
Conflict in state 39 between rule 24 and token RANGE resolved as shift.
Conflict in state 39 between rule 24 and token EQ resolved as shift.
Conflict in state 39 between rule 24 and token NOTEQ resolved as shift.
Conflict in state 39 between rule 24 and token GT resolved as shift.
Conflict in state 39 between rule 24 and token GE resolved as shift.
Conflict in state 39 between rule 24 and token LT resolved as shift.
Conflict in state 39 between rule 24 and token LE resolved as shift.
Conflict in state 41 between rule 11 and token AND resolved as reduce.
Conflict in state 41 between rule 11 and token NOT resolved as reduce.
Conflict in state 41 between rule 11 and token OR resolved as reduce.
Conflict in state 41 between rule 11 and token SUB resolved as shift.
Conflict in state 41 between rule 11 and token XOR resolved as shift.
Conflict in state 41 between rule 11 and token RANGE resolved as shift.
Conflict in state 41 between rule 11 and token EQ resolved as shift.
Conflict in state 41 between rule 11 and token NOTEQ resolved as shift.
Conflict in state 41 between rule 11 and token GT resolved as shift.
Conflict in state 41 between rule 11 and token GE resolved as shift.
Conflict in state 41 between rule 11 and token LT resolved as shift.
Conflict in state 41 between rule 11 and token LE resolved as shift.
Conflict in state 43 between rule 10 and token AND resolved as reduce.
Conflict in state 43 between rule 10 and token NOT resolved as reduce.
Conflict in state 43 between rule 10 and token OR resolved as reduce.
Conflict in state 43 between rule 10 and token SUB resolved as reduce.
Conflict in state 43 between rule 10 and token XOR resolved as shift.
Conflict in state 43 between rule 10 and token RANGE resolved as shift.
Conflict in state 43 between rule 10 and token EQ resolved as shift.
Conflict in state 43 between rule 10 and token NOTEQ resolved as shift.
Conflict in state 43 between rule 10 and token GT resolved as shift.
Conflict in state 43 between rule 10 and token GE resolved as shift.
Conflict in state 43 between rule 10 and token LT resolved as shift.
Conflict in state 43 between rule 10 and token LE resolved as shift.
Conflict in state 45 between rule 12 and token AND resolved as reduce.
Conflict in state 45 between rule 12 and token NOT resolved as reduce.
Conflict in state 45 between rule 12 and token OR resolved as reduce.
Conflict in state 45 between rule 12 and token SUB resolved as reduce.
Conflict in state 45 between rule 12 and token XOR resolved as reduce.
Conflict in state 45 between rule 12 and token RANGE resolved as shift.
Conflict in state 45 between rule 12 and token EQ resolved as shift.
Conflict in state 45 between rule 12 and token NOTEQ resolved as shift.
Conflict in state 45 between rule 12 and token GT resolved as shift.
Conflict in state 45 between rule 12 and token GE resolved as shift.
Conflict in state 45 between rule 12 and token LT resolved as shift.
Conflict in state 45 between rule 12 and token LE resolved as shift.
Conflict in state 46 between rule 14 and token AND resolved as reduce.
Conflict in state 46 between rule 14 and token NOT resolved as reduce.
Conflict in state 46 between rule 14 and token OR resolved as reduce.
Conflict in state 46 between rule 14 and token SUB resolved as reduce.
Conflict in state 46 between rule 14 and token XOR resolved as reduce.
Conflict in state 46 between rule 14 and token RANGE resolved as reduce.
Conflict in state 46 between rule 14 and token EQ resolved as shift.
Conflict in state 46 between rule 14 and token NOTEQ resolved as shift.
Conflict in state 46 between rule 14 and token GT resolved as shift.
Conflict in state 46 between rule 14 and token GE resolved as shift.
Conflict in state 46 between rule 14 and token LT resolved as shift.
Conflict in state 46 between rule 14 and token LE resolved as shift.
Conflict in state 47 between rule 16 and token AND resolved as reduce.
Conflict in state 47 between rule 16 and token NOT resolved as reduce.
Conflict in state 47 between rule 16 and token OR resolved as reduce.
Conflict in state 47 between rule 16 and token SUB resolved as reduce.
Conflict in state 47 between rule 16 and token XOR resolved as reduce.
Conflict in state 47 between rule 16 and token RANGE resolved as reduce.
Conflict in state 47 between rule 16 and token EQ resolved as reduce.
Conflict in state 47 between rule 16 and token NOTEQ resolved as shift.
Conflict in state 47 between rule 16 and token GT resolved as shift.
Conflict in state 47 between rule 16 and token GE resolved as shift.
Conflict in state 47 between rule 16 and token LT resolved as shift.
Conflict in state 47 between rule 16 and token LE resolved as shift.
Conflict in state 48 between rule 17 and token AND resolved as reduce.
Conflict in state 48 between rule 17 and token NOT resolved as reduce.
Conflict in state 48 between rule 17 and token OR resolved as reduce.
Conflict in state 48 between rule 17 and token SUB resolved as reduce.
Conflict in state 48 between rule 17 and token XOR resolved as reduce.
Conflict in state 48 between rule 17 and token RANGE resolved as reduce.
Conflict in state 48 between rule 17 and token EQ resolved as reduce.
Conflict in state 48 between rule 17 and token NOTEQ resolved as reduce.
Conflict in state 48 between rule 17 and token GT resolved as shift.
Conflict in state 48 between rule 17 and token GE resolved as shift.
Conflict in state 48 between rule 17 and token LT resolved as shift.
Conflict in state 48 between rule 17 and token LE resolved as shift.
Conflict in state 49 between rule 18 and token AND resolved as reduce.
Conflict in state 49 between rule 18 and token NOT resolved as reduce.
Conflict in state 49 between rule 18 and token OR resolved as reduce.
Conflict in state 49 between rule 18 and token SUB resolved as reduce.
Conflict in state 49 between rule 18 and token XOR resolved as reduce.
Conflict in state 49 between rule 18 and token RANGE resolved as reduce.
Conflict in state 49 between rule 18 and token EQ resolved as reduce.
Conflict in state 49 between rule 18 and token NOTEQ resolved as reduce.
Conflict in state 49 between rule 18 and token GT resolved as reduce.
Conflict in state 49 between rule 18 and token GE resolved as shift.
Conflict in state 49 between rule 18 and token LT resolved as shift.
Conflict in state 49 between rule 18 and token LE resolved as shift.
Conflict in state 50 between rule 19 and token AND resolved as reduce.
Conflict in state 50 between rule 19 and token NOT resolved as reduce.
Conflict in state 50 between rule 19 and token OR resolved as reduce.
Conflict in state 50 between rule 19 and token SUB resolved as reduce.
Conflict in state 50 between rule 19 and token XOR resolved as reduce.
Conflict in state 50 between rule 19 and token RANGE resolved as reduce.
Conflict in state 50 between rule 19 and token EQ resolved as reduce.
Conflict in state 50 between rule 19 and token NOTEQ resolved as reduce.
Conflict in state 50 between rule 19 and token GT resolved as reduce.
Conflict in state 50 between rule 19 and token GE resolved as reduce.
Conflict in state 50 between rule 19 and token LT resolved as shift.
Conflict in state 50 between rule 19 and token LE resolved as shift.
Conflict in state 51 between rule 20 and token AND resolved as reduce.
Conflict in state 51 between rule 20 and token NOT resolved as reduce.
Conflict in state 51 between rule 20 and token OR resolved as reduce.
Conflict in state 51 between rule 20 and token SUB resolved as reduce.
Conflict in state 51 between rule 20 and token XOR resolved as reduce.
Conflict in state 51 between rule 20 and token RANGE resolved as reduce.
Conflict in state 51 between rule 20 and token EQ resolved as reduce.
Conflict in state 51 between rule 20 and token NOTEQ resolved as reduce.
Conflict in state 51 between rule 20 and token GT resolved as reduce.
Conflict in state 51 between rule 20 and token GE resolved as reduce.
Conflict in state 51 between rule 20 and token LT resolved as reduce.
Conflict in state 51 between rule 20 and token LE resolved as shift.
Conflict in state 52 between rule 21 and token AND resolved as reduce.
Conflict in state 52 between rule 21 and token NOT resolved as reduce.
Conflict in state 52 between rule 21 and token OR resolved as reduce.
Conflict in state 52 between rule 21 and token SUB resolved as reduce.
Conflict in state 52 between rule 21 and token XOR resolved as reduce.
Conflict in state 52 between rule 21 and token RANGE resolved as reduce.
Conflict in state 52 between rule 21 and token EQ resolved as reduce.
Conflict in state 52 between rule 21 and token NOTEQ resolved as reduce.
Conflict in state 52 between rule 21 and token GT resolved as reduce.
Conflict in state 52 between rule 21 and token GE resolved as reduce.
Conflict in state 52 between rule 21 and token LT resolved as reduce.
Conflict in state 52 between rule 21 and token LE resolved as reduce.


State 3 contains 1 shift/reduce conflict.
State 13 contains 5 shift/reduce conflicts.
State 17 contains 3 shift/reduce conflicts.
State 30 contains 17 shift/reduce conflicts.
State 31 contains 3 shift/reduce conflicts and 18 reduce/reduce conflicts.
State 32 contains 19 reduce/reduce conflicts.
State 36 contains 3 shift/reduce conflicts.
State 37 contains 5 shift/reduce conflicts.
State 38 contains 3 shift/reduce conflicts.
State 39 contains 5 shift/reduce conflicts and 9 reduce/reduce conflicts.
State 40 contains 3 shift/reduce conflicts.
State 41 contains 5 shift/reduce conflicts.
State 42 contains 3 shift/reduce conflicts.
State 43 contains 5 shift/reduce conflicts.
State 44 contains 3 shift/reduce conflicts.
State 45 contains 5 shift/reduce conflicts.
State 46 contains 5 shift/reduce conflicts.
State 47 contains 5 shift/reduce conflicts.
State 48 contains 5 shift/reduce conflicts.
State 49 contains 5 shift/reduce conflicts.
State 50 contains 5 shift/reduce conflicts.
State 51 contains 5 shift/reduce conflicts.
State 52 contains 5 shift/reduce conflicts.


Grammar

  Number, Line, Rule
    1  92 input -> exp
    2 102 scalar_value -> NUM_INT
    3 109 scalar_value -> STRING
    4 114 scalar_value -> IDENT
    5 120 exp -> scalar_value
    6 125 exp -> STRING IDENT
    7 134 exp -> exp exp
    8 145 exp -> '(' exp ')'
    9 155 exp -> exp AND exp
   10 160 exp -> exp SUB exp
   11 165 exp -> exp OR exp
   12 170 exp -> exp XOR exp
   13 175 exp -> scalar_value BETWEEN scalar_value AND scalar_value
   14 189 exp -> exp RANGE exp
   15 194 exp -> scalar_value LIKE scalar_value
   16 199 exp -> exp EQ exp
   17 204 exp -> exp NOTEQ exp
   18 208 exp -> exp GT exp
   19 212 exp -> exp GE exp
   20 216 exp -> exp LT exp
   21 220 exp -> exp LE exp
   22 224 exp -> '(' exp ')'
   23 229 exp -> exp NOT exp
   24 234 exp -> NOT exp
   25 243 exp -> error STRING
   26 252 exp -> error IDENT
   27 261 exp -> error NUM_INT
   28 270 exp -> exp error
   29 282 exp -> '(' exp error
   30 292 exp -> exp OR error
   31 302 exp -> exp XOR error
   32 312 exp -> exp NOT error
   33 322 exp -> exp AND error
   34 332 exp -> exp SUB error


Terminals, with rules where they appear

$ (-1)
'(' (40) 8 22 29
')' (41) 8 22
error (256) 25 26 27 28 29 30 31 32 33 34
IDENT (257) 4 6 26
STRING (258) 3 6 25
NUM_INT (259) 2 27
AND (260) 9 13 33
NOT (261) 23 24 32
OR (262) 11 30
SUB (263) 10 34
XOR (264) 12 31
RANGE (265) 14
EQ (266) 16
NOTEQ (267) 17
GT (268) 18
GE (269) 19
LT (270) 20
LE (271) 21
BETWEEN (272) 13
LIKE (273) 15


Nonterminals, with rules where they appear

input (22)
    on left: 1
scalar_value (23)
    on left: 2 3 4, on right: 5 13 15
exp (24)
    on left: 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
    25 26 27 28 29 30 31 32 33 34, on right: 1 7 8 9 10 11 12 14 16
    17 18 19 20 21 22 23 24 28 29 30 31 32 33 34


state 0

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    input	go to state 55
    scalar_value	go to state 7
    exp 	go to state 8



state 1

    exp  ->  error . STRING   (rule 25)
    exp  ->  error . IDENT   (rule 26)
    exp  ->  error . NUM_INT   (rule 27)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11



state 2

    scalar_value  ->  IDENT .   (rule 4)

    $default	reduce using rule 4 (scalar_value)



state 3

    scalar_value  ->  STRING .   (rule 3)
    exp  ->  STRING . IDENT   (rule 6)

    IDENT	shift, and go to state 12

    IDENT	[reduce using rule 3 (scalar_value)]
    $default	reduce using rule 3 (scalar_value)



state 4

    scalar_value  ->  NUM_INT .   (rule 2)

    $default	reduce using rule 2 (scalar_value)



state 5

    exp  ->  NOT . exp   (rule 24)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 13



state 6

    exp  ->  '(' . exp ')'   (rule 8)
    exp  ->  '(' . exp ')'   (rule 22)
    exp  ->  '(' . exp error   (rule 29)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 14



state 7

    exp  ->  scalar_value .   (rule 5)
    exp  ->  scalar_value . BETWEEN scalar_value AND scalar_value   (rule 13)
    exp  ->  scalar_value . LIKE scalar_value   (rule 15)

    BETWEEN	shift, and go to state 15
    LIKE	shift, and go to state 16

    $default	reduce using rule 5 (exp)



state 8

    input  ->  exp .   (rule 1)
    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 18
    NOT 	shift, and go to state 19
    OR  	shift, and go to state 20
    SUB 	shift, and go to state 21
    XOR 	shift, and go to state 22
    RANGE	shift, and go to state 23
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 1 (input)
    scalar_value	go to state 7
    exp 	go to state 30



state 9

    exp  ->  error IDENT .   (rule 26)

    $default	reduce using rule 26 (exp)



state 10

    exp  ->  error STRING .   (rule 25)

    $default	reduce using rule 25 (exp)



state 11

    exp  ->  error NUM_INT .   (rule 27)

    $default	reduce using rule 27 (exp)



state 12

    exp  ->  STRING IDENT .   (rule 6)

    $default	reduce using rule 6 (exp)



state 13

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  NOT exp .   (rule 24)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    OR  	shift, and go to state 20
    SUB 	shift, and go to state 21
    XOR 	shift, and go to state 22
    RANGE	shift, and go to state 23
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 24 (exp)
    error	[reduce using rule 24 (exp)]
    IDENT	[reduce using rule 24 (exp)]
    STRING	[reduce using rule 24 (exp)]
    NUM_INT	[reduce using rule 24 (exp)]
    AND 	reduce using rule 24 (exp)
    NOT 	reduce using rule 24 (exp)
    '(' 	[reduce using rule 24 (exp)]
    ')' 	reduce using rule 24 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 14

    exp  ->  exp . exp   (rule 7)
    exp  ->  '(' exp . ')'   (rule 8)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  '(' exp . ')'   (rule 22)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  '(' exp . error   (rule 29)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 31
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 18
    NOT 	shift, and go to state 19
    OR  	shift, and go to state 20
    SUB 	shift, and go to state 21
    XOR 	shift, and go to state 22
    RANGE	shift, and go to state 23
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6
    ')' 	shift, and go to state 32

    scalar_value	go to state 7
    exp 	go to state 30



state 15

    exp  ->  scalar_value BETWEEN . scalar_value AND scalar_value   (rule 13)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 33
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 34



state 16

    exp  ->  scalar_value LIKE . scalar_value   (rule 15)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 33
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 35



state 17

    exp  ->  error . STRING   (rule 25)
    exp  ->  error . IDENT   (rule 26)
    exp  ->  error . NUM_INT   (rule 27)
    exp  ->  exp error .   (rule 28)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 28 (exp)]
    STRING	[reduce using rule 28 (exp)]
    NUM_INT	[reduce using rule 28 (exp)]
    $default	reduce using rule 28 (exp)



state 18

    exp  ->  exp AND . exp   (rule 9)
    exp  ->  exp AND . error   (rule 33)

    error	shift, and go to state 36
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 37



state 19

    exp  ->  exp NOT . exp   (rule 23)
    exp  ->  NOT . exp   (rule 24)
    exp  ->  exp NOT . error   (rule 32)

    error	shift, and go to state 38
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 39



state 20

    exp  ->  exp OR . exp   (rule 11)
    exp  ->  exp OR . error   (rule 30)

    error	shift, and go to state 40
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 41



state 21

    exp  ->  exp SUB . exp   (rule 10)
    exp  ->  exp SUB . error   (rule 34)

    error	shift, and go to state 42
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 43



state 22

    exp  ->  exp XOR . exp   (rule 12)
    exp  ->  exp XOR . error   (rule 31)

    error	shift, and go to state 44
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 45



state 23

    exp  ->  exp RANGE . exp   (rule 14)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 46



state 24

    exp  ->  exp EQ . exp   (rule 16)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 47



state 25

    exp  ->  exp NOTEQ . exp   (rule 17)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 48



state 26

    exp  ->  exp GT . exp   (rule 18)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 49



state 27

    exp  ->  exp GE . exp   (rule 19)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 50



state 28

    exp  ->  exp LT . exp   (rule 20)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 51



state 29

    exp  ->  exp LE . exp   (rule 21)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 52



state 30

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp exp .   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 18
    NOT 	shift, and go to state 19
    OR  	shift, and go to state 20
    SUB 	shift, and go to state 21
    XOR 	shift, and go to state 22
    RANGE	shift, and go to state 23
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 7 (exp)
    error	[reduce using rule 7 (exp)]
    IDENT	[reduce using rule 7 (exp)]
    STRING	[reduce using rule 7 (exp)]
    NUM_INT	[reduce using rule 7 (exp)]
    AND 	[reduce using rule 7 (exp)]
    NOT 	[reduce using rule 7 (exp)]
    OR  	[reduce using rule 7 (exp)]
    SUB 	[reduce using rule 7 (exp)]
    XOR 	[reduce using rule 7 (exp)]
    RANGE	[reduce using rule 7 (exp)]
    EQ  	[reduce using rule 7 (exp)]
    NOTEQ	[reduce using rule 7 (exp)]
    GT  	[reduce using rule 7 (exp)]
    GE  	[reduce using rule 7 (exp)]
    LT  	[reduce using rule 7 (exp)]
    LE  	[reduce using rule 7 (exp)]
    '(' 	[reduce using rule 7 (exp)]
    ')' 	reduce using rule 7 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 31

    exp  ->  error . STRING   (rule 25)
    exp  ->  error . IDENT   (rule 26)
    exp  ->  error . NUM_INT   (rule 27)
    exp  ->  exp error .   (rule 28)
    exp  ->  '(' exp error .   (rule 29)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    $   	reduce using rule 29 (exp)
    error	reduce using rule 28 (exp)
    error	[reduce using rule 29 (exp)]
    IDENT	[reduce using rule 28 (exp)]
    IDENT	[reduce using rule 29 (exp)]
    STRING	[reduce using rule 28 (exp)]
    STRING	[reduce using rule 29 (exp)]
    NUM_INT	[reduce using rule 28 (exp)]
    NUM_INT	[reduce using rule 29 (exp)]
    AND 	reduce using rule 28 (exp)
    AND 	[reduce using rule 29 (exp)]
    NOT 	reduce using rule 28 (exp)
    NOT 	[reduce using rule 29 (exp)]
    OR  	reduce using rule 28 (exp)
    OR  	[reduce using rule 29 (exp)]
    SUB 	reduce using rule 28 (exp)
    SUB 	[reduce using rule 29 (exp)]
    XOR 	reduce using rule 28 (exp)
    XOR 	[reduce using rule 29 (exp)]
    RANGE	reduce using rule 28 (exp)
    RANGE	[reduce using rule 29 (exp)]
    EQ  	reduce using rule 28 (exp)
    EQ  	[reduce using rule 29 (exp)]
    NOTEQ	reduce using rule 28 (exp)
    NOTEQ	[reduce using rule 29 (exp)]
    GT  	reduce using rule 28 (exp)
    GT  	[reduce using rule 29 (exp)]
    GE  	reduce using rule 28 (exp)
    GE  	[reduce using rule 29 (exp)]
    LT  	reduce using rule 28 (exp)
    LT  	[reduce using rule 29 (exp)]
    LE  	reduce using rule 28 (exp)
    LE  	[reduce using rule 29 (exp)]
    '(' 	reduce using rule 28 (exp)
    '(' 	[reduce using rule 29 (exp)]
    ')' 	reduce using rule 28 (exp)
    ')' 	[reduce using rule 29 (exp)]
    $default	reduce using rule 28 (exp)


state 32

    exp  ->  '(' exp ')' .   (rule 8)
    exp  ->  '(' exp ')' .   (rule 22)

    $   	reduce using rule 8 (exp)
    $   	[reduce using rule 22 (exp)]
    error	reduce using rule 8 (exp)
    error	[reduce using rule 22 (exp)]
    IDENT	reduce using rule 8 (exp)
    IDENT	[reduce using rule 22 (exp)]
    STRING	reduce using rule 8 (exp)
    STRING	[reduce using rule 22 (exp)]
    NUM_INT	reduce using rule 8 (exp)
    NUM_INT	[reduce using rule 22 (exp)]
    AND 	reduce using rule 8 (exp)
    AND 	[reduce using rule 22 (exp)]
    NOT 	reduce using rule 8 (exp)
    NOT 	[reduce using rule 22 (exp)]
    OR  	reduce using rule 8 (exp)
    OR  	[reduce using rule 22 (exp)]
    SUB 	reduce using rule 8 (exp)
    SUB 	[reduce using rule 22 (exp)]
    XOR 	reduce using rule 8 (exp)
    XOR 	[reduce using rule 22 (exp)]
    RANGE	reduce using rule 8 (exp)
    RANGE	[reduce using rule 22 (exp)]
    EQ  	reduce using rule 8 (exp)
    EQ  	[reduce using rule 22 (exp)]
    NOTEQ	reduce using rule 8 (exp)
    NOTEQ	[reduce using rule 22 (exp)]
    GT  	reduce using rule 8 (exp)
    GT  	[reduce using rule 22 (exp)]
    GE  	reduce using rule 8 (exp)
    GE  	[reduce using rule 22 (exp)]
    LT  	reduce using rule 8 (exp)
    LT  	[reduce using rule 22 (exp)]
    LE  	reduce using rule 8 (exp)
    LE  	[reduce using rule 22 (exp)]
    '(' 	reduce using rule 8 (exp)
    '(' 	[reduce using rule 22 (exp)]
    ')' 	reduce using rule 8 (exp)
    ')' 	[reduce using rule 22 (exp)]
    $default	reduce using rule 8 (exp)


state 33

    scalar_value  ->  STRING .   (rule 3)

    $default	reduce using rule 3 (scalar_value)



state 34

    exp  ->  scalar_value BETWEEN scalar_value . AND scalar_value   (rule 13)

    AND 	shift, and go to state 53



state 35

    exp  ->  scalar_value LIKE scalar_value .   (rule 15)

    $default	reduce using rule 15 (exp)



state 36

    exp  ->  error . STRING   (rule 25)
    exp  ->  error . IDENT   (rule 26)
    exp  ->  error . NUM_INT   (rule 27)
    exp  ->  exp AND error .   (rule 33)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 33 (exp)]
    STRING	[reduce using rule 33 (exp)]
    NUM_INT	[reduce using rule 33 (exp)]
    $default	reduce using rule 33 (exp)



state 37

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp AND exp .   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 19
    OR  	shift, and go to state 20
    SUB 	shift, and go to state 21
    XOR 	shift, and go to state 22
    RANGE	shift, and go to state 23
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 9 (exp)
    error	[reduce using rule 9 (exp)]
    IDENT	[reduce using rule 9 (exp)]
    STRING	[reduce using rule 9 (exp)]
    NUM_INT	[reduce using rule 9 (exp)]
    AND 	reduce using rule 9 (exp)
    '(' 	[reduce using rule 9 (exp)]
    ')' 	reduce using rule 9 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 38

    exp  ->  error . STRING   (rule 25)
    exp  ->  error . IDENT   (rule 26)
    exp  ->  error . NUM_INT   (rule 27)
    exp  ->  exp NOT error .   (rule 32)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 32 (exp)]
    STRING	[reduce using rule 32 (exp)]
    NUM_INT	[reduce using rule 32 (exp)]
    $default	reduce using rule 32 (exp)



state 39

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp NOT exp .   (rule 23)
    exp  ->  NOT exp .   (rule 24)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    OR  	shift, and go to state 20
    SUB 	shift, and go to state 21
    XOR 	shift, and go to state 22
    RANGE	shift, and go to state 23
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 23 (exp)
    $   	[reduce using rule 24 (exp)]
    error	[reduce using rule 23 (exp)]
    error	[reduce using rule 24 (exp)]
    IDENT	[reduce using rule 23 (exp)]
    IDENT	[reduce using rule 24 (exp)]
    STRING	[reduce using rule 23 (exp)]
    STRING	[reduce using rule 24 (exp)]
    NUM_INT	[reduce using rule 23 (exp)]
    NUM_INT	[reduce using rule 24 (exp)]
    AND 	reduce using rule 23 (exp)
    AND 	[reduce using rule 24 (exp)]
    NOT 	reduce using rule 23 (exp)
    NOT 	[reduce using rule 24 (exp)]
    '(' 	[reduce using rule 23 (exp)]
    '(' 	[reduce using rule 24 (exp)]
    ')' 	reduce using rule 23 (exp)
    ')' 	[reduce using rule 24 (exp)]
    scalar_value	go to state 7
    exp 	go to state 30



state 40

    exp  ->  error . STRING   (rule 25)
    exp  ->  error . IDENT   (rule 26)
    exp  ->  error . NUM_INT   (rule 27)
    exp  ->  exp OR error .   (rule 30)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 30 (exp)]
    STRING	[reduce using rule 30 (exp)]
    NUM_INT	[reduce using rule 30 (exp)]
    $default	reduce using rule 30 (exp)



state 41

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp OR exp .   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    SUB 	shift, and go to state 21
    XOR 	shift, and go to state 22
    RANGE	shift, and go to state 23
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 11 (exp)
    error	[reduce using rule 11 (exp)]
    IDENT	[reduce using rule 11 (exp)]
    STRING	[reduce using rule 11 (exp)]
    NUM_INT	[reduce using rule 11 (exp)]
    AND 	reduce using rule 11 (exp)
    NOT 	reduce using rule 11 (exp)
    OR  	reduce using rule 11 (exp)
    '(' 	[reduce using rule 11 (exp)]
    ')' 	reduce using rule 11 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 42

    exp  ->  error . STRING   (rule 25)
    exp  ->  error . IDENT   (rule 26)
    exp  ->  error . NUM_INT   (rule 27)
    exp  ->  exp SUB error .   (rule 34)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 34 (exp)]
    STRING	[reduce using rule 34 (exp)]
    NUM_INT	[reduce using rule 34 (exp)]
    $default	reduce using rule 34 (exp)



state 43

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp SUB exp .   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    XOR 	shift, and go to state 22
    RANGE	shift, and go to state 23
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 10 (exp)
    error	[reduce using rule 10 (exp)]
    IDENT	[reduce using rule 10 (exp)]
    STRING	[reduce using rule 10 (exp)]
    NUM_INT	[reduce using rule 10 (exp)]
    AND 	reduce using rule 10 (exp)
    NOT 	reduce using rule 10 (exp)
    OR  	reduce using rule 10 (exp)
    SUB 	reduce using rule 10 (exp)
    '(' 	[reduce using rule 10 (exp)]
    ')' 	reduce using rule 10 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 44

    exp  ->  error . STRING   (rule 25)
    exp  ->  error . IDENT   (rule 26)
    exp  ->  error . NUM_INT   (rule 27)
    exp  ->  exp XOR error .   (rule 31)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 31 (exp)]
    STRING	[reduce using rule 31 (exp)]
    NUM_INT	[reduce using rule 31 (exp)]
    $default	reduce using rule 31 (exp)



state 45

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp XOR exp .   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    RANGE	shift, and go to state 23
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 12 (exp)
    error	[reduce using rule 12 (exp)]
    IDENT	[reduce using rule 12 (exp)]
    STRING	[reduce using rule 12 (exp)]
    NUM_INT	[reduce using rule 12 (exp)]
    AND 	reduce using rule 12 (exp)
    NOT 	reduce using rule 12 (exp)
    OR  	reduce using rule 12 (exp)
    SUB 	reduce using rule 12 (exp)
    XOR 	reduce using rule 12 (exp)
    '(' 	[reduce using rule 12 (exp)]
    ')' 	reduce using rule 12 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 46

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp RANGE exp .   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    EQ  	shift, and go to state 24
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 14 (exp)
    error	[reduce using rule 14 (exp)]
    IDENT	[reduce using rule 14 (exp)]
    STRING	[reduce using rule 14 (exp)]
    NUM_INT	[reduce using rule 14 (exp)]
    AND 	reduce using rule 14 (exp)
    NOT 	reduce using rule 14 (exp)
    OR  	reduce using rule 14 (exp)
    SUB 	reduce using rule 14 (exp)
    XOR 	reduce using rule 14 (exp)
    RANGE	reduce using rule 14 (exp)
    '(' 	[reduce using rule 14 (exp)]
    ')' 	reduce using rule 14 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 47

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp EQ exp .   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOTEQ	shift, and go to state 25
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 16 (exp)
    error	[reduce using rule 16 (exp)]
    IDENT	[reduce using rule 16 (exp)]
    STRING	[reduce using rule 16 (exp)]
    NUM_INT	[reduce using rule 16 (exp)]
    AND 	reduce using rule 16 (exp)
    NOT 	reduce using rule 16 (exp)
    OR  	reduce using rule 16 (exp)
    SUB 	reduce using rule 16 (exp)
    XOR 	reduce using rule 16 (exp)
    RANGE	reduce using rule 16 (exp)
    EQ  	reduce using rule 16 (exp)
    '(' 	[reduce using rule 16 (exp)]
    ')' 	reduce using rule 16 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 48

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp NOTEQ exp .   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    GT  	shift, and go to state 26
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 17 (exp)
    error	[reduce using rule 17 (exp)]
    IDENT	[reduce using rule 17 (exp)]
    STRING	[reduce using rule 17 (exp)]
    NUM_INT	[reduce using rule 17 (exp)]
    AND 	reduce using rule 17 (exp)
    NOT 	reduce using rule 17 (exp)
    OR  	reduce using rule 17 (exp)
    SUB 	reduce using rule 17 (exp)
    XOR 	reduce using rule 17 (exp)
    RANGE	reduce using rule 17 (exp)
    EQ  	reduce using rule 17 (exp)
    NOTEQ	reduce using rule 17 (exp)
    '(' 	[reduce using rule 17 (exp)]
    ')' 	reduce using rule 17 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 49

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp GT exp .   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    GE  	shift, and go to state 27
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 18 (exp)
    error	[reduce using rule 18 (exp)]
    IDENT	[reduce using rule 18 (exp)]
    STRING	[reduce using rule 18 (exp)]
    NUM_INT	[reduce using rule 18 (exp)]
    AND 	reduce using rule 18 (exp)
    NOT 	reduce using rule 18 (exp)
    OR  	reduce using rule 18 (exp)
    SUB 	reduce using rule 18 (exp)
    XOR 	reduce using rule 18 (exp)
    RANGE	reduce using rule 18 (exp)
    EQ  	reduce using rule 18 (exp)
    NOTEQ	reduce using rule 18 (exp)
    GT  	reduce using rule 18 (exp)
    '(' 	[reduce using rule 18 (exp)]
    ')' 	reduce using rule 18 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 50

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp GE exp .   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    LT  	shift, and go to state 28
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 19 (exp)
    error	[reduce using rule 19 (exp)]
    IDENT	[reduce using rule 19 (exp)]
    STRING	[reduce using rule 19 (exp)]
    NUM_INT	[reduce using rule 19 (exp)]
    AND 	reduce using rule 19 (exp)
    NOT 	reduce using rule 19 (exp)
    OR  	reduce using rule 19 (exp)
    SUB 	reduce using rule 19 (exp)
    XOR 	reduce using rule 19 (exp)
    RANGE	reduce using rule 19 (exp)
    EQ  	reduce using rule 19 (exp)
    NOTEQ	reduce using rule 19 (exp)
    GT  	reduce using rule 19 (exp)
    GE  	reduce using rule 19 (exp)
    '(' 	[reduce using rule 19 (exp)]
    ')' 	reduce using rule 19 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 51

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp LT exp .   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    LE  	shift, and go to state 29
    '(' 	shift, and go to state 6

    $   	reduce using rule 20 (exp)
    error	[reduce using rule 20 (exp)]
    IDENT	[reduce using rule 20 (exp)]
    STRING	[reduce using rule 20 (exp)]
    NUM_INT	[reduce using rule 20 (exp)]
    AND 	reduce using rule 20 (exp)
    NOT 	reduce using rule 20 (exp)
    OR  	reduce using rule 20 (exp)
    SUB 	reduce using rule 20 (exp)
    XOR 	reduce using rule 20 (exp)
    RANGE	reduce using rule 20 (exp)
    EQ  	reduce using rule 20 (exp)
    NOTEQ	reduce using rule 20 (exp)
    GT  	reduce using rule 20 (exp)
    GE  	reduce using rule 20 (exp)
    LT  	reduce using rule 20 (exp)
    '(' 	[reduce using rule 20 (exp)]
    ')' 	reduce using rule 20 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 52

    exp  ->  exp . exp   (rule 7)
    exp  ->  exp . AND exp   (rule 9)
    exp  ->  exp . SUB exp   (rule 10)
    exp  ->  exp . OR exp   (rule 11)
    exp  ->  exp . XOR exp   (rule 12)
    exp  ->  exp . RANGE exp   (rule 14)
    exp  ->  exp . EQ exp   (rule 16)
    exp  ->  exp . NOTEQ exp   (rule 17)
    exp  ->  exp . GT exp   (rule 18)
    exp  ->  exp . GE exp   (rule 19)
    exp  ->  exp . LT exp   (rule 20)
    exp  ->  exp . LE exp   (rule 21)
    exp  ->  exp LE exp .   (rule 21)
    exp  ->  exp . NOT exp   (rule 23)
    exp  ->  exp . error   (rule 28)
    exp  ->  exp . OR error   (rule 30)
    exp  ->  exp . XOR error   (rule 31)
    exp  ->  exp . NOT error   (rule 32)
    exp  ->  exp . AND error   (rule 33)
    exp  ->  exp . SUB error   (rule 34)

    error	shift, and go to state 17
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    '(' 	shift, and go to state 6

    $   	reduce using rule 21 (exp)
    error	[reduce using rule 21 (exp)]
    IDENT	[reduce using rule 21 (exp)]
    STRING	[reduce using rule 21 (exp)]
    NUM_INT	[reduce using rule 21 (exp)]
    AND 	reduce using rule 21 (exp)
    NOT 	reduce using rule 21 (exp)
    OR  	reduce using rule 21 (exp)
    SUB 	reduce using rule 21 (exp)
    XOR 	reduce using rule 21 (exp)
    RANGE	reduce using rule 21 (exp)
    EQ  	reduce using rule 21 (exp)
    NOTEQ	reduce using rule 21 (exp)
    GT  	reduce using rule 21 (exp)
    GE  	reduce using rule 21 (exp)
    LT  	reduce using rule 21 (exp)
    LE  	reduce using rule 21 (exp)
    '(' 	[reduce using rule 21 (exp)]
    ')' 	reduce using rule 21 (exp)
    scalar_value	go to state 7
    exp 	go to state 30



state 53

    exp  ->  scalar_value BETWEEN scalar_value AND . scalar_value   (rule 13)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 33
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 54



state 54

    exp  ->  scalar_value BETWEEN scalar_value AND scalar_value .   (rule 13)

    $default	reduce using rule 13 (exp)



state 55

    $   	go to state 56



state 56

    $   	go to state 57



state 57

    $default	accept


