Conflict in state 12 between rule 21 and token AND resolved as reduce.
Conflict in state 12 between rule 21 and token NOT resolved as reduce.
Conflict in state 12 between rule 21 and token OR resolved as shift.
Conflict in state 12 between rule 21 and token SUB resolved as shift.
Conflict in state 12 between rule 21 and token XOR resolved as shift.
Conflict in state 12 between rule 21 and token RANGE resolved as shift.
Conflict in state 12 between rule 21 and token EQ resolved as shift.
Conflict in state 12 between rule 21 and token NOTEQ resolved as shift.
Conflict in state 12 between rule 21 and token GT resolved as shift.
Conflict in state 12 between rule 21 and token GE resolved as shift.
Conflict in state 12 between rule 21 and token LT resolved as shift.
Conflict in state 12 between rule 21 and token LE resolved as shift.
Conflict in state 31 between rule 8 and token AND resolved as reduce.
Conflict in state 31 between rule 8 and token NOT resolved as shift.
Conflict in state 31 between rule 8 and token OR resolved as shift.
Conflict in state 31 between rule 8 and token SUB resolved as shift.
Conflict in state 31 between rule 8 and token XOR resolved as shift.
Conflict in state 31 between rule 8 and token RANGE resolved as shift.
Conflict in state 31 between rule 8 and token EQ resolved as shift.
Conflict in state 31 between rule 8 and token NOTEQ resolved as shift.
Conflict in state 31 between rule 8 and token GT resolved as shift.
Conflict in state 31 between rule 8 and token GE resolved as shift.
Conflict in state 31 between rule 8 and token LT resolved as shift.
Conflict in state 31 between rule 8 and token LE resolved as shift.
Conflict in state 33 between rule 20 and token AND resolved as reduce.
Conflict in state 33 between rule 20 and token NOT resolved as reduce.
Conflict in state 33 between rule 20 and token OR resolved as shift.
Conflict in state 33 between rule 20 and token SUB resolved as shift.
Conflict in state 33 between rule 20 and token XOR resolved as shift.
Conflict in state 33 between rule 20 and token RANGE resolved as shift.
Conflict in state 33 between rule 20 and token EQ resolved as shift.
Conflict in state 33 between rule 20 and token NOTEQ resolved as shift.
Conflict in state 33 between rule 20 and token GT resolved as shift.
Conflict in state 33 between rule 20 and token GE resolved as shift.
Conflict in state 33 between rule 20 and token LT resolved as shift.
Conflict in state 33 between rule 20 and token LE resolved as shift.
Conflict in state 33 between rule 21 and token OR resolved as shift.
Conflict in state 33 between rule 21 and token SUB resolved as shift.
Conflict in state 33 between rule 21 and token XOR resolved as shift.
Conflict in state 33 between rule 21 and token RANGE resolved as shift.
Conflict in state 33 between rule 21 and token EQ resolved as shift.
Conflict in state 33 between rule 21 and token NOTEQ resolved as shift.
Conflict in state 33 between rule 21 and token GT resolved as shift.
Conflict in state 33 between rule 21 and token GE resolved as shift.
Conflict in state 33 between rule 21 and token LT resolved as shift.
Conflict in state 33 between rule 21 and token LE resolved as shift.
Conflict in state 35 between rule 10 and token AND resolved as reduce.
Conflict in state 35 between rule 10 and token NOT resolved as reduce.
Conflict in state 35 between rule 10 and token OR resolved as reduce.
Conflict in state 35 between rule 10 and token SUB resolved as shift.
Conflict in state 35 between rule 10 and token XOR resolved as shift.
Conflict in state 35 between rule 10 and token RANGE resolved as shift.
Conflict in state 35 between rule 10 and token EQ resolved as shift.
Conflict in state 35 between rule 10 and token NOTEQ resolved as shift.
Conflict in state 35 between rule 10 and token GT resolved as shift.
Conflict in state 35 between rule 10 and token GE resolved as shift.
Conflict in state 35 between rule 10 and token LT resolved as shift.
Conflict in state 35 between rule 10 and token LE resolved as shift.
Conflict in state 37 between rule 9 and token AND resolved as reduce.
Conflict in state 37 between rule 9 and token NOT resolved as reduce.
Conflict in state 37 between rule 9 and token OR resolved as reduce.
Conflict in state 37 between rule 9 and token SUB resolved as reduce.
Conflict in state 37 between rule 9 and token XOR resolved as shift.
Conflict in state 37 between rule 9 and token RANGE resolved as shift.
Conflict in state 37 between rule 9 and token EQ resolved as shift.
Conflict in state 37 between rule 9 and token NOTEQ resolved as shift.
Conflict in state 37 between rule 9 and token GT resolved as shift.
Conflict in state 37 between rule 9 and token GE resolved as shift.
Conflict in state 37 between rule 9 and token LT resolved as shift.
Conflict in state 37 between rule 9 and token LE resolved as shift.
Conflict in state 39 between rule 11 and token AND resolved as reduce.
Conflict in state 39 between rule 11 and token NOT resolved as reduce.
Conflict in state 39 between rule 11 and token OR resolved as reduce.
Conflict in state 39 between rule 11 and token SUB resolved as reduce.
Conflict in state 39 between rule 11 and token XOR resolved as reduce.
Conflict in state 39 between rule 11 and token RANGE resolved as shift.
Conflict in state 39 between rule 11 and token EQ resolved as shift.
Conflict in state 39 between rule 11 and token NOTEQ resolved as shift.
Conflict in state 39 between rule 11 and token GT resolved as shift.
Conflict in state 39 between rule 11 and token GE resolved as shift.
Conflict in state 39 between rule 11 and token LT resolved as shift.
Conflict in state 39 between rule 11 and token LE resolved as shift.
Conflict in state 40 between rule 12 and token AND resolved as reduce.
Conflict in state 40 between rule 12 and token NOT resolved as reduce.
Conflict in state 40 between rule 12 and token OR resolved as reduce.
Conflict in state 40 between rule 12 and token SUB resolved as reduce.
Conflict in state 40 between rule 12 and token XOR resolved as reduce.
Conflict in state 40 between rule 12 and token RANGE resolved as reduce.
Conflict in state 40 between rule 12 and token EQ resolved as shift.
Conflict in state 40 between rule 12 and token NOTEQ resolved as shift.
Conflict in state 40 between rule 12 and token GT resolved as shift.
Conflict in state 40 between rule 12 and token GE resolved as shift.
Conflict in state 40 between rule 12 and token LT resolved as shift.
Conflict in state 40 between rule 12 and token LE resolved as shift.
Conflict in state 41 between rule 13 and token AND resolved as reduce.
Conflict in state 41 between rule 13 and token NOT resolved as reduce.
Conflict in state 41 between rule 13 and token OR resolved as reduce.
Conflict in state 41 between rule 13 and token SUB resolved as reduce.
Conflict in state 41 between rule 13 and token XOR resolved as reduce.
Conflict in state 41 between rule 13 and token RANGE resolved as reduce.
Conflict in state 41 between rule 13 and token EQ resolved as reduce.
Conflict in state 41 between rule 13 and token NOTEQ resolved as shift.
Conflict in state 41 between rule 13 and token GT resolved as shift.
Conflict in state 41 between rule 13 and token GE resolved as shift.
Conflict in state 41 between rule 13 and token LT resolved as shift.
Conflict in state 41 between rule 13 and token LE resolved as shift.
Conflict in state 42 between rule 14 and token AND resolved as reduce.
Conflict in state 42 between rule 14 and token NOT resolved as reduce.
Conflict in state 42 between rule 14 and token OR resolved as reduce.
Conflict in state 42 between rule 14 and token SUB resolved as reduce.
Conflict in state 42 between rule 14 and token XOR resolved as reduce.
Conflict in state 42 between rule 14 and token RANGE resolved as reduce.
Conflict in state 42 between rule 14 and token EQ resolved as reduce.
Conflict in state 42 between rule 14 and token NOTEQ resolved as reduce.
Conflict in state 42 between rule 14 and token GT resolved as shift.
Conflict in state 42 between rule 14 and token GE resolved as shift.
Conflict in state 42 between rule 14 and token LT resolved as shift.
Conflict in state 42 between rule 14 and token LE resolved as shift.
Conflict in state 43 between rule 15 and token AND resolved as reduce.
Conflict in state 43 between rule 15 and token NOT resolved as reduce.
Conflict in state 43 between rule 15 and token OR resolved as reduce.
Conflict in state 43 between rule 15 and token SUB resolved as reduce.
Conflict in state 43 between rule 15 and token XOR resolved as reduce.
Conflict in state 43 between rule 15 and token RANGE resolved as reduce.
Conflict in state 43 between rule 15 and token EQ resolved as reduce.
Conflict in state 43 between rule 15 and token NOTEQ resolved as reduce.
Conflict in state 43 between rule 15 and token GT resolved as reduce.
Conflict in state 43 between rule 15 and token GE resolved as shift.
Conflict in state 43 between rule 15 and token LT resolved as shift.
Conflict in state 43 between rule 15 and token LE resolved as shift.
Conflict in state 44 between rule 16 and token AND resolved as reduce.
Conflict in state 44 between rule 16 and token NOT resolved as reduce.
Conflict in state 44 between rule 16 and token OR resolved as reduce.
Conflict in state 44 between rule 16 and token SUB resolved as reduce.
Conflict in state 44 between rule 16 and token XOR resolved as reduce.
Conflict in state 44 between rule 16 and token RANGE resolved as reduce.
Conflict in state 44 between rule 16 and token EQ resolved as reduce.
Conflict in state 44 between rule 16 and token NOTEQ resolved as reduce.
Conflict in state 44 between rule 16 and token GT resolved as reduce.
Conflict in state 44 between rule 16 and token GE resolved as reduce.
Conflict in state 44 between rule 16 and token LT resolved as shift.
Conflict in state 44 between rule 16 and token LE resolved as shift.
Conflict in state 45 between rule 17 and token AND resolved as reduce.
Conflict in state 45 between rule 17 and token NOT resolved as reduce.
Conflict in state 45 between rule 17 and token OR resolved as reduce.
Conflict in state 45 between rule 17 and token SUB resolved as reduce.
Conflict in state 45 between rule 17 and token XOR resolved as reduce.
Conflict in state 45 between rule 17 and token RANGE resolved as reduce.
Conflict in state 45 between rule 17 and token EQ resolved as reduce.
Conflict in state 45 between rule 17 and token NOTEQ resolved as reduce.
Conflict in state 45 between rule 17 and token GT resolved as reduce.
Conflict in state 45 between rule 17 and token GE resolved as reduce.
Conflict in state 45 between rule 17 and token LT resolved as reduce.
Conflict in state 45 between rule 17 and token LE resolved as shift.
Conflict in state 46 between rule 18 and token AND resolved as reduce.
Conflict in state 46 between rule 18 and token NOT resolved as reduce.
Conflict in state 46 between rule 18 and token OR resolved as reduce.
Conflict in state 46 between rule 18 and token SUB resolved as reduce.
Conflict in state 46 between rule 18 and token XOR resolved as reduce.
Conflict in state 46 between rule 18 and token RANGE resolved as reduce.
Conflict in state 46 between rule 18 and token EQ resolved as reduce.
Conflict in state 46 between rule 18 and token NOTEQ resolved as reduce.
Conflict in state 46 between rule 18 and token GT resolved as reduce.
Conflict in state 46 between rule 18 and token GE resolved as reduce.
Conflict in state 46 between rule 18 and token LT resolved as reduce.
Conflict in state 46 between rule 18 and token LE resolved as reduce.


State 3 contains 1 shift/reduce conflict.
State 12 contains 5 shift/reduce conflicts.
State 14 contains 3 shift/reduce conflicts.
State 27 contains 17 shift/reduce conflicts.
State 28 contains 3 shift/reduce conflicts and 18 reduce/reduce conflicts.
State 29 contains 19 reduce/reduce conflicts.
State 30 contains 3 shift/reduce conflicts.
State 31 contains 5 shift/reduce conflicts.
State 32 contains 3 shift/reduce conflicts.
State 33 contains 5 shift/reduce conflicts and 9 reduce/reduce conflicts.
State 34 contains 3 shift/reduce conflicts.
State 35 contains 5 shift/reduce conflicts.
State 36 contains 3 shift/reduce conflicts.
State 37 contains 5 shift/reduce conflicts.
State 38 contains 3 shift/reduce conflicts.
State 39 contains 5 shift/reduce conflicts.
State 40 contains 5 shift/reduce conflicts.
State 41 contains 5 shift/reduce conflicts.
State 42 contains 5 shift/reduce conflicts.
State 43 contains 5 shift/reduce conflicts.
State 44 contains 5 shift/reduce conflicts.
State 45 contains 5 shift/reduce conflicts.
State 46 contains 5 shift/reduce conflicts.


Grammar

  Number, Line, Rule
    1  90 input -> exp
    2 100 exp -> NUM_INT
    3 108 exp -> STRING
    4 114 exp -> IDENT
    5 119 exp -> STRING IDENT
    6 128 exp -> exp exp
    7 139 exp -> '(' exp ')'
    8 149 exp -> exp AND exp
    9 154 exp -> exp SUB exp
   10 159 exp -> exp OR exp
   11 164 exp -> exp XOR exp
   12 169 exp -> exp RANGE exp
   13 174 exp -> exp EQ exp
   14 179 exp -> exp NOTEQ exp
   15 183 exp -> exp GT exp
   16 187 exp -> exp GE exp
   17 191 exp -> exp LT exp
   18 195 exp -> exp LE exp
   19 199 exp -> '(' exp ')'
   20 204 exp -> exp NOT exp
   21 209 exp -> NOT exp
   22 218 exp -> error STRING
   23 227 exp -> error IDENT
   24 236 exp -> error NUM_INT
   25 245 exp -> exp error
   26 257 exp -> '(' exp error
   27 267 exp -> exp OR error
   28 277 exp -> exp XOR error
   29 287 exp -> exp NOT error
   30 297 exp -> exp AND error
   31 307 exp -> exp SUB error


Terminals, with rules where they appear

$ (-1)
'(' (40) 7 19 26
')' (41) 7 19
error (256) 22 23 24 25 26 27 28 29 30 31
IDENT (257) 4 5 23
STRING (258) 3 5 22
NUM_INT (259) 2 24
AND (260) 8 30
NOT (261) 20 21 29
OR (262) 10 27
SUB (263) 9 31
XOR (264) 11 28
RANGE (265) 12
EQ (266) 13
NOTEQ (267) 14
GT (268) 15
GE (269) 16
LT (270) 17
LE (271) 18


Nonterminals, with rules where they appear

input (20)
    on left: 1
exp (21)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28 29 30 31, on right: 1 6 7 8 9 10 11 12 13 14
    15 16 17 18 19 20 21 25 26 27 28 29 30 31


state 0

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    input	go to state 47
    exp 	go to state 7



state 1

    exp  ->  error . STRING   (rule 22)
    exp  ->  error . IDENT   (rule 23)
    exp  ->  error . NUM_INT   (rule 24)

    IDENT	shift, and go to state 8
    STRING	shift, and go to state 9
    NUM_INT	shift, and go to state 10



state 2

    exp  ->  IDENT .   (rule 4)

    $default	reduce using rule 4 (exp)



state 3

    exp  ->  STRING .   (rule 3)
    exp  ->  STRING . IDENT   (rule 5)

    IDENT	shift, and go to state 11

    IDENT	[reduce using rule 3 (exp)]
    $default	reduce using rule 3 (exp)



state 4

    exp  ->  NUM_INT .   (rule 2)

    $default	reduce using rule 2 (exp)



state 5

    exp  ->  NOT . exp   (rule 21)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 12



state 6

    exp  ->  '(' . exp ')'   (rule 7)
    exp  ->  '(' . exp ')'   (rule 19)
    exp  ->  '(' . exp error   (rule 26)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 13



state 7

    input  ->  exp .   (rule 1)
    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 15
    NOT 	shift, and go to state 16
    OR  	shift, and go to state 17
    SUB 	shift, and go to state 18
    XOR 	shift, and go to state 19
    RANGE	shift, and go to state 20
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 1 (input)
    exp 	go to state 27



state 8

    exp  ->  error IDENT .   (rule 23)

    $default	reduce using rule 23 (exp)



state 9

    exp  ->  error STRING .   (rule 22)

    $default	reduce using rule 22 (exp)



state 10

    exp  ->  error NUM_INT .   (rule 24)

    $default	reduce using rule 24 (exp)



state 11

    exp  ->  STRING IDENT .   (rule 5)

    $default	reduce using rule 5 (exp)



state 12

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  NOT exp .   (rule 21)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    OR  	shift, and go to state 17
    SUB 	shift, and go to state 18
    XOR 	shift, and go to state 19
    RANGE	shift, and go to state 20
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 21 (exp)
    error	[reduce using rule 21 (exp)]
    IDENT	[reduce using rule 21 (exp)]
    STRING	[reduce using rule 21 (exp)]
    NUM_INT	[reduce using rule 21 (exp)]
    AND 	reduce using rule 21 (exp)
    NOT 	reduce using rule 21 (exp)
    '(' 	[reduce using rule 21 (exp)]
    ')' 	reduce using rule 21 (exp)
    exp 	go to state 27



state 13

    exp  ->  exp . exp   (rule 6)
    exp  ->  '(' exp . ')'   (rule 7)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  '(' exp . ')'   (rule 19)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  '(' exp . error   (rule 26)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 28
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 15
    NOT 	shift, and go to state 16
    OR  	shift, and go to state 17
    SUB 	shift, and go to state 18
    XOR 	shift, and go to state 19
    RANGE	shift, and go to state 20
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6
    ')' 	shift, and go to state 29

    exp 	go to state 27



state 14

    exp  ->  error . STRING   (rule 22)
    exp  ->  error . IDENT   (rule 23)
    exp  ->  error . NUM_INT   (rule 24)
    exp  ->  exp error .   (rule 25)

    IDENT	shift, and go to state 8
    STRING	shift, and go to state 9
    NUM_INT	shift, and go to state 10

    IDENT	[reduce using rule 25 (exp)]
    STRING	[reduce using rule 25 (exp)]
    NUM_INT	[reduce using rule 25 (exp)]
    $default	reduce using rule 25 (exp)



state 15

    exp  ->  exp AND . exp   (rule 8)
    exp  ->  exp AND . error   (rule 30)

    error	shift, and go to state 30
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 31



state 16

    exp  ->  exp NOT . exp   (rule 20)
    exp  ->  NOT . exp   (rule 21)
    exp  ->  exp NOT . error   (rule 29)

    error	shift, and go to state 32
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 33



state 17

    exp  ->  exp OR . exp   (rule 10)
    exp  ->  exp OR . error   (rule 27)

    error	shift, and go to state 34
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 35



state 18

    exp  ->  exp SUB . exp   (rule 9)
    exp  ->  exp SUB . error   (rule 31)

    error	shift, and go to state 36
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 37



state 19

    exp  ->  exp XOR . exp   (rule 11)
    exp  ->  exp XOR . error   (rule 28)

    error	shift, and go to state 38
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 39



state 20

    exp  ->  exp RANGE . exp   (rule 12)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 40



state 21

    exp  ->  exp EQ . exp   (rule 13)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 41



state 22

    exp  ->  exp NOTEQ . exp   (rule 14)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 42



state 23

    exp  ->  exp GT . exp   (rule 15)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 43



state 24

    exp  ->  exp GE . exp   (rule 16)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 44



state 25

    exp  ->  exp LT . exp   (rule 17)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 45



state 26

    exp  ->  exp LE . exp   (rule 18)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    exp 	go to state 46



state 27

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp exp .   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 15
    NOT 	shift, and go to state 16
    OR  	shift, and go to state 17
    SUB 	shift, and go to state 18
    XOR 	shift, and go to state 19
    RANGE	shift, and go to state 20
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 6 (exp)
    error	[reduce using rule 6 (exp)]
    IDENT	[reduce using rule 6 (exp)]
    STRING	[reduce using rule 6 (exp)]
    NUM_INT	[reduce using rule 6 (exp)]
    AND 	[reduce using rule 6 (exp)]
    NOT 	[reduce using rule 6 (exp)]
    OR  	[reduce using rule 6 (exp)]
    SUB 	[reduce using rule 6 (exp)]
    XOR 	[reduce using rule 6 (exp)]
    RANGE	[reduce using rule 6 (exp)]
    EQ  	[reduce using rule 6 (exp)]
    NOTEQ	[reduce using rule 6 (exp)]
    GT  	[reduce using rule 6 (exp)]
    GE  	[reduce using rule 6 (exp)]
    LT  	[reduce using rule 6 (exp)]
    LE  	[reduce using rule 6 (exp)]
    '(' 	[reduce using rule 6 (exp)]
    ')' 	reduce using rule 6 (exp)
    exp 	go to state 27



state 28

    exp  ->  error . STRING   (rule 22)
    exp  ->  error . IDENT   (rule 23)
    exp  ->  error . NUM_INT   (rule 24)
    exp  ->  exp error .   (rule 25)
    exp  ->  '(' exp error .   (rule 26)

    IDENT	shift, and go to state 8
    STRING	shift, and go to state 9
    NUM_INT	shift, and go to state 10

    $   	reduce using rule 26 (exp)
    error	reduce using rule 25 (exp)
    error	[reduce using rule 26 (exp)]
    IDENT	[reduce using rule 25 (exp)]
    IDENT	[reduce using rule 26 (exp)]
    STRING	[reduce using rule 25 (exp)]
    STRING	[reduce using rule 26 (exp)]
    NUM_INT	[reduce using rule 25 (exp)]
    NUM_INT	[reduce using rule 26 (exp)]
    AND 	reduce using rule 25 (exp)
    AND 	[reduce using rule 26 (exp)]
    NOT 	reduce using rule 25 (exp)
    NOT 	[reduce using rule 26 (exp)]
    OR  	reduce using rule 25 (exp)
    OR  	[reduce using rule 26 (exp)]
    SUB 	reduce using rule 25 (exp)
    SUB 	[reduce using rule 26 (exp)]
    XOR 	reduce using rule 25 (exp)
    XOR 	[reduce using rule 26 (exp)]
    RANGE	reduce using rule 25 (exp)
    RANGE	[reduce using rule 26 (exp)]
    EQ  	reduce using rule 25 (exp)
    EQ  	[reduce using rule 26 (exp)]
    NOTEQ	reduce using rule 25 (exp)
    NOTEQ	[reduce using rule 26 (exp)]
    GT  	reduce using rule 25 (exp)
    GT  	[reduce using rule 26 (exp)]
    GE  	reduce using rule 25 (exp)
    GE  	[reduce using rule 26 (exp)]
    LT  	reduce using rule 25 (exp)
    LT  	[reduce using rule 26 (exp)]
    LE  	reduce using rule 25 (exp)
    LE  	[reduce using rule 26 (exp)]
    '(' 	reduce using rule 25 (exp)
    '(' 	[reduce using rule 26 (exp)]
    ')' 	reduce using rule 25 (exp)
    ')' 	[reduce using rule 26 (exp)]
    $default	reduce using rule 25 (exp)


state 29

    exp  ->  '(' exp ')' .   (rule 7)
    exp  ->  '(' exp ')' .   (rule 19)

    $   	reduce using rule 7 (exp)
    $   	[reduce using rule 19 (exp)]
    error	reduce using rule 7 (exp)
    error	[reduce using rule 19 (exp)]
    IDENT	reduce using rule 7 (exp)
    IDENT	[reduce using rule 19 (exp)]
    STRING	reduce using rule 7 (exp)
    STRING	[reduce using rule 19 (exp)]
    NUM_INT	reduce using rule 7 (exp)
    NUM_INT	[reduce using rule 19 (exp)]
    AND 	reduce using rule 7 (exp)
    AND 	[reduce using rule 19 (exp)]
    NOT 	reduce using rule 7 (exp)
    NOT 	[reduce using rule 19 (exp)]
    OR  	reduce using rule 7 (exp)
    OR  	[reduce using rule 19 (exp)]
    SUB 	reduce using rule 7 (exp)
    SUB 	[reduce using rule 19 (exp)]
    XOR 	reduce using rule 7 (exp)
    XOR 	[reduce using rule 19 (exp)]
    RANGE	reduce using rule 7 (exp)
    RANGE	[reduce using rule 19 (exp)]
    EQ  	reduce using rule 7 (exp)
    EQ  	[reduce using rule 19 (exp)]
    NOTEQ	reduce using rule 7 (exp)
    NOTEQ	[reduce using rule 19 (exp)]
    GT  	reduce using rule 7 (exp)
    GT  	[reduce using rule 19 (exp)]
    GE  	reduce using rule 7 (exp)
    GE  	[reduce using rule 19 (exp)]
    LT  	reduce using rule 7 (exp)
    LT  	[reduce using rule 19 (exp)]
    LE  	reduce using rule 7 (exp)
    LE  	[reduce using rule 19 (exp)]
    '(' 	reduce using rule 7 (exp)
    '(' 	[reduce using rule 19 (exp)]
    ')' 	reduce using rule 7 (exp)
    ')' 	[reduce using rule 19 (exp)]
    $default	reduce using rule 7 (exp)


state 30

    exp  ->  error . STRING   (rule 22)
    exp  ->  error . IDENT   (rule 23)
    exp  ->  error . NUM_INT   (rule 24)
    exp  ->  exp AND error .   (rule 30)

    IDENT	shift, and go to state 8
    STRING	shift, and go to state 9
    NUM_INT	shift, and go to state 10

    IDENT	[reduce using rule 30 (exp)]
    STRING	[reduce using rule 30 (exp)]
    NUM_INT	[reduce using rule 30 (exp)]
    $default	reduce using rule 30 (exp)



state 31

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp AND exp .   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 16
    OR  	shift, and go to state 17
    SUB 	shift, and go to state 18
    XOR 	shift, and go to state 19
    RANGE	shift, and go to state 20
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 8 (exp)
    error	[reduce using rule 8 (exp)]
    IDENT	[reduce using rule 8 (exp)]
    STRING	[reduce using rule 8 (exp)]
    NUM_INT	[reduce using rule 8 (exp)]
    AND 	reduce using rule 8 (exp)
    '(' 	[reduce using rule 8 (exp)]
    ')' 	reduce using rule 8 (exp)
    exp 	go to state 27



state 32

    exp  ->  error . STRING   (rule 22)
    exp  ->  error . IDENT   (rule 23)
    exp  ->  error . NUM_INT   (rule 24)
    exp  ->  exp NOT error .   (rule 29)

    IDENT	shift, and go to state 8
    STRING	shift, and go to state 9
    NUM_INT	shift, and go to state 10

    IDENT	[reduce using rule 29 (exp)]
    STRING	[reduce using rule 29 (exp)]
    NUM_INT	[reduce using rule 29 (exp)]
    $default	reduce using rule 29 (exp)



state 33

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp NOT exp .   (rule 20)
    exp  ->  NOT exp .   (rule 21)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    OR  	shift, and go to state 17
    SUB 	shift, and go to state 18
    XOR 	shift, and go to state 19
    RANGE	shift, and go to state 20
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 20 (exp)
    $   	[reduce using rule 21 (exp)]
    error	[reduce using rule 20 (exp)]
    error	[reduce using rule 21 (exp)]
    IDENT	[reduce using rule 20 (exp)]
    IDENT	[reduce using rule 21 (exp)]
    STRING	[reduce using rule 20 (exp)]
    STRING	[reduce using rule 21 (exp)]
    NUM_INT	[reduce using rule 20 (exp)]
    NUM_INT	[reduce using rule 21 (exp)]
    AND 	reduce using rule 20 (exp)
    AND 	[reduce using rule 21 (exp)]
    NOT 	reduce using rule 20 (exp)
    NOT 	[reduce using rule 21 (exp)]
    '(' 	[reduce using rule 20 (exp)]
    '(' 	[reduce using rule 21 (exp)]
    ')' 	reduce using rule 20 (exp)
    ')' 	[reduce using rule 21 (exp)]
    exp 	go to state 27



state 34

    exp  ->  error . STRING   (rule 22)
    exp  ->  error . IDENT   (rule 23)
    exp  ->  error . NUM_INT   (rule 24)
    exp  ->  exp OR error .   (rule 27)

    IDENT	shift, and go to state 8
    STRING	shift, and go to state 9
    NUM_INT	shift, and go to state 10

    IDENT	[reduce using rule 27 (exp)]
    STRING	[reduce using rule 27 (exp)]
    NUM_INT	[reduce using rule 27 (exp)]
    $default	reduce using rule 27 (exp)



state 35

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp OR exp .   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    SUB 	shift, and go to state 18
    XOR 	shift, and go to state 19
    RANGE	shift, and go to state 20
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 10 (exp)
    error	[reduce using rule 10 (exp)]
    IDENT	[reduce using rule 10 (exp)]
    STRING	[reduce using rule 10 (exp)]
    NUM_INT	[reduce using rule 10 (exp)]
    AND 	reduce using rule 10 (exp)
    NOT 	reduce using rule 10 (exp)
    OR  	reduce using rule 10 (exp)
    '(' 	[reduce using rule 10 (exp)]
    ')' 	reduce using rule 10 (exp)
    exp 	go to state 27



state 36

    exp  ->  error . STRING   (rule 22)
    exp  ->  error . IDENT   (rule 23)
    exp  ->  error . NUM_INT   (rule 24)
    exp  ->  exp SUB error .   (rule 31)

    IDENT	shift, and go to state 8
    STRING	shift, and go to state 9
    NUM_INT	shift, and go to state 10

    IDENT	[reduce using rule 31 (exp)]
    STRING	[reduce using rule 31 (exp)]
    NUM_INT	[reduce using rule 31 (exp)]
    $default	reduce using rule 31 (exp)



state 37

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp SUB exp .   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    XOR 	shift, and go to state 19
    RANGE	shift, and go to state 20
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 9 (exp)
    error	[reduce using rule 9 (exp)]
    IDENT	[reduce using rule 9 (exp)]
    STRING	[reduce using rule 9 (exp)]
    NUM_INT	[reduce using rule 9 (exp)]
    AND 	reduce using rule 9 (exp)
    NOT 	reduce using rule 9 (exp)
    OR  	reduce using rule 9 (exp)
    SUB 	reduce using rule 9 (exp)
    '(' 	[reduce using rule 9 (exp)]
    ')' 	reduce using rule 9 (exp)
    exp 	go to state 27



state 38

    exp  ->  error . STRING   (rule 22)
    exp  ->  error . IDENT   (rule 23)
    exp  ->  error . NUM_INT   (rule 24)
    exp  ->  exp XOR error .   (rule 28)

    IDENT	shift, and go to state 8
    STRING	shift, and go to state 9
    NUM_INT	shift, and go to state 10

    IDENT	[reduce using rule 28 (exp)]
    STRING	[reduce using rule 28 (exp)]
    NUM_INT	[reduce using rule 28 (exp)]
    $default	reduce using rule 28 (exp)



state 39

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp XOR exp .   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    RANGE	shift, and go to state 20
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 11 (exp)
    error	[reduce using rule 11 (exp)]
    IDENT	[reduce using rule 11 (exp)]
    STRING	[reduce using rule 11 (exp)]
    NUM_INT	[reduce using rule 11 (exp)]
    AND 	reduce using rule 11 (exp)
    NOT 	reduce using rule 11 (exp)
    OR  	reduce using rule 11 (exp)
    SUB 	reduce using rule 11 (exp)
    XOR 	reduce using rule 11 (exp)
    '(' 	[reduce using rule 11 (exp)]
    ')' 	reduce using rule 11 (exp)
    exp 	go to state 27



state 40

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp RANGE exp .   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    EQ  	shift, and go to state 21
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 12 (exp)
    error	[reduce using rule 12 (exp)]
    IDENT	[reduce using rule 12 (exp)]
    STRING	[reduce using rule 12 (exp)]
    NUM_INT	[reduce using rule 12 (exp)]
    AND 	reduce using rule 12 (exp)
    NOT 	reduce using rule 12 (exp)
    OR  	reduce using rule 12 (exp)
    SUB 	reduce using rule 12 (exp)
    XOR 	reduce using rule 12 (exp)
    RANGE	reduce using rule 12 (exp)
    '(' 	[reduce using rule 12 (exp)]
    ')' 	reduce using rule 12 (exp)
    exp 	go to state 27



state 41

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp EQ exp .   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOTEQ	shift, and go to state 22
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 13 (exp)
    error	[reduce using rule 13 (exp)]
    IDENT	[reduce using rule 13 (exp)]
    STRING	[reduce using rule 13 (exp)]
    NUM_INT	[reduce using rule 13 (exp)]
    AND 	reduce using rule 13 (exp)
    NOT 	reduce using rule 13 (exp)
    OR  	reduce using rule 13 (exp)
    SUB 	reduce using rule 13 (exp)
    XOR 	reduce using rule 13 (exp)
    RANGE	reduce using rule 13 (exp)
    EQ  	reduce using rule 13 (exp)
    '(' 	[reduce using rule 13 (exp)]
    ')' 	reduce using rule 13 (exp)
    exp 	go to state 27



state 42

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp NOTEQ exp .   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    GT  	shift, and go to state 23
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 14 (exp)
    error	[reduce using rule 14 (exp)]
    IDENT	[reduce using rule 14 (exp)]
    STRING	[reduce using rule 14 (exp)]
    NUM_INT	[reduce using rule 14 (exp)]
    AND 	reduce using rule 14 (exp)
    NOT 	reduce using rule 14 (exp)
    OR  	reduce using rule 14 (exp)
    SUB 	reduce using rule 14 (exp)
    XOR 	reduce using rule 14 (exp)
    RANGE	reduce using rule 14 (exp)
    EQ  	reduce using rule 14 (exp)
    NOTEQ	reduce using rule 14 (exp)
    '(' 	[reduce using rule 14 (exp)]
    ')' 	reduce using rule 14 (exp)
    exp 	go to state 27



state 43

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp GT exp .   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    GE  	shift, and go to state 24
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 15 (exp)
    error	[reduce using rule 15 (exp)]
    IDENT	[reduce using rule 15 (exp)]
    STRING	[reduce using rule 15 (exp)]
    NUM_INT	[reduce using rule 15 (exp)]
    AND 	reduce using rule 15 (exp)
    NOT 	reduce using rule 15 (exp)
    OR  	reduce using rule 15 (exp)
    SUB 	reduce using rule 15 (exp)
    XOR 	reduce using rule 15 (exp)
    RANGE	reduce using rule 15 (exp)
    EQ  	reduce using rule 15 (exp)
    NOTEQ	reduce using rule 15 (exp)
    GT  	reduce using rule 15 (exp)
    '(' 	[reduce using rule 15 (exp)]
    ')' 	reduce using rule 15 (exp)
    exp 	go to state 27



state 44

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp GE exp .   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    LT  	shift, and go to state 25
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 16 (exp)
    error	[reduce using rule 16 (exp)]
    IDENT	[reduce using rule 16 (exp)]
    STRING	[reduce using rule 16 (exp)]
    NUM_INT	[reduce using rule 16 (exp)]
    AND 	reduce using rule 16 (exp)
    NOT 	reduce using rule 16 (exp)
    OR  	reduce using rule 16 (exp)
    SUB 	reduce using rule 16 (exp)
    XOR 	reduce using rule 16 (exp)
    RANGE	reduce using rule 16 (exp)
    EQ  	reduce using rule 16 (exp)
    NOTEQ	reduce using rule 16 (exp)
    GT  	reduce using rule 16 (exp)
    GE  	reduce using rule 16 (exp)
    '(' 	[reduce using rule 16 (exp)]
    ')' 	reduce using rule 16 (exp)
    exp 	go to state 27



state 45

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp LT exp .   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    LE  	shift, and go to state 26
    '(' 	shift, and go to state 6

    $   	reduce using rule 17 (exp)
    error	[reduce using rule 17 (exp)]
    IDENT	[reduce using rule 17 (exp)]
    STRING	[reduce using rule 17 (exp)]
    NUM_INT	[reduce using rule 17 (exp)]
    AND 	reduce using rule 17 (exp)
    NOT 	reduce using rule 17 (exp)
    OR  	reduce using rule 17 (exp)
    SUB 	reduce using rule 17 (exp)
    XOR 	reduce using rule 17 (exp)
    RANGE	reduce using rule 17 (exp)
    EQ  	reduce using rule 17 (exp)
    NOTEQ	reduce using rule 17 (exp)
    GT  	reduce using rule 17 (exp)
    GE  	reduce using rule 17 (exp)
    LT  	reduce using rule 17 (exp)
    '(' 	[reduce using rule 17 (exp)]
    ')' 	reduce using rule 17 (exp)
    exp 	go to state 27



state 46

    exp  ->  exp . exp   (rule 6)
    exp  ->  exp . AND exp   (rule 8)
    exp  ->  exp . SUB exp   (rule 9)
    exp  ->  exp . OR exp   (rule 10)
    exp  ->  exp . XOR exp   (rule 11)
    exp  ->  exp . RANGE exp   (rule 12)
    exp  ->  exp . EQ exp   (rule 13)
    exp  ->  exp . NOTEQ exp   (rule 14)
    exp  ->  exp . GT exp   (rule 15)
    exp  ->  exp . GE exp   (rule 16)
    exp  ->  exp . LT exp   (rule 17)
    exp  ->  exp . LE exp   (rule 18)
    exp  ->  exp LE exp .   (rule 18)
    exp  ->  exp . NOT exp   (rule 20)
    exp  ->  exp . error   (rule 25)
    exp  ->  exp . OR error   (rule 27)
    exp  ->  exp . XOR error   (rule 28)
    exp  ->  exp . NOT error   (rule 29)
    exp  ->  exp . AND error   (rule 30)
    exp  ->  exp . SUB error   (rule 31)

    error	shift, and go to state 14
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    '(' 	shift, and go to state 6

    $   	reduce using rule 18 (exp)
    error	[reduce using rule 18 (exp)]
    IDENT	[reduce using rule 18 (exp)]
    STRING	[reduce using rule 18 (exp)]
    NUM_INT	[reduce using rule 18 (exp)]
    AND 	reduce using rule 18 (exp)
    NOT 	reduce using rule 18 (exp)
    OR  	reduce using rule 18 (exp)
    SUB 	reduce using rule 18 (exp)
    XOR 	reduce using rule 18 (exp)
    RANGE	reduce using rule 18 (exp)
    EQ  	reduce using rule 18 (exp)
    NOTEQ	reduce using rule 18 (exp)
    GT  	reduce using rule 18 (exp)
    GE  	reduce using rule 18 (exp)
    LT  	reduce using rule 18 (exp)
    LE  	reduce using rule 18 (exp)
    '(' 	[reduce using rule 18 (exp)]
    ')' 	reduce using rule 18 (exp)
    exp 	go to state 27



state 47

    $   	go to state 48



state 48

    $   	go to state 49



state 49

    $default	accept


