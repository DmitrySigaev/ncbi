(* ================================================================================
	maketests.met

	An AppleScript to compile some NCBI C++ Toolkit test applications with
	Metrowerks CodeWarrior.

	$Id: maketests.met,v 1.6 2001/01/04 21:27:39 vakatov Exp $
	
   ================================================================================ *)


property CREATEDEBUGPROJECTS : "TRUE" (* whether to create debug projects from scratch *)
property BUILDDEBUGBINS : "TRUE" (* whether to compile debug binaries *)

property CREATERELEASEPROJECTS : "FALSE" (* whether to create release projects from scratch *)
property BUILDRELEASEBINS : "FALSE" (* whether to compile optimized release binaries *)

property CPPROOT : "cxx:" (* head of C++ toolkit tree within CodeWarrior folder *)

--property DOSOCKETS : "FALSE" (* whether to create/compile socket libs *)
--property NCSASOCKDIR : "ncbi:connect:ncsasock:" (* location of ncsasock files within CodeWarrior folder *)


(* ==== These symbols will be derived ==== *)

global HARDDISK
global METRO
global METROWERKSCW
--global OTLIB

global NCBICPP

global SOURCEFILES
global INCLUDEFILES
global LIBRARIES
global BINARIES

global DODEBUG
--global DOOPENTPT
--global NCSASOCK

(* ==== These subroutines set paths and other preferences during population ==== *)

on DoSetGlobals()
	tell application "Finder"
		
		set HARDDISK to startup disk as string
		set METRO to HARDDISK & "Metrowerks CodeWarrior 6.0:" as string
		set METROWERKSCW to METRO & "Metrowerks CodeWarrior:" as string
		--set OTLIB to METROWERKSCW & "MacOS Support:OpenTransport:Open Tpt Client Developer:PPC Libraries:"
		
		set NCBICPP to METRO & CPPROOT as string
		
		set SOURCEFILES to NCBICPP & "src:" as string
		set INCLUDEFILES to NCBICPP & "include:" as string
		set LIBRARIES to NCBICPP & "compilers:mac_prj:lib:" as string
		set BINARIES to NCBICPP & "compilers:mac_prj:bin:" as string
		
		(*
		if DOSOCKETS = "TRUE" then
			set NCSASOCK to METRO & NCSASOCKDIR as string
			if (exists (folder OTLIB)) then
				set DOOPENTPT to "TRUE"
			else
				set DOOPENTPT to "FALSE"
				display dialog "Did not find OpenTransport folder inside MacOS Support folder" & return & Â
					return & "Will use MacTCP interfaces to build networking" & return Â
					buttons "OK" default button 1
			end if
		end if
*)
		
	end tell
end DoSetGlobals

on CreateFolders()
	tell application "Finder"
		
		if not (exists (folder BINARIES)) then
			make new folder at folder (NCBICPP & "compilers:mac_prj:") with properties {name:"bin"}
		end if
		
	end tell
end CreateFolders

on DoSetDebugPreferences()
	tell application "CodeWarrior IDE 4.1"
		
		(* ==== ONLY settings that are directly relevant to debugging and optimization should go here! ==== *)
		
		if DODEBUG = "TRUE" then
			(* ===== Panel PPC Global Optimizer =====  *)
			Set Preferences of panel "PPC Global Optimizer" to Â
				{Optimize For:code_Speed, Level:0}
			(* ===== Panel PPC Linker ===== *)
			Set Preferences of panel "PPC Linker" to Â
				{Generate SYM File:true Â
					, Suppress Warnings:false}
			(* ===== Panel C/C++ Language =====  *)
			Set Preferences of panel "C/C++ Compiler" to Â
				{Inlining:inline_none Â
					, AutoInlining:false Â
					, Prefix File:"debug.pfx"}
			
		else
			(* ==== optimized/release settings ==== *)
			(* ===== Panel PPC Global Optimizer =====  *)
			Set Preferences of panel "PPC Global Optimizer" to Â
				{Optimize For:code_Speed, Level:4}
			(* ===== Panel PPC Linker ===== *)
			Set Preferences of panel "PPC Linker" to Â
				{Generate SYM File:false Â
					, Suppress Warnings:true}
			(* ===== Panel C/C++ Language =====  *)
			Set Preferences of panel "C/C++ Compiler" to Â
				{Inlining:inline_smart Â
					, AutoInlining:true Â
					, Prefix File:"release.pfx"}
		end if
		
	end tell
end DoSetDebugPreferences

on DoSetPreferences()
	tell application "CodeWarrior IDE 4.1"
		
		(* ===== Panel Target ===== *)
		Set Preferences of panel "Target Settings" to {Linker:"MacOS PPC Linker"}
		
		(* ===== Panel Project ===== *)
		Set Preferences of panel "PPC Project" to {Project Type:standard application}
		
		(* ===== Panel C/C++ Warnings ===== *)
		Set Preferences of panel "C/C++ Warnings" to Â
			{Treat Warnings As Errors:false Â
				, Illegal Pragmas:true Â
				, Empty Declarations:true Â
				, Possible Errors:true Â
				, Unused Variables:true Â
				, Unused Arguments:false Â
				, Extra Commas:true Â
				, Extended Error Checking:true Â
				, Hidden Virtual Functions:true Â
				, Implicit Arithmetic Conversions:false Â
				, NonInlined Functions:false Â
				, Inconsistent Class Struct:true}
		
		(* ===== Panel PPC Processor =====  *)
		Set Preferences of panel "PPC CodeGen" to Â
			{Struct Alignment:Align_PPC Â
				, Make Strings ReadOnly:true Â
				, Store Data in TOC:true Â
				, Use FMADD Instructions:false Â
				, Use Profiler:false Â
				, Traceback Tables:TB_Inline Â
				, Schedule:false Â
				, Peephole Optimizer:true}
		
		(* ===== Panel PPC PEF =====  *)
		Set Preferences of panel "PPC PEF" to Â
			{Export Symbols:none Â
				, Old Definition:0 Â
				, Old Implementation:0 Â
				, Current Version:0 Â
				, Code Sorting:nosort Â
				, Share Data Section:false Â
				, Expand Uninitialized Data:false Â
				, Fragment Name:""}
		
		(* ===== Panel Debugger =====  *)
		Set Preferences of panel "Debugger Target" to Â
			{Log System Messages:false}
		
		(* ===== Panel C/C++ Language =====  *)
		Set Preferences of panel "C/C++ Compiler" to Â
			{Activate CPlusPlus:false Â
				, ARM Conformance:false Â
				, Exception Handling:true Â
				, Inlining:inline_none Â
				, RTTI:true Â
				, AutoInlining:false Â
				, Pool Strings:false Â
				, Dont Reuse Strings:false Â
				, Require Function Prototypes:true Â
				, ANSI Strict:false Â
				, ANSI Keywords Only:false Â
				, Expand Trigraph Sequences:false Â
				, MPW Newlines:false Â
				, MPW Pointer Type Rules:false Â
				, Enums Always Ints:false Â
				, Prefix File:"debug.pfx"}
		
		(* ===== Panel PPC Linker ===== *)
		Set Preferences of panel "PPC Linker" to Â
			{Generate SYM File:true Â
				, Full Path In Sym Files:true Â
				, Generate Link Map:false Â
				, Suppress Warnings:false Â
				, Link Mode:fast Â
				, Initialization Name:Â
				"", Main Name:Â
				"__start", Termination Name:""}
		
		(* ===== Panel PPC Global Optimizer =====  *)
		(* ==== ... moved into DoSetDebugPreferences() to allow switching for debug on/off ==== *)
		my DoSetDebugPreferences()
		
		my DoSetPaths1()
		
	end tell
end DoSetPreferences

on DoSetPaths1()
	tell application "CodeWarrior IDE 4.1"
		
		(* ===== Panel Access Paths ===== *)
		-- We need to be able to move the default system compiler folder to the end of the list
		-- because certain files like "all.h" and "all" are defined by both Metrowerks and NCBI.
		-- We want to find the NCBI "all.h" first.
		Set Preferences of panel "Access Paths" to {System Paths:{}} -- This removes the compiler default folder
		Set Preferences of panel "Access Paths" to {Convert Paths:true}
		Set Preferences of panel "Access Paths" to {User Paths:{{name:INCLUDEFILES, recursive:true, origin:absolute}}}
		Set Preferences of panel "Access Paths" to {System Paths:{{name:INCLUDEFILES, recursive:true, origin:absolute}}} -- Added for speed
		
	end tell
end DoSetPaths1

on DoSetPaths2()
	tell application "CodeWarrior IDE 4.1"
		
		-- After we have added all paths, reinsert compiler default at end of list
		Set Preferences of panel "Access Paths" to {System Paths:{{name:":MacOS Support:Headers:", recursive:true, origin:shell relative}}}
		Set Preferences of panel "Access Paths" to {System Paths:{{name:":MacOS Support:Libraries:", recursive:true, origin:shell relative}}}
		Set Preferences of panel "Access Paths" to {System Paths:{{name:":MacOS Support:Universal:", recursive:true, origin:shell relative}}}
		Set Preferences of panel "Access Paths" to {System Paths:{{name:":MacOS Support:Profiler:", recursive:true, origin:shell relative}}}
		Set Preferences of panel "Access Paths" to {System Paths:{{name:":MSL:MSL_C:", recursive:true, origin:shell relative}}}
		Set Preferences of panel "Access Paths" to {System Paths:{{name:":MSL:MSL_C++:", recursive:true, origin:shell relative}}}
		(*
		if DOSOCKETS = "TRUE" and DOOPENTPT = "TRUE" then
			Set Preferences of panel "Access Paths" to {System Paths:{{name:":MacOS Support:OpenTransport:", recursive:true, origin:shell relative}}}
		end if
		*)
		
	end tell
end DoSetPaths2

on AddLibraries()
	tell application "CodeWarrior IDE 4.1"
		
		Add Files {METROWERKSCW & "MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL C.PPC.Lib"} To Segment 1
		Add Files {METROWERKSCW & "MSL:MSL_C++:MSL_MacOS:Lib:PPC:MSL C++.PPC.Lib"} To Segment 1
		Add Files {METROWERKSCW & "MSL:MSL_C:MSL_MacOS:Lib:PPC:MSL SIOUX.PPC.Lib"} To Segment 1
		Add Files {METROWERKSCW & "MacOS Support:Universal:Libraries:StubLibraries:InterfaceLib"} To Segment 1
		Add Files {METROWERKSCW & "MacOS Support:Universal:Libraries:StubLibraries:MathLib"} To Segment 1
		Add Files {METROWERKSCW & "MacOS Support:Libraries:Runtime:Runtime PPC:MSL RuntimePPC.Lib"} To Segment 1
		
	end tell
end AddLibraries

(* ==== This function creates a project with the given name and object files ==== *)

on DoCreateDefaultProject(projName, projPath, projFiles, projNCBILibs)
	tell application "CodeWarrior IDE 4.1"
		
		if DODEBUG = "TRUE" then
			Create Project {BINARIES & projName & " dbg.µ"}
		else
			Create Project {BINARIES & projName & ".µ"}
		end if
		
		my DoSetPreferences()
		Set Preferences of panel "Access Paths" to {User Paths:{{name:SOURCEFILES & projPath, origin:absolute}}}
		if DODEBUG = "TRUE" then
			Set Preferences of panel "PPC Project" to {File Name:(projName & " dbg")}
		else
			Set Preferences of panel "PPC Project" to {File Name:projName}
		end if
		Set Preferences of panel "PPC Project" to {SIZE Flags:22720, File Creator:"NCBI", File Type:"APPL"}
		Set Preferences of panel "PPC Project" to {Preferred Size:8000, Minimum Size:5000, Stack Size:64}
		my DoSetPaths2()
		
		my AddLibraries()
		
		Set Preferences of panel "Access Paths" to {System Paths:{{name:LIBRARIES, origin:absolute}}}
		repeat with i in projNCBILibs
			if DODEBUG = "TRUE" then
				Add Files {LIBRARIES & i & " debug"} To Segment 1
			else
				Add Files {LIBRARIES & i} To Segment 1
			end if
		end repeat
		
		repeat with i in projFiles
			Add Files {SOURCEFILES & projPath & ":" & i & ".cpp"} To Segment 1
		end repeat
		
		Reset File Paths
		Close Project
		
	end tell
end DoCreateDefaultProject

on DoCreateDefaultCProject(projName, projPath, projFiles, projNCBILibs)
	tell application "CodeWarrior IDE 4.1"
		
		if DODEBUG = "TRUE" then
			Create Project {BINARIES & projName & " dbg.µ"}
		else
			Create Project {BINARIES & projName & ".µ"}
		end if
		
		my DoSetPreferences()
		Set Preferences of panel "Access Paths" to {User Paths:{{name:SOURCEFILES & projPath, origin:absolute}}}
		if DODEBUG = "TRUE" then
			Set Preferences of panel "PPC Project" to {File Name:(projName & " dbg")}
		else
			Set Preferences of panel "PPC Project" to {File Name:projName}
		end if
		Set Preferences of panel "PPC Project" to {SIZE Flags:22720, File Creator:"NCBI", File Type:"APPL"}
		Set Preferences of panel "PPC Project" to {Preferred Size:8000, Minimum Size:5000, Stack Size:64}
		my DoSetPaths2()
		
		my AddLibraries()
		
		Set Preferences of panel "Access Paths" to {System Paths:{{name:LIBRARIES, origin:absolute}}}
		repeat with i in projNCBILibs
			if DODEBUG = "TRUE" then
				Add Files {LIBRARIES & i & " debug"} To Segment 1
			else
				Add Files {LIBRARIES & i} To Segment 1
			end if
		end repeat
		
		repeat with i in projFiles
			Add Files {SOURCEFILES & projPath & ":" & i & ".c"} To Segment 1
		end repeat
		
		Reset File Paths
		Close Project
		
	end tell
end DoCreateDefaultCProject

(* ==== This section populates and builds the libraries ==== *)

on DoCreateProjects()
	tell application "CodeWarrior IDE 4.1"
		
		activate
		
		(* ==== This subsection populates all the libraries with the appropriate source files and libraries ==== *)
		
		my DoCreateDefaultProject("coretest", "corelib:test", Â
			{"coretest"}, {"corelib"})
		
		my DoCreateDefaultProject("datatool", "serial:datatool", Â
			{"datatool", "type", "namespace", "statictype", "enumtype", "reftype", "unitype", Â
				"blocktype", "choicetype", "typestr", "ptrstr", "stdstr", "classstr", Â
				"enumstr", "stlstr", "choicestr", "choiceptrstr", "value", "mcontainer", Â
				"module", "moduleset", "generate", "filecode", "code", "fileutil", Â
				"alexer", "aparser", "parser", "lexer", "exceptions", Â
				"comments", "srcutil"}, Â
			{"corelib", "serial", "util"})
		
		my DoCreateDefaultProject("test_ncbitime", "corelib:test", Â
			{"test_ncbitime"}, {"corelib"})
		
		my DoCreateDefaultProject("test_ncbi_limits", "corelib:test", Â
			{"test_ncbi_limits"}, {"corelib"})
		
		my DoCreateDefaultCProject("test_core", "connect:test", Â
			{"test_ncbi_core"}, {"connect"})
		
		my DoCreateDefaultCProject("test_buffer", "connect:test", Â
			{"test_ncbi_buffer"}, {"connect"})
		
		my DoCreateDefaultCProject("test_socket", "connect:test", Â
			{"test_ncbi_socket_"}, {"ncsasock", "connect"})
		
		my DoCreateDefaultCProject("test_heapmgr", "connect:test", Â
			{"test_ncbi_heapmgr"}, {"connect"})
		
		my DoCreateDefaultCProject("test_connutil_hit", "connect:test", Â
			{"test_ncbi_connutil_hit"}, {"ncsasock", "connect"})
		
		my DoCreateDefaultCProject("test_connutil_misc", "connect:test", Â
			{"test_ncbi_connutil_misc"}, {"connect"})
		
		my DoCreateDefaultCProject("socket_io_bouncer", "connect:test", Â
			{"socket_io_bouncer"}, {"ncsasock", "connect"})
		
		my DoCreateDefaultCProject("test_file_connector", "connect:test", Â
			{"ncbi_conntest", "test_ncbi_file_connector"}, {"connect"})
		
		my DoCreateDefaultCProject("test_sock_connector", "connect:test", Â
			{"ncbi_conntest", "test_ncbi_socket_connector"}, {"ncsasock", "connect"})
		
		my DoCreateDefaultCProject("test_http_connector", "connect:test", Â
			{"ncbi_conntest", "test_ncbi_http_connector"}, {"ncsasock", "connect"})
		
		my DoCreateDefaultCProject("test_srv_connector", "connect:test", Â
			{"ncbi_conntest", "test_ncbi_service_connector"}, {"ncsasock", "connect"})
		
		my DoCreateDefaultProject("serialtest", "serial:test", Â
			{"serialobject", "serialobject_Base", "testserial", "cppwebenv"}, {"corelib", "serial", "util"})
		
		my DoCreateDefaultProject("asn2asn", "objects:asn2asn", Â
			{"asn2asn"}, {"corelib", "serial", "util", "object_seqset", "object_seq", "object_seqres", Â
			"object_seqloc", "object_seqalign", "object_seqfeat", "object_seqblock", "object_pub", Â
			"object_medline", "object_biblio", "object_general"})
		
		my DoCreateDefaultProject("testmedline", "objects:testmedline", Â
			{"testmedline"}, {"corelib", "serial", "util", "object_ncbimime", "object_mmdb1", "object_mmdb2", "object_mmdb3", Â
			"object_seqset", "object_seq", "object_seqres", "object_seqloc", "object_seqalign", "object_seqfeat", Â
			"object_seqblock", "object_pub", "object_medline", "object_medlars", "object_biblio", "object_general"})
		
		my DoCreateDefaultProject("testobjmgr", "objects:objmgr:test", Â
			{"testobjmgr"}, {"corelib", "serial", "util", "objmgr", "object_seqset", "object_seq", "object_seqres", Â
			"object_seqloc", "object_seqalign", "object_seqfeat", "object_seqblock", "object_pub", "object_medline", Â
			"object_biblio", "object_general"})
		
		my DoCreateDefaultProject("testrangemap", "util:test", Â
			{"testrangemap"}, {"corelib", "util"})
		
	end tell
end DoCreateProjects

(* ==== This function compiles a project ==== *)

on DoCompileBinary(projName)
	tell application "CodeWarrior IDE 4.1"
		
		if DODEBUG = "TRUE" then
			open (BINARIES & projName & " dbg.µ")
		else
			open (BINARIES & projName & ".µ")
		end if
		Make Project
		Close Project
		
	end tell
end DoCompileBinary

on DoCompileBinaries()
	
	(*
	if DOSOCKETS = "TRUE" then
		my DoCompileBinary("ncsasock")
		if DOOPENTPT = "TRUE" then
			my DoCompileBinary("ncsasockOT")
		end if
		my DoCompileBinary("connect")
	end if
	*)
	
	my DoCompileBinary("coretest")
	my DoCompileBinary("datatool")
	my DoCompileBinary("test_ncbitime")
	my DoCompileBinary("test_ncbi_limits")
	my DoCompileBinary("test_core")
	my DoCompileBinary("test_buffer")
	my DoCompileBinary("test_socket")
	my DoCompileBinary("test_heapmgr")
	my DoCompileBinary("test_connutil_hit")
	my DoCompileBinary("test_connutil_misc")
	my DoCompileBinary("socket_io_bouncer")
	my DoCompileBinary("test_file_connector")
	my DoCompileBinary("test_sock_connector")
	my DoCompileBinary("test_http_connector")
	my DoCompileBinary("test_srv_connector")
	my DoCompileBinary("serialtest")
	my DoCompileBinary("asn2asn")
	my DoCompileBinary("testmedline")
	my DoCompileBinary("testobjmgr")
	my DoCompileBinary("testrangemap")
	
end DoCompileBinaries

(* ==== here's where actual work gets done ! ==== *)

with timeout of 60000 seconds
	
	my DoSetGlobals()
	
	if CREATEDEBUGPROJECTS = "TRUE" then
		set DODEBUG to "TRUE"
		my CreateFolders()
		my DoCreateProjects()
	end if
	
	if CREATERELEASEPROJECTS = "TRUE" then
		set DODEBUG to "FALSE"
		my CreateFolders()
		my DoCreateProjects()
	end if
	
	if BUILDDEBUGBINS = "TRUE" then
		set DODEBUG to "TRUE"
		my DoCompileBinaries()
	end if
	
	if BUILDRELEASEBINS = "TRUE" then
		set DODEBUG to "FALSE"
		my DoCompileBinaries()
	end if
	
end timeout

