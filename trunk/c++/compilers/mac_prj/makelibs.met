(* ================================================================================
	makelibs.met

	An AppleScript to compile the NCBI C++ Toolkit base libraries with
	Metrowerks CodeWarrior.

	$Id: makelibs.met,v 1.16 2001/07/11 21:37:35 juran Exp $
	
	Revision History:
	----------------

	??/??/??	Kans		Created
	10/11/95	Corarito	Modified for CW7
	11/22/95	Harmon		CopyHdrs script must be run first
	 2/18/96	Kans		Consolidated all 68K/PPC scripts
	 3/15/00	Churchill   modified for OpenTransport work in progress
	 3/30/00	Kans		Modified for C++ Toolkit
	 6/22/00	Thiessen	major changes to functionality; added object libraries

	================================================================================ *)

property pProjectFileExtension : ".µ"
property pCPlusPlusExtension : ".cpp"

-- Whether to recreate existing project files.
property pAlwaysCreateProjects : false

-- Which targets to create.
-- If these are changed you must recreate the project files.  There is no direct effect on building.
property pCreateBlueTargets : true -- 'Blue' was the codename for System 7.  Here, it means pre-Carbon.
property pCreateCarbonTargets : true
property pCreateDebugTargets : true
property pCreateOptimizedTargets : true

-- Whether to create projects in the specified category.
property pCreateObjectLibs : true (* whether to create/compile object libraries *)
property pCreateSocketLibs : true (* whether to create/compile socket libs *)

-- Whether to compile everything.
property pShouldBuild : true

-- Putting a project tree inside a tool tree is evil.
property CPPROOT : "cxx:" (* head of C++ toolkit tree within CodeWarrior folder *)


(* ==== These symbols will be derived ==== *)

global gStartupDisk
global gMW6root
global gMWCWfolder

global NCBICPP

global SOURCEFILES
global INCLUDEFILES
global LIBRARIES

on ResolveAlias(pathname)
	tell application "Finder"
		--if the last character of pathname is ":" then error "Don't use a trailing colon with ResolveAlias."
		if exists folder pathname then return pathname & ":"
		if exists alias file pathname then return the original item of alias file pathname as string
		error "The folder (or alias) '" & pathname & "' doesn't exist."
	end tell
end ResolveAlias

(* ==== These subroutines set paths and other preferences during population ==== *)

on DoSetGlobals()
	tell application "Finder"
		
		set gStartupDisk to startup disk as string
		set gMW6root to gStartupDisk & "Metrowerks CodeWarrior 6.0:"
		set gMWCWfolder to gMW6root & "Metrowerks CodeWarrior:"
		
		set NCBICPP to gMW6root & CPPROOT
		
		try
			tell me to set Dev to ResolveAlias(gStartupDisk & "Development")
			tell me to set Trees to ResolveAlias(Dev & "Trees")
			tell me to set NCBIgroup to ResolveAlias(Trees & "NCBI")
			tell me to set Vault to ResolveAlias(NCBIgroup & "ncbi.vault")
			tell me to set Internal to ResolveAlias(Vault & "internal")
			tell me to set IntCpp to ResolveAlias(Internal & "c++")
			set NCBICPP to IntCpp
		end try
		
		set SOURCEFILES to NCBICPP & "src:" as string
		set INCLUDEFILES to NCBICPP & "include:" as string
		set LIBRARIES to NCBICPP & "compilers:mac_prj:lib:" as string
		
	end tell
end DoSetGlobals

on CreateFolders()
	tell application "Finder"
		
		if not (exists (folder LIBRARIES)) then
			make new folder at folder (NCBICPP & "compilers:mac_prj:") with properties {name:"lib"}
		end if
		
	end tell
end CreateFolders

on HeaderExists(header)
	tell application "Finder"
		
		return exists file header of folder INCLUDEFILES
		
	end tell
end HeaderExists

on IsOlderThan(fileA, fileB)
	tell application "Finder"
		
		return (the modification date of fileA < the modification date of fileB)
		
	end tell
end IsOlderThan

on UpdateRenameHeader(canonicalName, canonicalDir, dotHName)
	tell application "Finder"
		
		-- This file is only present if the script was interrupted.
		if my HeaderExists(canonicalName) then
			delete file canonicalName of (folder INCLUDEFILES)
		end if
		
		-- The native config file.
		set canonicalFile to file canonicalName of canonicalDir
		
		set needCopy to true
		if my HeaderExists(dotHName) then
			set dotHFile to file dotHName of folder INCLUDEFILES
			if my IsOlderThan(dotHFile, canonicalFile) then
				delete dotHFile
			else
				set needCopy to false
			end if
		end if
		
		if needCopy then
			copy {canonicalFile} to {folder INCLUDEFILES}
			set name of file canonicalName of (folder INCLUDEFILES) to dotHName
		end if
		
	end tell
end UpdateRenameHeader

on UpdatePrefix(prefixName, prefixDir)
	tell application "Finder"
		
		set prefixFile to file prefixName of prefixDir
		
		set needCopy to true
		if my HeaderExists(prefixName) then
			set prefixCopy to file prefixName of folder INCLUDEFILES
			if my IsOlderThan(prefixCopy, prefixFile) then
				delete prefixCopy
			else
				set needCopy to false
			end if
		end if
		
		if needCopy then
			copy {prefixFile} to {folder INCLUDEFILES}
		end if
		
	end tell
end UpdatePrefix

on CopyHeaders()
	tell application "Finder"
		
		set confFolder to folder "compilers" of folder NCBICPP
		set prefixFolder to folder "mac_prj" of folder "compilers" of folder NCBICPP
		
		my UpdateRenameHeader("ncbiconf.mac", confFolder, "ncbiconf.h")
		
		my UpdatePrefix("debug.pfx", prefixFolder)
		my UpdatePrefix("release.pfx", prefixFolder)
		
	end tell
end CopyHeaders

on SetDebugSettings(shouldDebug)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		(* ==== ONLY settings that are directly relevant to debugging and optimization should go here! ==== *)
		
		if shouldDebug then
			(* ===== Panel PPC Global Optimizer =====  *)
			Set Preferences of panel "PPC Global Optimizer" to Â
				{Optimize For:code_Speed, Level:0}
			(* ===== Panel PPC Linker ===== *)
			Set Preferences of panel "PPC Linker" to Â
				{Generate SYM File:true Â
					, Suppress Warnings:false}
			(* ===== Panel C/C++ Language =====  *)
			Set Preferences of panel "C/C++ Compiler" to Â
				{Inlining:inline_none Â
					, AutoInlining:false Â
					, Prefix File:"debug.pfx"}
			
		else
			(* ==== optimized/release settings ==== *)
			(* ===== Panel PPC Global Optimizer =====  *)
			Set Preferences of panel "PPC Global Optimizer" to Â
				{Optimize For:code_Speed, Level:4}
			(* ===== Panel PPC Linker ===== *)
			Set Preferences of panel "PPC Linker" to Â
				{Generate SYM File:false Â
					, Suppress Warnings:true}
			(* ===== Panel C/C++ Language =====  *)
			Set Preferences of panel "C/C++ Compiler" to Â
				{Inlining:inline_smart Â
					, AutoInlining:true Â
					, Prefix File:"release.pfx"}
		end if
		
	end tell
end SetDebugSettings

on DoSetPreferences()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		(* ===== Panel Target ===== *)
		Set Preferences of panel "Target Settings" to {Linker:"MacOS PPC Linker"}
		
		(* ===== Panel Project ===== *)
		Set Preferences of panel "PPC Project" to {Project Type:library}
		
		(* ===== Panel C/C++ Warnings ===== *)
		Set Preferences of panel "C/C++ Warnings" to Â
			{Treat Warnings As Errors:false Â
				, Illegal Pragmas:true Â
				, Empty Declarations:true Â
				, Possible Errors:true Â
				, Unused Variables:true Â
				, Unused Arguments:false Â
				, Extra Commas:true Â
				, Extended Error Checking:true Â
				, Hidden Virtual Functions:true Â
				, Implicit Arithmetic Conversions:false Â
				, NonInlined Functions:false Â
				, Inconsistent Class Struct:true}
		
		(* ===== Panel PPC Processor =====  *)
		Set Preferences of panel "PPC CodeGen" to Â
			{Struct Alignment:Align_PPC Â
				, Make Strings ReadOnly:true Â
				, Store Data in TOC:true Â
				, Use FMADD Instructions:false Â
				, Use Profiler:false Â
				, Traceback Tables:TB_Inline Â
				, Schedule:false Â
				, Peephole Optimizer:true}
		
		(* ===== Panel PPC PEF =====  *)
		Set Preferences of panel "PPC PEF" to Â
			{Export Symbols:none Â
				, Old Definition:0 Â
				, Old Implementation:0 Â
				, Current Version:0 Â
				, Code Sorting:nosort Â
				, Share Data Section:false Â
				, Expand Uninitialized Data:false Â
				, Fragment Name:""}
		
		(* ===== Panel Debugger =====  *)
		Set Preferences of panel "Debugger Target" to Â
			{Log System Messages:false}
		
		(* ===== Panel C/C++ Language =====  *)
		Set Preferences of panel "C/C++ Compiler" to Â
			{Activate CPlusPlus:false Â
				, ARM Conformance:false Â
				, Exception Handling:true Â
				, Inlining:inline_none Â
				, RTTI:true Â
				, AutoInlining:false Â
				, Pool Strings:false Â
				, Dont Reuse Strings:false Â
				, Require Function Prototypes:true Â
				, ANSI Strict:false Â
				, ANSI Keywords Only:false Â
				, Expand Trigraph Sequences:false Â
				, MPW Newlines:false Â
				, MPW Pointer Type Rules:false Â
				, Enums Always Ints:false Â
				, Prefix File:"debug.pfx"}
		
		(* ===== Panel PPC Linker ===== *)
		Set Preferences of panel "PPC Linker" to Â
			{Generate SYM File:true Â
				, Full Path In Sym Files:true Â
				, Generate Link Map:false Â
				, Suppress Warnings:false Â
				, Link Mode:fast Â
				, Initialization Name:Â
				"", Main Name:Â
				"__start", Termination Name:""}
		
		(* ===== Panel PPC Global Optimizer =====  *)
		(* ==== ... moved into DoSetDebugPreferences() to allow switching for debug on/off ==== *)
		--my DoSetDebugPreferences()
		
		my DoSetPaths1()
		
	end tell
end DoSetPreferences

on DoSetPaths1()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		(* ===== Panel Access Paths ===== *)
		-- We need to be able to move the default system compiler folder to the end of the list
		-- because certain files like "all.h" and "all" are defined by both Metrowerks and NCBI.
		-- We want to find the NCBI "all.h" first.
		Set Preferences of panel "Access Paths" to {System Paths:{}} -- This removes the compiler default folder
		Set Preferences of panel "Access Paths" to {Convert Paths:true, Always Full Search:true}
		Set Preferences of panel "Access Paths" to {User Paths:{{name:INCLUDEFILES, recursive:true, origin:absolute}}}
		Set Preferences of panel "Access Paths" to {System Paths:{{name:INCLUDEFILES, recursive:true, origin:absolute}}} -- Added for speed
		
	end tell
end DoSetPaths1

on DoSetPaths2()
	tell application "CodeWarrior IDE 4.1.0.3"
		
		-- After we have added all paths, reinsert compiler default at end of list
		set dirsToAdd to {Â
			":MacOS Support:Headers:", Â
			":MacOS Support:Libraries:", Â
			":MacOS Support:Universal:", Â
			":MacOS Support:Profiler:", Â
			":MSL:MSL_C:", Â
			":MSL:MSL_C++:", Â
			":MacOS Support:OpenTransport:"}
		
		set pathsToAdd to {}
		repeat with i in dirsToAdd
			copy {name:i, recursive:true, origin:shell relative} to end of pathsToAdd
		end repeat
		Set Preferences of panel "Access Paths" to {System Paths:pathsToAdd}
		
	end tell
end DoSetPaths2

on SetupTarget(projName, projFiles, prefixFile, flags)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		-- Figure out what our output file and input libraries will be named.
		if flags contains "Carbon" then
			set targetAPI to "C2"
		else
			set targetAPI to "Mac"
		end if
		if flags contains "debug" then
			set targetDebug to "dbg"
		else
			set targetDebug to ""
		end if
		set targetName to projName & " " & targetAPI
		set targetFilename to projName & "-" & targetAPI
		if targetDebug is not "" then
			set targetName to targetName & " " & targetDebug
			set targetFilename to targetFilename & "-" & targetDebug
		end if
		set targetFilename to targetFilename & ".lib"
		
		make new target at project document 1 with properties {name:targetName}
		set the current target of project document 1 to the result
		Set Preferences of panel "PPC Project" to {File Name:targetFilename}
		
		my DoSetPreferences()
		--Set Preferences of panel "Access Paths" to {User Paths:{{name:NCBISOURCE & projPath, origin:absolute}}}
		my DoSetPaths2()
		
		if flags contains "Carbon" then
			if prefixFile is "" then
				set prefixFile to "CarbonPrefix.h"
			else
				set prefixFile to "Carbon-" & prefixFile
			end if
		end if
		Set Preferences of panel "C/C++ Compiler" to {Prefix File:prefixFile}
		
		repeat with group in projFiles
			set projPath to projPath of group
			set fileList to group's fileList
			set filesToAdd to {}
			repeat with i in fileList
				if i does not contain "." then set i to i & pCPlusPlusExtension
				copy SOURCEFILES & projPath & i to end of filesToAdd
			end repeat
			Add Files filesToAdd
			close (every window whose name contains "Project Messages")
		end repeat
		
		if flags contains "debug" then
			set the debug of every target file of target (count targets of project document 1) Â
				of project document 1 to true
			my SetDebugSettings(true)
		else
			my SetDebugSettings(false)
		end if
		
		Reset File Paths
		
	end tell
end SetupTarget

on CreateProject(projName, projFiles, prefixFile)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		set projFilename to projName & pProjectFileExtension
		set projPathname to LIBRARIES & projFilename
		if pAlwaysCreateProjects or not (exists file projPathname of application "Finder") then
			
			try
				close (the first project document whose name is projFilename)
			end try
			
			Create Project {projPathname}
			
			if pCreateBlueTargets and pCreateDebugTargets then
				my SetupTarget(projName, projFiles, prefixFile, "Blue debug")
			end if
			
			if pCreateBlueTargets and pCreateOptimizedTargets then
				my SetupTarget(projName, projFiles, prefixFile, "Blue")
			end if
			
			if pCreateCarbonTargets and pCreateDebugTargets then
				my SetupTarget(projName, projFiles, prefixFile, "Carbon debug")
			end if
			
			if pCreateCarbonTargets and pCreateOptimizedTargets then
				my SetupTarget(projName, projFiles, prefixFile, "Carbon")
			end if
			
			set the current target of project document 1 to target 1 of project document 1
			
			Close Project
			
		end if
		
	end tell
end CreateProject

on CreateSimpleProject(projName, projPath, projFiles)
	
	CreateProject(projName, {{projPath:projPath, fileList:projFiles}}, "")
	
end CreateSimpleProject

on DotC(fileList)
	
	set results to {}
	repeat with i in fileList
		copy i & ".c" to end of results
	end repeat
	
	return results
	
end DotC

(* ==== This section populates and builds the libraries ==== *)

on CreateAllProjects()
	
	(* ==== This subsection populates all the libraries with the appropriate source files ==== *)
	
	if pCreateSocketLibs then
		
		CreateSimpleProject("mitsock", "connect:mitsock:", Â
			DotC({"OTSocketInternal", "OTErrno", "OTSockets", "OTidle", "OTNetdbServices", "OTnetdb"}))
		
		-- can't do "ncbi_lbsm_ipc", "ncbi_server_info", "ncbi_service_lbsmd", "ncbi_lbsm"
		set myFiles to {"ncbi_conn_streambuf", "ncbi_conn_stream", "ncbi_core_cxx"}
		repeat with i in {"ncbi_ansi_ext", "ncbi_buffer", "ncbi_connection", "ncbi_connutil", Â
			"ncbi_core", "ncbi_file_connector", "ncbi_heapmgr", "ncbi_http_connector", Â
			"ncbi_priv", Â
			"ncbi_service", "ncbi_service_dispd", Â
			"ncbi_socket_", "ncbi_socket_connector", "ncbi_util_", Â
			"ncbi_connector", "ncbi_service_connector", "ncbi_service_lbsmd_stub", Â
			"ncbi_server_info"}
			copy i & ".c" to end of myFiles
		end repeat
		CreateSimpleProject("connect", "connect:", myFiles)
		
	end if
	
	my CreateSimpleProject("corelib", "corelib:", Â
		{"ncbiapp", "ncbiargs", "ncbidiag", "ncbienv", "ncbiexpt", "ncbiobj", "ncbireg", "ncbistd", Â
			"ncbistre", "ncbithr", "ncbitime", "ncbimtx", "ncbi_safe_static", "ncbi_system"})
	
	my CreateSimpleProject("util", "util:", Â
		{"bytesrc", "strbuffer", "checksum", "itree"})
	
	my CreateSimpleProject("serial", "serial:", Â
		{"asntypes", "autoptrinfo", "choice", Â
			"choiceptr", "classinfo", "classinfob", "continfo", Â
			"delaybuf", "enumerated", "exception", "hookdata", "item", "iterator", Â
			"member", "memberid", "memberlist", "object", "objectinfo", Â
			"objectiter", "objectio", "objcopy", "objhook", "objistr", "objistrasn", "objistrasnb", Â
			"objistrxml", "objlist", "objostr", "objostrasn", "objostrasnb", Â
			"objostrxml", "objstack", "objstrb", "ptrinfo", Â
			"rtti", "serial", "serialasn", "serializable", "stdtypes", Â
			"stltypes", "typeinfo", "typemap", "typeref", "variant"})
	
	my CreateSimpleProject("html", "html:", Â
		{"components", "html", "htmlhelper", "linkbar", Â
			"node", "nodemap", "page", "pager", Â
			"querypages", "selection"})
	
	if pCreateObjectLibs then
		
		my CreateSimpleProject("object_access", "objects:access:", Â
			{"access__", "access___"})
		
		my CreateSimpleProject("object_biblio", "objects:biblio:", Â
			{"biblio__", "biblio___"})
		
		my CreateSimpleProject("object_cdd", "objects:cdd:", Â
			{"cdd__", "cdd___"})
		
		my CreateSimpleProject("object_cn3d", "objects:cn3d:", Â
			{"cn3d__", "cn3d___"})
		
		my CreateSimpleProject("object_entrez2", "objects:entrez2:", Â
			{"entrez2__", "entrez2___"})
		
		my CreateSimpleProject("object_featdef", "objects:featdef:", Â
			{"featdef__", "featdef___"})
		
		my CreateSimpleProject("object_general", "objects:general:", Â
			{"general__", "general___"})
		
		my CreateSimpleProject("object_id1", "objects:id1:", Â
			{"id1__", "id1___"})
		
		my CreateSimpleProject("object_medlars", "objects:medlars:", Â
			{"medlars__", "medlars___"})
		
		my CreateSimpleProject("object_medline", "objects:medline:", Â
			{"medline__", "medline___"})
		
		my CreateSimpleProject("object_mim", "objects:mim:", Â
			{"mim__", "mim___"})
		
		my CreateSimpleProject("object_mmdb1", "objects:mmdb1:", Â
			{"mmdb1__", "mmdb1___"})
		
		my CreateSimpleProject("object_mmdb2", "objects:mmdb2:", Â
			{"mmdb2__", "mmdb2___"})
		
		my CreateSimpleProject("object_mmdb3", "objects:mmdb3:", Â
			{"mmdb3__", "mmdb3___"})
		
		my CreateSimpleProject("object_ncbimime", "objects:ncbimime:", Â
			{"ncbimime__", "ncbimime___"})
		
		my CreateSimpleProject("object_objprt", "objects:objprt:", Â
			{"objprt__", "objprt___"})
		
		my CreateSimpleProject("object_proj", "objects:proj:", Â
			{"proj__", "proj___"})
		
		my CreateSimpleProject("object_pub", "objects:pub:", Â
			{"pub__", "pub___"})
		
		my CreateSimpleProject("object_pubmed", "objects:pubmed:", Â
			{"pubmed__", "pubmed___"})
		
		my CreateSimpleProject("object_seq", "objects:seq:", Â
			{"seq__", "seq___"})
		
		my CreateSimpleProject("object_seqalign", "objects:seqalign:", Â
			{"seqalign__", "seqalign___"})
		
		my CreateSimpleProject("object_seqblock", "objects:seqblock:", Â
			{"seqblock__", "seqblock___"})
		
		my CreateSimpleProject("object_seqcode", "objects:seqcode:", Â
			{"seqcode__", "seqcode___"})
		
		my CreateSimpleProject("object_seqfeat", "objects:seqfeat:", Â
			{"seqfeat__", "seqfeat___"})
		
		my CreateSimpleProject("object_seqloc", "objects:seqloc:", Â
			{"seqloc__", "seqloc___"})
		
		my CreateSimpleProject("object_seqres", "objects:seqres:", Â
			{"seqres__", "seqres___"})
		
		my CreateSimpleProject("object_seqset", "objects:seqset:", Â
			{"seqset__", "seqset___"})
		
		my CreateSimpleProject("object_submit", "objects:submit:", Â
			{"submit__", "submit___"})
		
		my CreateSimpleProject("objmgr", "objects:objmgr:", Â
			{"objmgr"})
		
	end if
	
end CreateAllProjects

on BuildLibraries(myLibs)
	tell application "CodeWarrior IDE 4.1.0.3"
		
		(* ==== This subsection compiles the newly-populated libraries ==== *)
		
		repeat with proj in myLibs
			open (LIBRARIES & proj & pProjectFileExtension)
			repeat with i from 2 to (count targets of project document 1)
				set the current target of project document 1 to target i of project document 1
				Make Project
				-- If there were compiler warnings, then a compiler window will be in front.
				-- For whatever reason, this causes the next "set the current target..." to fail.
				-- An easy way to make the window go away without having to know if it's there or not 
				-- is to build again, which, because everything is already compiled, finishes instantly
				-- and produces no warnings.
				--Make Project
				-- An even better way is to check for the window and close it.
				if the name of window 1 is "Errors & Warnings" then
					close first window -- "close window 1" becomes "Close Window 1" (different event)
				end if
			end repeat
			set the current target of project document 1 to target 1 of project document 1
			Close Project
		end repeat
		
	end tell
end BuildLibraries

on BuildAllLibraries()
	
	if pCreateSocketLibs then
		BuildLibraries({"mitsock", "connect"})
	end if
	
	set myLibs to {"corelib", "util", "serial", "html"}
	
	BuildLibraries(myLibs)
	
	if pCreateObjectLibs then
		set myLibs to {"object_access", "object_biblio", "object_cdd", "object_featdef", "object_general", Â
			"object_medlars", "object_medline", "object_mmdb1", "object_mmdb2", "object_mmdb3", Â
			"object_ncbimime", "object_objprt", "object_proj", "object_pub", "object_pubmed", "object_seq", Â
			"object_seqalign", "object_seqblock", "object_seqcode", "object_seqfeat", "object_seqloc", Â
			"object_seqres", "object_seqset", "object_submit", "objmgr", Â
			"object_id1", "object_cn3d", "object_entrez2", "object_mim"}
		BuildLibraries(myLibs)
	end if
	
end BuildAllLibraries

on SignalCompletion()
	
	try
		say "Make complete."
	on error
		beep
	end try
	
end SignalCompletion

(* ==== here's where actual work gets done ! ==== *)

with timeout of 60000 seconds
	
	DoSetGlobals()
	
	CreateFolders()
	CopyHeaders()
	
	tell application "CodeWarrior IDE 4.1.0.3" to activate
	
	CreateAllProjects()
	
	if pShouldBuild then
		BuildAllLibraries()
	end if
	
	SignalCompletion()
	
end timeout

