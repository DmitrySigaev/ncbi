-- C++ libs ------ Properties--property pUsingCPlusPlus : trueproperty pCPlusPlusExtension : ".cpp"property pProjectFileExtension : ".mcp"property pRootFolderName : "cxx"-- Whether to recreate existing project files.property pAlwaysCreateProjects : false-- Which targets to build.-- All of the targets are populated all the time. These affect what is compiled & built.property pCreateCarbonTargets : falseproperty pCreateMachOTargets : trueproperty pCreateDebugTargets : trueproperty pCreateOptimizedTargets : trueproperty pCreateProfiledTargets : false-- Whether to compile anything.property pShouldBuild : true-- property pMakeStationeryScript : "makeStat.met"property pStationeryName : "ApplicationStationery"property pDirsToCreate : {Â	{relPath:"compilers:mac_prj", name:"bin"}, Â	{relPath:"compilers:mac_prj:bin", name:pStationeryName}}---- Global variables--global gStartupDiskglobal gHomeDirglobal gMWrootglobal gMWCWfolderglobal gDistribRootglobal gAccessRootglobal gProjectsDirglobal gSourceDirglobal gSourceRootglobal gIncludeDirglobal gLibsDirglobal gRsrcsDirglobal gMakeDirglobal gStationeryDirglobal gProjectDataon RemoveString(theName, infix)	if theName contains infix then		set offst to (offset of infix in theName)		set pre to characters 1 through (offst - 1) of theName as string		set post to characters (offst + (count characters of infix)) Â			through (count characters of theName) Â			of theName as string		set theName to pre & post	end if	return theNameend RemoveStringon mkFileData(section)	if (section does not end with ":") then set section to section & ":"	return {projPath:section, fileList:GetFileNames(section), fileNotList:{}}end mkFileDataon mkFileDataListFiles(section, fileList)	if (section does not end with ":") then set section to section & ":"	return {projPath:section, fileList:fileList, fileNotList:{}}end mkFileDataListFileson mkFileDataExceptFiles(section, fileNotList)	if (section does not end with ":") then set section to section & ":"	return {projPath:section, fileList:GetFileNames(section), fileNotList:fileNotList}end mkFileDataExceptFileson SimpleProjectData(projName, section, features)		-- By default, the project name is also the name a source file in the project.	set myFileList to {projName}	-- Remove "ncbi_" from the project name, if present.	set projName to RemoveString(projName, "ncbi_")		if (count characters of projName) > 18 then		set projName to characters 1 through 18 of projName as string	end if		tell application "CodeWarrior IDE"				if features does not contain "C" and features does not contain "C++" then			--error "Project " & projName & "'s default language (a feature) must be C or C++."			copy "C++" to end of features		end if		set myFeatures to features		if section contains ":" then			set myLibs to {}			set myPath to section & ":"		else			set myLibs to {section}			set myPath to section & ":test:"		end if		return {name:projName, features:myFeatures, rsrcs:{"ncbilogo.r", "Info.plc"}, settings:Â			{Prefix File:"", ppcProject:{}}, projLibs:myLibs, fileData:Â			{{projPath:myPath, fileList:myFileList, fileNotList:{}}}}			end tellend SimpleProjectDataon ComplexProjectData(projName, section, features, filesToAdd)		-- Remove "ncbi_" from the project name, if present.	set projName to RemoveString(projName, "ncbi_")		if (count characters of projName) > 18 then		set projName to characters 1 through 18 of projName as string	end if		tell application "CodeWarrior IDE"				if features does not contain "C" and features does not contain "C++" then			error "Project " & projName & "'s default language (a feature) must be C or C++."		end if		set myFeatures to features				if section contains ":" then			set myLibs to {}			set myPath to section & ":"		else			set myLibs to {section}			set myPath to section & ":test:"		end if		return {name:projName, features:myFeatures, rsrcs:{"ncbilogo.r", "Info.plc"}, settings:Â			{Prefix File:"", ppcProject:{}}, projLibs:myLibs, fileData:Â			{{projPath:myPath, fileList:filesToAdd, fileNotList:{}}}}			end tellend ComplexProjectDataon DataPlusPathAndSources(dataRec, newPath, newSources)	copy {projPath:newPath, fileList:newSources, fileNotList:{}} to end of fileData of dataRec		return dataRecend DataPlusPathAndSourceson DataPlusLibs(dataRec, newLibs)	repeat with i in newLibs		copy i to end of projLibs of dataRec	end repeat	return dataRecend DataPlusLibson DataPlusSources(dataRec, newSrcs)	repeat with i in newSrcs		copy i to end of fileList of item 1 of fileData of dataRec	end repeat	return dataRecend DataPlusSourceson AddSimpleProject(projName, features)		AddProject(SimpleProjectData(projName, features))	end AddSimpleProjecton AddProject(projData)		copy projData to end of gProjectData	end AddProjecton SetProjectData()		tell application "CodeWarrior IDE"				set corelib to "corelib"		set connect to "connect"		set serial to "serial"		set util to "util"		set html to "html"				set commonObjLibs to {Â			"xncbi", "xser", "xutil", Â			"seqset", "seq", "seqres", "seqloc", Â			"seqcode", "seqalign", "seqfeat", "seqblock", Â			"pub", "medline", "biblio", "general", "submit"}				set objMgrLibs to {Â			"seqcode", "cdd", "seqloc", "seqfeat", "seq", "seqalign", "seqblock", "seqset", Â			"pub", "biblio", "pubmed", "medline", "seqres", Â			"general", "submit", "xobjmgr", "id1", "xser", "xobjutil", "xutil", "xconnect", "xncbi"}				-- datatool		set myName to "datatool"		set myFeatures to {"C++"}		set mySettings to {Prefix File:"", ppcProject:{}}		set myRsrcs to {"ncbilogo.r", "Info.plc"}		set myLibs to {"xncbi", "xser", "xutil"}		-- use all the files in the datatool directory		set myFiles to {my mkFileData("serial:datatool:")}		set datatoolData to {name:myName, features:myFeatures, settings:mySettings, rsrcs:myRsrcs, projLibs:myLibs, fileData:myFiles}			end tell		---------- SERIAL ----------		AddProject(datatoolData)		---------- OBJECTS ----------		AddProject(DataPlusLibs(SimpleProjectData("asn2asn", "objects:asn2asn", {"C++"}), commonObjLibs))	AddProject(DataPlusLibs(DataPlusLibs(ComplexProjectData("testvalidator", "objects:validator:test", {"C++", "sockets"}, {"test_validator"}), objMgrLibs), {"xvalidate"}))	AddProject(DataPlusLibs(DataPlusLibs(SimpleProjectData("id1_fetch_simple", "app:id1_fetch", {"C++", "sockets"}), commonObjLibs), {"id1", "xconnect"}))	end SetProjectDataon GetFileNames(relPath)	set theFiles to list folder (gSourceDir & relPath) without invisibles	set theCFiles to EndsWith(theFiles, ".c")	set theCppFiles to EndsWith(theFiles, pCPlusPlusExtension)		return theCFiles & theCppFilesend GetFileNameson EndsWith(aList, suffix)	set newList to {}	repeat with f in aList		if (f ends with suffix) then			set newList to newList & (f as string)		end if	end repeat		return newListend EndsWithon ResolveAlias(pathname)	tell application "Finder"		--if the last character of pathname is ":" then error "Don't use a trailing colon with ResolveAlias."		if exists folder pathname then return pathname & ":"		if exists alias file pathname then return the original item of alias file pathname as string		error "The folder (or alias) '" & pathname & "' doesn't exist."	end tellend ResolveAliason IsOSX()	tell application "Finder"				set vers to the version as text				if second character of vers is equal to "." then			set vers to "0" & vers		end if				return vers > 10 or vers = 10			end tellend IsOSXon stripVolName(macPath)	set saveTID to get text item delimiters of AppleScript	set text item delimiters of AppleScript to ":"	set strippedPath to (rest of text items of macPath) as string	set text item delimiters of AppleScript to saveTID	return strippedPathend stripVolNameon HomeDir()	tell application "Finder"				if my IsOSX() then			return the home as string			-- return my stripVolName(home as string)		else			return gStartupDisk		end if			end tellend HomeDiron ModuleRoot()		if pUsingCPlusPlus then		set subFolder to pRootFolderName	else		set subFolder to "ncbi"	end if		set modRoot to ""	try		set modRoot to ResolveAlias(gMWroot & subFolder)	on error		try			set modRoot to ResolveAlias(gHomeDir & subFolder)		end try	end try		return modRootend ModuleRooton MWRootDir()		set mwRoot to ""	set mwLocations to {gStartupDisk, gStartupDisk & "Applications:", gStartupDisk & "Applications (Mac OS 9):", Â		gHomeDir, gHomeDir & "Applications:", gHomeDir & "Applications (Mac OS 9):"}	repeat with mwVersion from 8 to 9		set dirName to "Metrowerks CodeWarrior " & mwVersion & ".0"		repeat with mwLoc in mwLocations			try				set mwRoot to ResolveAlias(mwLoc & dirName)				return mwRoot			end try		end repeat	end repeat		error "Can't find the Metrowerks CodeWarrior folder."	end MWRootDiron GetMyPath()	set myPath to path to me as string	if myPath contains "Script Editor" then		-- Oops! running under script editor. 'me' is Script Editor not this script.		-- use the location this script is supposed to be in.		if pUsingCPlusPlus then			return gDistribRoot & "compilers:mac_prj"		else			return gDistribRoot & "make:"		end if	else		tell application "Finder"			return container of myPath		end tell	end ifend GetMyPathon SetGlobals()	tell application "Finder"				set gProjectData to {}				set gStartupDisk to startup disk as string		set gHomeDir to my HomeDir()		set gMWroot to my MWRootDir()		set gMWCWfolder to gMWroot & "Metrowerks CodeWarrior:"				set gDistribRoot to my ModuleRoot()				set gIncludeDir to gDistribRoot & "include:"		if pUsingCPlusPlus then			set gSourceDir to gDistribRoot & "src:"			set gLibsDir to gDistribRoot & "compilers:mac_prj:lib:"			set gProjectsDir to gDistribRoot & "compilers:mac_prj:bin:"			set gRsrcsDir to gDistribRoot & "compilers:mac_prj:"		else			set gSourceDir to gDistribRoot			set gLibsDir to gDistribRoot & "lib:"			set gProjectsDir to gDistribRoot & "build:"			set gRsrcsDir to gDistribRoot & "link:macmet:"		end if		set gStationeryDir to gProjectsDir & pStationeryName & ":"		set gMakeDir to my GetMyPath()			end tellend SetGlobalson SetUserPaths(aPath, recurse)	if (aPath begins with gStartupDisk) then		set aPath to my stripVolName(aPath)	end if	tell application "CodeWarrior IDE"				-- display dialog "Adding user path: " & aPath		if (aPath does not end with ":") then set aPath to aPath & ":"				set pathsToAdd to {{name:aPath, recursive:recurse, origin:absolute, format:MacOS Path}}		Set Preferences of panel "Access Paths" to {User Paths:pathsToAdd}			end tellend SetUserPathson SetSysPaths()	-- This was all done in the Stationery project.end SetSysPathson SetupTarget(proj, targetIndex)	tell application "CodeWarrior IDE"				set targetName to name of target targetIndex of project document 1		if targetName contains "Carbon" then			return			set targetAPI to "Carbon"		else if targetName contains "Mach-O" then			if not my IsOSX() then return -- do not try to populate Mach-O targets on pre-OS X systems.			set targetAPI to "Mach-O"		end if				if targetName contains "Debug" then			set targetDebug to true			if pCreateProfiledTargets then				set targetProfile to true			else				set targetProfile to false			end if		else -- if targeName contains "Final" then			set targetDebug to false			set targetProfile to false		end if				set libtype to ""		if targetName contains "MSL" then			set libtype to "MSL"		end if				-- NOTE: no Profile targets. if pCreateProfiledTargets, we make the debug targets also profile-able.				set the current target of project document 1 to target targetIndex of project document 1				-- initialize variables		set projRsrcs to {}		set projFeatures to {}		set sysPaths to {}				-- Grab the fields of our project record and store them in local variables.		set projName to proj's name		set projSettings to proj's settings		try			set projFeatures to proj's features		end try		try			set sysPaths to proj's sysPaths		end try		try			set projRsrcs to proj's rsrcs		end try		set projLibs to proj's projLibs		set projFileData to proj's fileData				-- Figure out what our output file and input libraries will be named.		set fileNameSuffix to ""				if libtype is not "" then			set fileNameSuffix to "_" & libtype		end if				if targetAPI is "Carbon" then			set fileNameSuffix to "_C"		else if targetAPI is "Mach-O" then			set fileNameSuffix to "_M"		end if				-- Debug or not.		if not targetDebug then			set fileNameSuffix to fileNameSuffix & "_O" -- for Optimized.		else			set fileNameSuffix to fileNameSuffix & "_D"		end if				-- non debug targets get different output names.		if not targetDebug then			if targetAPI is "Carbon" then				set targetFilename to projName -- Carbon has same name as project.			else				set targetFilename to projName & "OSX" -- Mach adds OSX on the end.			end if		else			set targetFilename to projName & fileNameSuffix		end if				-- make sure Mach bundles have .app on the end.		if targetAPI is "Mach-O" then			set targetFilename to targetFilename & ".app"		end if				-- Get Preference Panel names.		if targetAPI is "Mach-O" then			set targetPanelName to "PPC Mac OS X Project"			set codeGenPanelName to "PPC CodeGen Mach-O"		else			set targetPanelName to "PPC Project"			set codeGenPanelName to "PPC CodeGen"		end if				-- Set the name of the output file (the application)		Set Preferences of panel targetPanelName to {File Name:targetFilename}				-- If specified, set the File Creator.		try			set creatorName to creator of projSettings			Set Preferences of panel targetPanelName to {File Creator:creatorName}		end try				-- If we have any per-project override settings, set them.		-- ignore errors since ppcProject might not be appropriate for all targets.		try			if (count ppcProject of projSettings) > 0 then				Set Preferences of panel targetPanelName to ppcProject of projSettings			end if		end try				-- my SetUserPaths()				-- Add per-project system paths.		set pathsToAdd to {}		repeat with i in sysPaths			copy {name:i, recursive:false, origin:absolute} to end of pathsToAdd		end repeat		if (count pathsToAdd) > 0 then Â			Set Preferences of panel "Access Paths" to {System Paths:pathsToAdd}				(*		-- Set the appropriate prefix file.		set prefixFile to Prefix File of projSettings		if prefixFile is "" then			set prefixFile to "CarbonPrefix.h"		else			set prefixFile to "Carbon-" & prefixFile		end if		Set Preferences of panel "C/C++ Compiler" to {Prefix File:prefixFile}*)		-- Are we assuming a .c or a .cpp extension?		if projFeatures contains "C++" then			set fileExtension to pCPlusPlusExtension		else			set fileExtension to ".c"		end if			end tell		-- Add source files.	repeat with group in projFileData		set projPath to projPath of group		my SetUserPaths(gSourceDir & projPath, true) -- add this folder to the access paths.				set fileList to group's fileList				set filesToAdd to {}		repeat with i in fileList			if i does not contain "." then set i to i & fileExtension			try -- ignore it if the file doesn't exist.								-- NOTE: if the following line is within a tell "Codewarrior" block then				--  the following Add Files command will fail.				copy alias (gSourceDir & projPath & i) to end of filesToAdd			end try		end repeat				tell application "CodeWarrior IDE"			Add Files filesToAdd						-- Take out source files that do not belong.			set fileNotList to group's fileNotList			Remove Files fileNotList		end tell	end repeat		my SetUserPaths(gDistribRoot & "include:", true)	my SetUserPaths(gRsrcsDir, false)	my SetUserPaths(gLibsDir, false)		tell application "CodeWarrior IDE"				-- take care of debugging and profiling settings		if targetDebug then			set the debug of every target file of target targetIndex Â				of project document 1 to true		end if						if targetAPI is not "Mach-O" then			if targetProfile then				(* ===== Panel PPC Processor ===== *)				Set Preferences of panel codeGenPanelName to Â					{Use Profiler:true}			else				(* ===== Panel PPC Processor ===== *)				Set Preferences of panel codeGenPanelName to Â					{Use Profiler:false}			end if		else			(*			In the following lines we should see Mach-O Profiling instead of Çproperty B617È			But a hyphen is illegal in a name in Applescript (MW's fault). When compiling, the			property B617 will get replaced with Mach-O Profiling, which is okay.			But if the script gets changed and recompiled this will give an error.			So ... replace 'Mach-O Profiling' below with 'Çproperty B617È' (minus the quotes).			You can copy and paste from this comment.			Or comment all of this out and forget Mach-O profiling till MW fixes this.		-- *)			if targetProfile then				(* ===== Panel PPC Processor ===== *)				Set Preferences of panel codeGenPanelName to Â					{Çproperty B617È:metrowerks}			else				(* ===== Panel PPC Processor ===== *)				Set Preferences of panel codeGenPanelName to Â					{Çproperty B617È:off}			end if		*)		end if				-- Add user libraries.		set filesToAdd to {}		if projFeatures contains "sockets" and targetAPI is not "Mach-O" then			if projLibs does not contain "mitsock" then				copy "mitsock" to beginning of projLibs			end if		end if		repeat with i in projLibs			copy gLibsDir & i & fileNameSuffix & ".lib" to end of filesToAdd		end repeat				-- No profiling library for MW on Mach-O yet.		if targetProfile and targetAPI is "Carbon" then			copy gMWCWfolder & "MacOS Support:Profiler:Profiler PPC:Profiler Carbon.Lib" to end of filesToAdd		end if				try			Add Files filesToAdd		on error errmsg number errnum			-- ignore errors when none of those libraries exist.			-- happens when populating a target when we haven't built any of the libraries for that target.			if errnum is not 9393 then error errmsg number errnum		end try				-- Add resources.		set filesToAdd to {}		repeat with i in projRsrcs			if targetAPI is "Carbon" then				if i ends with ".plc" then					copy gRsrcsDir & "Carbon-" & i to end of filesToAdd				else					copy gRsrcsDir & i to end of filesToAdd				end if			else				-- Mach-O does not need the .r files, only the .plc files.				if i does not end with ".r" then					copy gRsrcsDir & i to end of filesToAdd				end if			end if		end repeat		-- display dialog "Rsrcs to add: " & filesToAdd				Add Files filesToAdd				Reset File Paths			end tellend SetupTargeton CreateFolders()	tell application "Finder"				repeat with i in pDirsToCreate			set pth to relPath of i			if pth is not "" then set pth to pth & ":"						-- display dialog "Folder? " & (gDistribRoot & pth & i's name) buttons {"OK"} default button 1						if not (exists folder (gDistribRoot & pth & i's name)) then				-- display dialog "make Folder: " & i's name & " at: " & (gDistribRoot & pth) buttons {"OK"} default button 1								make new folder at folder (gDistribRoot & pth) with properties {name:i's name}			end if		end repeat			end tellend CreateFolderson CreateProject(proj)	tell application "CodeWarrior IDE"				-- This statement doesn't work, because AppleScript is broken.		if proj is {} then return				try			get proj's name		on error			return		end try				set projFilename to proj's name & pProjectFileExtension		set projPathname to gProjectsDir & projFilename		if pAlwaysCreateProjects or not (exists file projPathname of application "Finder") then						try				close (the first project document whose name is projFilename)			end try						set stationeryName to (gStationeryDir & pStationeryName & pProjectFileExtension)			(*	display dialog "creating project: " & projPathname & return & "from: " & stationeryName Â				buttons {"OK"} default button 1		*)			Create Project {projPathname} from stationery alias stationeryName			if the name of window 1 is "Project Messages" then				close first window -- "close window 1" becomes "Close Window 1" (different event)			end if						-- display dialog "created project: " & projPathname buttons {"OK"} default button 1						repeat with i from 1 to (count targets of project document 1)				my SetupTarget(proj, i)			end repeat						set the current target of project document 1 to target 1 of project document 1						Close Project					end if			end tellend CreateProjecton CreateAllProjects()		repeat with proj in gProjectData		CreateProject(proj)	end repeat	end CreateAllProjectsglobal gTargets2Build-- get names of files in thePath that start with "Build"on GetMakeFileNames(thePath)	set theFiles to list folder (thePath) without invisibles	set newList to {}	repeat with f in theFiles		if (f begins with "Build") then			set newList to newList & (f as string)		end if	end repeat		return newListend GetMakeFileNameson AddtoList(aList, anItem)	if (aList does not contain anItem) then		copy anItem to end of aList	end ifend AddtoListon FindTargets2Build()	set gTargets to {}	if pCreateCarbonTargets then		set gTargets to gTargets & "Carbon"	end if	if pCreateMachOTargets then		set gTargets to gTargets & "Mach-O"	end if	set gBuildTypes to {}	if pCreateDebugTargets or pCreateProfileTargets then		set gBuildTypes to gBuildTypes & "Debug"	end if	if pCreateOptimizedTargets then		set gBuildTypes to gBuildTypes & "Final"	end if		-- set gTargets to {"Carbon", "Mach-O"}	-- set gBuildTypes to {"Final", "Debug", "Profile"}		set makeFiles to my GetMakeFileNames(gMakeDir)	if (count items of makeFiles) is 0 then		set makeFiles to gTargets -- if nothing, make everything.	end if		set gTargets2Build to {}		repeat with f in makeFiles		set thisTarget to ""		set targetSet to false		repeat with t in gTargets			if f contains t then				set thisTarget to contents of t				set targetSet to true				exit repeat			end if		end repeat				set typeSet to false		repeat with t in gBuildTypes			if f contains t then				set thisTarget to thisTarget & " " & t				set typeSet to true				exit repeat			end if		end repeat				if targetSet and typeSet then			my AddtoList(gTargets2Build, thisTarget)		else if (targetSet or typeSet) then			if not typeSet then				repeat with t in {"Final", "Debug"}					AddtoList(gTargets2Build, (thisTarget & " " & t))				end repeat			end if			if not targetSet then				repeat with t in gTargets					AddtoList(gTargets2Build, (t & thisTarget))				end repeat			end if		end if	end repeatend FindTargets2Buildon OkaytoBuild(targetName)	repeat with t in gTargets2Build		if (targetName contains t) then			return true		end if	end repeat	return falseend OkaytoBuildon BuildProject(projName)	tell application "CodeWarrior IDE"		open (gProjectsDir & projName & pProjectFileExtension)		if the name of window 1 is "Project Messages" then			close first window -- "close window 1" becomes "Close Window 1" (different event)		end if				repeat with i from 1 to (count targets of project document 1)			-- do we want to build this target?			if my OkaytoBuild(name of target i of project document 1) then								set the current target of project document 1 to target i of project document 1				Make Project				-- If there were compiler warnings, then a compiler window will be in front.				-- For whatever reason, this causes the next "set the current target..." to fail.				-- So check for the window and close it.				if the name of window 1 is "Errors & Warnings" then					close first window -- "close window 1" becomes "Close Window 1" (different event)				end if			end if		end repeat		set the current target of project document 1 to target 1 of project document 1		Close Project	end tellend BuildProjecton BuildAllProjects()	FindTargets2Build()	repeat with proj in gProjectData		try			set projName to proj's name		on error			set projName to ""		end try		-- This statement doesn't work, because AppleScript is broken.		if proj is not {} then			if projName is not "" then				BuildProject(projName)			end if		end if	end repeat	end BuildAllProjectson GuaranteeStationery()	tell application "Finder"		-- does the Stationery already exist?		if not (exists file (gStationeryDir & pStationeryName & pProjectFileExtension) of application "Finder") then			-- copy it.			duplicate file (pStationeryName & pProjectFileExtension) of folder gRsrcsDir to folder gStationeryDir						(*		-- try and make it.		try			-- display dialog "Loading Script: " & (gMakeDir & pMakeStationeryScript) buttons {"OK"} default button 1			set makeScript to load script file (gMakeDir & pMakeStationeryScript)			set makeScript's pCreateLibrary to false			tell makeScript to CreateStationeryProject(pStationeryName, gStationeryDir, gMWCWfolder)		on error			error "Could not make the Stationery project." & return & Â				"Please compile and run the script '" & pMakeStationeryScript & "'" & return & Â				"Save it compiled and/or save the resulting project '" & pStationeryName & ".mcp' and this shouldn't happen again."					end try		*)		end if		my CleanupFolder(gStationeryDir, pStationeryName & pProjectFileExtension)	end tellend GuaranteeStationery-- Delete everything in the folder 'thePath' except the saveFile.on CleanupFolder(thePath, saveFile)	repeat with f in list folder (thePath) with invisibles		if (f as string is not saveFile) then			try				tell application "Finder" to delete folder (thePath & f)			end try			try				tell application "Finder" to delete file (thePath & f)			end try		end if	end repeatend CleanupFolderon CleanupFiles(thePath)	-- get rid of all the files and folders starting with 'trashme' in thePath	repeat with f in list folder (thePath) without invisibles		if ((f as string) begins with "trashme") then			try				tell application "Finder" to delete folder (thePath & f)			end try			try				tell application "Finder" to delete file (thePath & f)			end try		end if	end repeat	-- delete the stationery folder.	try		tell application "Finder" to delete folder gStationeryDir	end tryend CleanupFileson SignalCompletion()		beep	end SignalCompletionwith timeout of 60000 seconds		SetGlobals()	SetProjectData()		CreateFolders()		tell application "CodeWarrior IDE" to activate		GuaranteeStationery()	CreateAllProjects()		if pShouldBuild then		BuildAllProjects()	end if		CleanupFiles(gProjectsDir)		SignalCompletion()	end timeout