Rules never reduced

   20 exp: functional


State 3 conflicts: 1 shift/reduce
State 11 conflicts: 21 reduce/reduce
State 23 conflicts: 6 shift/reduce
State 32 conflicts: 3 shift/reduce
State 45 conflicts: 18 shift/reduce
State 50 conflicts: 3 shift/reduce, 19 reduce/reduce
State 58 conflicts: 3 shift/reduce
State 59 conflicts: 6 shift/reduce
State 60 conflicts: 3 shift/reduce
State 61 conflicts: 3 shift/reduce
State 62 conflicts: 6 shift/reduce
State 63 conflicts: 3 shift/reduce
State 64 conflicts: 6 shift/reduce
State 65 conflicts: 3 shift/reduce
State 66 conflicts: 6 shift/reduce
State 67 conflicts: 6 shift/reduce
State 68 conflicts: 6 shift/reduce
State 69 conflicts: 6 shift/reduce
State 70 conflicts: 6 shift/reduce
State 71 conflicts: 6 shift/reduce
State 72 conflicts: 6 shift/reduce
State 73 conflicts: 6 shift/reduce


Grammar

    0 $accept: input $end

    1 input: exp
    2      | select_clause

    3 select_clause: SELECT obj_list FROM obj_list opt_where

    4 opt_where: /* empty */
    5          | WHERE exp

    6 functional: FUNCTION '(' exp_list ')'

    7 obj_list: scalar_value
    8         | obj_list ',' scalar_value

    9 scalar_value: NUM_INT
   10             | STRING
   11             | IDENT
   12             | functional

   13 scalar_list: scalar_value
   14            | scalar_list ',' scalar_value

   15 exp_list: exp
   16         | exp_list ',' exp

   17 in_sub_expr: scalar_list
   18            | select_clause

   19 exp: scalar_value
   20    | functional
   21    | STRING IDENT
   22    | exp exp
   23    | '(' exp ')'
   24    | exp AND exp
   25    | exp SUB exp
   26    | exp OR exp
   27    | exp XOR exp
   28    | scalar_value BETWEEN scalar_value AND scalar_value
   29    | scalar_value NOT_BETWEEN scalar_value AND scalar_value
   30    | exp RANGE exp
   31    | scalar_value LIKE scalar_value
   32    | scalar_value NOT_LIKE scalar_value
   33    | scalar_value IN '(' in_sub_expr ')'
   34    | scalar_value NOT_IN '(' in_sub_expr ')'
   35    | exp EQ exp
   36    | exp NOTEQ exp
   37    | exp GT exp
   38    | exp GE exp
   39    | exp LT exp
   40    | exp LE exp
   41    | NOT exp
   42    | error STRING
   43    | error IDENT
   44    | error NUM_INT
   45    | exp error
   46    | '(' exp error
   47    | exp OR error
   48    | exp XOR error
   49    | exp NOT error
   50    | exp AND error
   51    | exp SUB error


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 23 33 34 46
')' (41) 6 23 33 34
',' (44) 8 14 16
error (256) 42 43 44 45 46 47 48 49 50 51
IDENT (258) 11 21 43
STRING (259) 10 21 42
NUM_INT (260) 9 44
SELECT (261) 3
FROM (262) 3
WHERE (263) 5
FUNCTION (264) 6
AND (265) 24 28 29 50
NOT (266) 41 49
OR (267) 26 47
SUB (268) 25 51
XOR (269) 27 48
RANGE (270) 30
EQ (271) 35
NOTEQ (272) 36
GT (273) 37
GE (274) 38
LT (275) 39
LE (276) 40
BETWEEN (277) 28
NOT_BETWEEN (278) 29
LIKE (279) 31
NOT_LIKE (280) 32
IN (281) 33
NOT_IN (282) 34


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
input (32)
    on left: 1 2, on right: 0
select_clause (33)
    on left: 3, on right: 2 18
opt_where (34)
    on left: 4 5, on right: 3
functional (35)
    on left: 6, on right: 12 20
obj_list (36)
    on left: 7 8, on right: 3 8
scalar_value (37)
    on left: 9 10 11 12, on right: 7 8 13 14 19 28 29 31 32 33 34
scalar_list (38)
    on left: 13 14, on right: 14 17
exp_list (39)
    on left: 15 16, on right: 6 16
in_sub_expr (40)
    on left: 17 18, on right: 33 34
exp (41)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36
    37 38 39 40 41 42 43 44 45 46 47 48 49 50 51, on right: 1 5 15
    16 22 23 24 25 26 27 30 35 36 37 38 39 40 41 45 46 47 48 49 50
    51


state 0

    0 $accept: . input $end

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    SELECT    shift, and go to state 5
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    input          go to state 9
    select_clause  go to state 10
    functional     go to state 11
    scalar_value   go to state 12
    exp            go to state 13


state 1

   42 exp: error . STRING
   43    | error . IDENT
   44    | error . NUM_INT

    IDENT    shift, and go to state 14
    STRING   shift, and go to state 15
    NUM_INT  shift, and go to state 16


state 2

   11 scalar_value: IDENT .

    $default  reduce using rule 11 (scalar_value)


state 3

   10 scalar_value: STRING .
   21 exp: STRING . IDENT

    IDENT  shift, and go to state 17

    IDENT     [reduce using rule 10 (scalar_value)]
    $default  reduce using rule 10 (scalar_value)


state 4

    9 scalar_value: NUM_INT .

    $default  reduce using rule 9 (scalar_value)


state 5

    3 select_clause: SELECT . obj_list FROM obj_list opt_where

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    obj_list      go to state 20
    scalar_value  go to state 21


state 6

    6 functional: FUNCTION . '(' exp_list ')'

    '('  shift, and go to state 22


state 7

   41 exp: NOT . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 23


state 8

   23 exp: '(' . exp ')'
   46    | '(' . exp error

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 24


state 9

    0 $accept: input . $end

    $end  shift, and go to state 25


state 10

    2 input: select_clause .

    $default  reduce using rule 2 (input)


state 11

   12 scalar_value: functional .
   20 exp: functional .

    $end      reduce using rule 12 (scalar_value)
    $end      [reduce using rule 20 (exp)]
    error     reduce using rule 12 (scalar_value)
    error     [reduce using rule 20 (exp)]
    IDENT     reduce using rule 12 (scalar_value)
    IDENT     [reduce using rule 20 (exp)]
    STRING    reduce using rule 12 (scalar_value)
    STRING    [reduce using rule 20 (exp)]
    NUM_INT   reduce using rule 12 (scalar_value)
    NUM_INT   [reduce using rule 20 (exp)]
    FUNCTION  reduce using rule 12 (scalar_value)
    FUNCTION  [reduce using rule 20 (exp)]
    AND       reduce using rule 12 (scalar_value)
    AND       [reduce using rule 20 (exp)]
    NOT       reduce using rule 12 (scalar_value)
    NOT       [reduce using rule 20 (exp)]
    OR        reduce using rule 12 (scalar_value)
    OR        [reduce using rule 20 (exp)]
    SUB       reduce using rule 12 (scalar_value)
    SUB       [reduce using rule 20 (exp)]
    XOR       reduce using rule 12 (scalar_value)
    XOR       [reduce using rule 20 (exp)]
    RANGE     reduce using rule 12 (scalar_value)
    RANGE     [reduce using rule 20 (exp)]
    EQ        reduce using rule 12 (scalar_value)
    EQ        [reduce using rule 20 (exp)]
    NOTEQ     reduce using rule 12 (scalar_value)
    NOTEQ     [reduce using rule 20 (exp)]
    GT        reduce using rule 12 (scalar_value)
    GT        [reduce using rule 20 (exp)]
    GE        reduce using rule 12 (scalar_value)
    GE        [reduce using rule 20 (exp)]
    LT        reduce using rule 12 (scalar_value)
    LT        [reduce using rule 20 (exp)]
    LE        reduce using rule 12 (scalar_value)
    LE        [reduce using rule 20 (exp)]
    '('       reduce using rule 12 (scalar_value)
    '('       [reduce using rule 20 (exp)]
    ')'       reduce using rule 12 (scalar_value)
    ')'       [reduce using rule 20 (exp)]
    ','       reduce using rule 12 (scalar_value)
    ','       [reduce using rule 20 (exp)]
    $default  reduce using rule 12 (scalar_value)


state 12

   19 exp: scalar_value .
   28    | scalar_value . BETWEEN scalar_value AND scalar_value
   29    | scalar_value . NOT_BETWEEN scalar_value AND scalar_value
   31    | scalar_value . LIKE scalar_value
   32    | scalar_value . NOT_LIKE scalar_value
   33    | scalar_value . IN '(' in_sub_expr ')'
   34    | scalar_value . NOT_IN '(' in_sub_expr ')'

    BETWEEN      shift, and go to state 26
    NOT_BETWEEN  shift, and go to state 27
    LIKE         shift, and go to state 28
    NOT_LIKE     shift, and go to state 29
    IN           shift, and go to state 30
    NOT_IN       shift, and go to state 31

    $default  reduce using rule 19 (exp)


state 13

    1 input: exp .
   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    AND       shift, and go to state 33
    NOT       shift, and go to state 34
    OR        shift, and go to state 35
    SUB       shift, and go to state 36
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end  reduce using rule 1 (input)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 14

   43 exp: error IDENT .

    $default  reduce using rule 43 (exp)


state 15

   42 exp: error STRING .

    $default  reduce using rule 42 (exp)


state 16

   44 exp: error NUM_INT .

    $default  reduce using rule 44 (exp)


state 17

   21 exp: STRING IDENT .

    $default  reduce using rule 21 (exp)


state 18

   10 scalar_value: STRING .

    $default  reduce using rule 10 (scalar_value)


state 19

   12 scalar_value: functional .

    $default  reduce using rule 12 (scalar_value)


state 20

    3 select_clause: SELECT obj_list . FROM obj_list opt_where
    8 obj_list: obj_list . ',' scalar_value

    FROM  shift, and go to state 46
    ','   shift, and go to state 47


state 21

    7 obj_list: scalar_value .

    $default  reduce using rule 7 (obj_list)


state 22

    6 functional: FUNCTION '(' . exp_list ')'

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp_list      go to state 48
    exp           go to state 49


state 23

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   41    | NOT exp .
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    OR        shift, and go to state 35
    SUB       shift, and go to state 36
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 41 (exp)
    error     [reduce using rule 41 (exp)]
    IDENT     [reduce using rule 41 (exp)]
    STRING    [reduce using rule 41 (exp)]
    NUM_INT   [reduce using rule 41 (exp)]
    FUNCTION  [reduce using rule 41 (exp)]
    AND       reduce using rule 41 (exp)
    NOT       reduce using rule 41 (exp)
    '('       [reduce using rule 41 (exp)]
    ')'       reduce using rule 41 (exp)
    ','       reduce using rule 41 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 24

   22 exp: exp . exp
   23    | '(' exp . ')'
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   46    | '(' exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 50
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    AND       shift, and go to state 33
    NOT       shift, and go to state 34
    OR        shift, and go to state 35
    SUB       shift, and go to state 36
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8
    ')'       shift, and go to state 51

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 25

    0 $accept: input $end .

    $default  accept


state 26

   28 exp: scalar_value BETWEEN . scalar_value AND scalar_value

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    scalar_value  go to state 52


state 27

   29 exp: scalar_value NOT_BETWEEN . scalar_value AND scalar_value

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    scalar_value  go to state 53


state 28

   31 exp: scalar_value LIKE . scalar_value

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    scalar_value  go to state 54


state 29

   32 exp: scalar_value NOT_LIKE . scalar_value

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    scalar_value  go to state 55


state 30

   33 exp: scalar_value IN . '(' in_sub_expr ')'

    '('  shift, and go to state 56


state 31

   34 exp: scalar_value NOT_IN . '(' in_sub_expr ')'

    '('  shift, and go to state 57


state 32

   42 exp: error . STRING
   43    | error . IDENT
   44    | error . NUM_INT
   45    | exp error .

    IDENT    shift, and go to state 14
    STRING   shift, and go to state 15
    NUM_INT  shift, and go to state 16

    IDENT     [reduce using rule 45 (exp)]
    STRING    [reduce using rule 45 (exp)]
    NUM_INT   [reduce using rule 45 (exp)]
    $default  reduce using rule 45 (exp)


state 33

   24 exp: exp AND . exp
   50    | exp AND . error

    error     shift, and go to state 58
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 59


state 34

   41 exp: NOT . exp
   49    | exp NOT . error

    error     shift, and go to state 60
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 23


state 35

   26 exp: exp OR . exp
   47    | exp OR . error

    error     shift, and go to state 61
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 62


state 36

   25 exp: exp SUB . exp
   51    | exp SUB . error

    error     shift, and go to state 63
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 64


state 37

   27 exp: exp XOR . exp
   48    | exp XOR . error

    error     shift, and go to state 65
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 66


state 38

   30 exp: exp RANGE . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 67


state 39

   35 exp: exp EQ . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 68


state 40

   36 exp: exp NOTEQ . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 69


state 41

   37 exp: exp GT . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 70


state 42

   38 exp: exp GE . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 71


state 43

   39 exp: exp LT . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 72


state 44

   40 exp: exp LE . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 73


state 45

   22 exp: exp . exp
   22    | exp exp .
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    AND       shift, and go to state 33
    NOT       shift, and go to state 34
    OR        shift, and go to state 35
    SUB       shift, and go to state 36
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 22 (exp)
    error     [reduce using rule 22 (exp)]
    IDENT     [reduce using rule 22 (exp)]
    STRING    [reduce using rule 22 (exp)]
    NUM_INT   [reduce using rule 22 (exp)]
    FUNCTION  [reduce using rule 22 (exp)]
    AND       [reduce using rule 22 (exp)]
    NOT       [reduce using rule 22 (exp)]
    OR        [reduce using rule 22 (exp)]
    SUB       [reduce using rule 22 (exp)]
    XOR       [reduce using rule 22 (exp)]
    RANGE     [reduce using rule 22 (exp)]
    EQ        [reduce using rule 22 (exp)]
    NOTEQ     [reduce using rule 22 (exp)]
    GT        [reduce using rule 22 (exp)]
    GE        [reduce using rule 22 (exp)]
    LT        [reduce using rule 22 (exp)]
    LE        [reduce using rule 22 (exp)]
    '('       [reduce using rule 22 (exp)]
    ')'       reduce using rule 22 (exp)
    ','       reduce using rule 22 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 46

    3 select_clause: SELECT obj_list FROM . obj_list opt_where

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    obj_list      go to state 74
    scalar_value  go to state 21


state 47

    8 obj_list: obj_list ',' . scalar_value

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    scalar_value  go to state 75


state 48

    6 functional: FUNCTION '(' exp_list . ')'
   16 exp_list: exp_list . ',' exp

    ')'  shift, and go to state 76
    ','  shift, and go to state 77


state 49

   15 exp_list: exp .
   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    AND       shift, and go to state 33
    NOT       shift, and go to state 34
    OR        shift, and go to state 35
    SUB       shift, and go to state 36
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    ')'  reduce using rule 15 (exp_list)
    ','  reduce using rule 15 (exp_list)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 50

   42 exp: error . STRING
   43    | error . IDENT
   44    | error . NUM_INT
   45    | exp error .
   46    | '(' exp error .

    IDENT    shift, and go to state 14
    STRING   shift, and go to state 15
    NUM_INT  shift, and go to state 16

    $end      reduce using rule 46 (exp)
    error     reduce using rule 45 (exp)
    error     [reduce using rule 46 (exp)]
    IDENT     [reduce using rule 45 (exp)]
    IDENT     [reduce using rule 46 (exp)]
    STRING    [reduce using rule 45 (exp)]
    STRING    [reduce using rule 46 (exp)]
    NUM_INT   [reduce using rule 45 (exp)]
    NUM_INT   [reduce using rule 46 (exp)]
    FUNCTION  reduce using rule 45 (exp)
    FUNCTION  [reduce using rule 46 (exp)]
    AND       reduce using rule 45 (exp)
    AND       [reduce using rule 46 (exp)]
    NOT       reduce using rule 45 (exp)
    NOT       [reduce using rule 46 (exp)]
    OR        reduce using rule 45 (exp)
    OR        [reduce using rule 46 (exp)]
    SUB       reduce using rule 45 (exp)
    SUB       [reduce using rule 46 (exp)]
    XOR       reduce using rule 45 (exp)
    XOR       [reduce using rule 46 (exp)]
    RANGE     reduce using rule 45 (exp)
    RANGE     [reduce using rule 46 (exp)]
    EQ        reduce using rule 45 (exp)
    EQ        [reduce using rule 46 (exp)]
    NOTEQ     reduce using rule 45 (exp)
    NOTEQ     [reduce using rule 46 (exp)]
    GT        reduce using rule 45 (exp)
    GT        [reduce using rule 46 (exp)]
    GE        reduce using rule 45 (exp)
    GE        [reduce using rule 46 (exp)]
    LT        reduce using rule 45 (exp)
    LT        [reduce using rule 46 (exp)]
    LE        reduce using rule 45 (exp)
    LE        [reduce using rule 46 (exp)]
    '('       reduce using rule 45 (exp)
    '('       [reduce using rule 46 (exp)]
    ')'       reduce using rule 45 (exp)
    ')'       [reduce using rule 46 (exp)]
    ','       reduce using rule 46 (exp)
    $default  reduce using rule 45 (exp)


state 51

   23 exp: '(' exp ')' .

    $default  reduce using rule 23 (exp)


state 52

   28 exp: scalar_value BETWEEN scalar_value . AND scalar_value

    AND  shift, and go to state 78


state 53

   29 exp: scalar_value NOT_BETWEEN scalar_value . AND scalar_value

    AND  shift, and go to state 79


state 54

   31 exp: scalar_value LIKE scalar_value .

    $default  reduce using rule 31 (exp)


state 55

   32 exp: scalar_value NOT_LIKE scalar_value .

    $default  reduce using rule 32 (exp)


state 56

   33 exp: scalar_value IN '(' . in_sub_expr ')'

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    SELECT    shift, and go to state 5
    FUNCTION  shift, and go to state 6

    select_clause  go to state 80
    functional     go to state 19
    scalar_value   go to state 81
    scalar_list    go to state 82
    in_sub_expr    go to state 83


state 57

   34 exp: scalar_value NOT_IN '(' . in_sub_expr ')'

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    SELECT    shift, and go to state 5
    FUNCTION  shift, and go to state 6

    select_clause  go to state 80
    functional     go to state 19
    scalar_value   go to state 81
    scalar_list    go to state 82
    in_sub_expr    go to state 84


state 58

   42 exp: error . STRING
   43    | error . IDENT
   44    | error . NUM_INT
   50    | exp AND error .

    IDENT    shift, and go to state 14
    STRING   shift, and go to state 15
    NUM_INT  shift, and go to state 16

    IDENT     [reduce using rule 50 (exp)]
    STRING    [reduce using rule 50 (exp)]
    NUM_INT   [reduce using rule 50 (exp)]
    $default  reduce using rule 50 (exp)


state 59

   22 exp: exp . exp
   24    | exp . AND exp
   24    | exp AND exp .
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 34
    OR        shift, and go to state 35
    SUB       shift, and go to state 36
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 24 (exp)
    error     [reduce using rule 24 (exp)]
    IDENT     [reduce using rule 24 (exp)]
    STRING    [reduce using rule 24 (exp)]
    NUM_INT   [reduce using rule 24 (exp)]
    FUNCTION  [reduce using rule 24 (exp)]
    AND       reduce using rule 24 (exp)
    '('       [reduce using rule 24 (exp)]
    ')'       reduce using rule 24 (exp)
    ','       reduce using rule 24 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 60

   42 exp: error . STRING
   43    | error . IDENT
   44    | error . NUM_INT
   49    | exp NOT error .

    IDENT    shift, and go to state 14
    STRING   shift, and go to state 15
    NUM_INT  shift, and go to state 16

    IDENT     [reduce using rule 49 (exp)]
    STRING    [reduce using rule 49 (exp)]
    NUM_INT   [reduce using rule 49 (exp)]
    $default  reduce using rule 49 (exp)


state 61

   42 exp: error . STRING
   43    | error . IDENT
   44    | error . NUM_INT
   47    | exp OR error .

    IDENT    shift, and go to state 14
    STRING   shift, and go to state 15
    NUM_INT  shift, and go to state 16

    IDENT     [reduce using rule 47 (exp)]
    STRING    [reduce using rule 47 (exp)]
    NUM_INT   [reduce using rule 47 (exp)]
    $default  reduce using rule 47 (exp)


state 62

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   26    | exp OR exp .
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    SUB       shift, and go to state 36
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 26 (exp)
    error     [reduce using rule 26 (exp)]
    IDENT     [reduce using rule 26 (exp)]
    STRING    [reduce using rule 26 (exp)]
    NUM_INT   [reduce using rule 26 (exp)]
    FUNCTION  [reduce using rule 26 (exp)]
    AND       reduce using rule 26 (exp)
    NOT       reduce using rule 26 (exp)
    OR        reduce using rule 26 (exp)
    '('       [reduce using rule 26 (exp)]
    ')'       reduce using rule 26 (exp)
    ','       reduce using rule 26 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 63

   42 exp: error . STRING
   43    | error . IDENT
   44    | error . NUM_INT
   51    | exp SUB error .

    IDENT    shift, and go to state 14
    STRING   shift, and go to state 15
    NUM_INT  shift, and go to state 16

    IDENT     [reduce using rule 51 (exp)]
    STRING    [reduce using rule 51 (exp)]
    NUM_INT   [reduce using rule 51 (exp)]
    $default  reduce using rule 51 (exp)


state 64

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   25    | exp SUB exp .
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 25 (exp)
    error     [reduce using rule 25 (exp)]
    IDENT     [reduce using rule 25 (exp)]
    STRING    [reduce using rule 25 (exp)]
    NUM_INT   [reduce using rule 25 (exp)]
    FUNCTION  [reduce using rule 25 (exp)]
    AND       reduce using rule 25 (exp)
    NOT       reduce using rule 25 (exp)
    OR        reduce using rule 25 (exp)
    SUB       reduce using rule 25 (exp)
    '('       [reduce using rule 25 (exp)]
    ')'       reduce using rule 25 (exp)
    ','       reduce using rule 25 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 65

   42 exp: error . STRING
   43    | error . IDENT
   44    | error . NUM_INT
   48    | exp XOR error .

    IDENT    shift, and go to state 14
    STRING   shift, and go to state 15
    NUM_INT  shift, and go to state 16

    IDENT     [reduce using rule 48 (exp)]
    STRING    [reduce using rule 48 (exp)]
    NUM_INT   [reduce using rule 48 (exp)]
    $default  reduce using rule 48 (exp)


state 66

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   27    | exp XOR exp .
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 27 (exp)
    error     [reduce using rule 27 (exp)]
    IDENT     [reduce using rule 27 (exp)]
    STRING    [reduce using rule 27 (exp)]
    NUM_INT   [reduce using rule 27 (exp)]
    FUNCTION  [reduce using rule 27 (exp)]
    AND       reduce using rule 27 (exp)
    NOT       reduce using rule 27 (exp)
    OR        reduce using rule 27 (exp)
    SUB       reduce using rule 27 (exp)
    XOR       reduce using rule 27 (exp)
    '('       [reduce using rule 27 (exp)]
    ')'       reduce using rule 27 (exp)
    ','       reduce using rule 27 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 67

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   30    | exp RANGE exp .
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 30 (exp)
    error     [reduce using rule 30 (exp)]
    IDENT     [reduce using rule 30 (exp)]
    STRING    [reduce using rule 30 (exp)]
    NUM_INT   [reduce using rule 30 (exp)]
    FUNCTION  [reduce using rule 30 (exp)]
    AND       reduce using rule 30 (exp)
    NOT       reduce using rule 30 (exp)
    OR        reduce using rule 30 (exp)
    SUB       reduce using rule 30 (exp)
    XOR       reduce using rule 30 (exp)
    RANGE     reduce using rule 30 (exp)
    '('       [reduce using rule 30 (exp)]
    ')'       reduce using rule 30 (exp)
    ','       reduce using rule 30 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 68

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   35    | exp EQ exp .
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 35 (exp)
    error     [reduce using rule 35 (exp)]
    IDENT     [reduce using rule 35 (exp)]
    STRING    [reduce using rule 35 (exp)]
    NUM_INT   [reduce using rule 35 (exp)]
    FUNCTION  [reduce using rule 35 (exp)]
    AND       reduce using rule 35 (exp)
    NOT       reduce using rule 35 (exp)
    OR        reduce using rule 35 (exp)
    SUB       reduce using rule 35 (exp)
    XOR       reduce using rule 35 (exp)
    RANGE     reduce using rule 35 (exp)
    EQ        reduce using rule 35 (exp)
    '('       [reduce using rule 35 (exp)]
    ')'       reduce using rule 35 (exp)
    ','       reduce using rule 35 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 69

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   36    | exp NOTEQ exp .
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 36 (exp)
    error     [reduce using rule 36 (exp)]
    IDENT     [reduce using rule 36 (exp)]
    STRING    [reduce using rule 36 (exp)]
    NUM_INT   [reduce using rule 36 (exp)]
    FUNCTION  [reduce using rule 36 (exp)]
    AND       reduce using rule 36 (exp)
    NOT       reduce using rule 36 (exp)
    OR        reduce using rule 36 (exp)
    SUB       reduce using rule 36 (exp)
    XOR       reduce using rule 36 (exp)
    RANGE     reduce using rule 36 (exp)
    EQ        reduce using rule 36 (exp)
    NOTEQ     reduce using rule 36 (exp)
    '('       [reduce using rule 36 (exp)]
    ')'       reduce using rule 36 (exp)
    ','       reduce using rule 36 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 70

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   37    | exp GT exp .
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 37 (exp)
    error     [reduce using rule 37 (exp)]
    IDENT     [reduce using rule 37 (exp)]
    STRING    [reduce using rule 37 (exp)]
    NUM_INT   [reduce using rule 37 (exp)]
    FUNCTION  [reduce using rule 37 (exp)]
    AND       reduce using rule 37 (exp)
    NOT       reduce using rule 37 (exp)
    OR        reduce using rule 37 (exp)
    SUB       reduce using rule 37 (exp)
    XOR       reduce using rule 37 (exp)
    RANGE     reduce using rule 37 (exp)
    EQ        reduce using rule 37 (exp)
    NOTEQ     reduce using rule 37 (exp)
    GT        reduce using rule 37 (exp)
    '('       [reduce using rule 37 (exp)]
    ')'       reduce using rule 37 (exp)
    ','       reduce using rule 37 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 71

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   38    | exp GE exp .
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 38 (exp)
    error     [reduce using rule 38 (exp)]
    IDENT     [reduce using rule 38 (exp)]
    STRING    [reduce using rule 38 (exp)]
    NUM_INT   [reduce using rule 38 (exp)]
    FUNCTION  [reduce using rule 38 (exp)]
    AND       reduce using rule 38 (exp)
    NOT       reduce using rule 38 (exp)
    OR        reduce using rule 38 (exp)
    SUB       reduce using rule 38 (exp)
    XOR       reduce using rule 38 (exp)
    RANGE     reduce using rule 38 (exp)
    EQ        reduce using rule 38 (exp)
    NOTEQ     reduce using rule 38 (exp)
    GT        reduce using rule 38 (exp)
    GE        reduce using rule 38 (exp)
    '('       [reduce using rule 38 (exp)]
    ')'       reduce using rule 38 (exp)
    ','       reduce using rule 38 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 72

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   39    | exp LT exp .
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end      reduce using rule 39 (exp)
    error     [reduce using rule 39 (exp)]
    IDENT     [reduce using rule 39 (exp)]
    STRING    [reduce using rule 39 (exp)]
    NUM_INT   [reduce using rule 39 (exp)]
    FUNCTION  [reduce using rule 39 (exp)]
    AND       reduce using rule 39 (exp)
    NOT       reduce using rule 39 (exp)
    OR        reduce using rule 39 (exp)
    SUB       reduce using rule 39 (exp)
    XOR       reduce using rule 39 (exp)
    RANGE     reduce using rule 39 (exp)
    EQ        reduce using rule 39 (exp)
    NOTEQ     reduce using rule 39 (exp)
    GT        reduce using rule 39 (exp)
    GE        reduce using rule 39 (exp)
    LT        reduce using rule 39 (exp)
    '('       [reduce using rule 39 (exp)]
    ')'       reduce using rule 39 (exp)
    ','       reduce using rule 39 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 73

   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   40    | exp LE exp .
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    '('       shift, and go to state 8

    $end      reduce using rule 40 (exp)
    error     [reduce using rule 40 (exp)]
    IDENT     [reduce using rule 40 (exp)]
    STRING    [reduce using rule 40 (exp)]
    NUM_INT   [reduce using rule 40 (exp)]
    FUNCTION  [reduce using rule 40 (exp)]
    AND       reduce using rule 40 (exp)
    NOT       reduce using rule 40 (exp)
    OR        reduce using rule 40 (exp)
    SUB       reduce using rule 40 (exp)
    XOR       reduce using rule 40 (exp)
    RANGE     reduce using rule 40 (exp)
    EQ        reduce using rule 40 (exp)
    NOTEQ     reduce using rule 40 (exp)
    GT        reduce using rule 40 (exp)
    GE        reduce using rule 40 (exp)
    LT        reduce using rule 40 (exp)
    LE        reduce using rule 40 (exp)
    '('       [reduce using rule 40 (exp)]
    ')'       reduce using rule 40 (exp)
    ','       reduce using rule 40 (exp)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 74

    3 select_clause: SELECT obj_list FROM obj_list . opt_where
    8 obj_list: obj_list . ',' scalar_value

    WHERE  shift, and go to state 85
    ','    shift, and go to state 47

    $default  reduce using rule 4 (opt_where)

    opt_where  go to state 86


state 75

    8 obj_list: obj_list ',' scalar_value .

    $default  reduce using rule 8 (obj_list)


state 76

    6 functional: FUNCTION '(' exp_list ')' .

    $default  reduce using rule 6 (functional)


state 77

   16 exp_list: exp_list ',' . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 87


state 78

   28 exp: scalar_value BETWEEN scalar_value AND . scalar_value

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    scalar_value  go to state 88


state 79

   29 exp: scalar_value NOT_BETWEEN scalar_value AND . scalar_value

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    scalar_value  go to state 89


state 80

   18 in_sub_expr: select_clause .

    $default  reduce using rule 18 (in_sub_expr)


state 81

   13 scalar_list: scalar_value .

    $default  reduce using rule 13 (scalar_list)


state 82

   14 scalar_list: scalar_list . ',' scalar_value
   17 in_sub_expr: scalar_list .

    ','  shift, and go to state 90

    $default  reduce using rule 17 (in_sub_expr)


state 83

   33 exp: scalar_value IN '(' in_sub_expr . ')'

    ')'  shift, and go to state 91


state 84

   34 exp: scalar_value NOT_IN '(' in_sub_expr . ')'

    ')'  shift, and go to state 92


state 85

    5 opt_where: WHERE . exp

    error     shift, and go to state 1
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    NOT       shift, and go to state 7
    '('       shift, and go to state 8

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 93


state 86

    3 select_clause: SELECT obj_list FROM obj_list opt_where .

    $default  reduce using rule 3 (select_clause)


state 87

   16 exp_list: exp_list ',' exp .
   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    AND       shift, and go to state 33
    NOT       shift, and go to state 34
    OR        shift, and go to state 35
    SUB       shift, and go to state 36
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    ')'  reduce using rule 16 (exp_list)
    ','  reduce using rule 16 (exp_list)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 88

   28 exp: scalar_value BETWEEN scalar_value AND scalar_value .

    $default  reduce using rule 28 (exp)


state 89

   29 exp: scalar_value NOT_BETWEEN scalar_value AND scalar_value .

    $default  reduce using rule 29 (exp)


state 90

   14 scalar_list: scalar_list ',' . scalar_value

    IDENT     shift, and go to state 2
    STRING    shift, and go to state 18
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6

    functional    go to state 19
    scalar_value  go to state 94


state 91

   33 exp: scalar_value IN '(' in_sub_expr ')' .

    $default  reduce using rule 33 (exp)


state 92

   34 exp: scalar_value NOT_IN '(' in_sub_expr ')' .

    $default  reduce using rule 34 (exp)


state 93

    5 opt_where: WHERE exp .
   22 exp: exp . exp
   24    | exp . AND exp
   25    | exp . SUB exp
   26    | exp . OR exp
   27    | exp . XOR exp
   30    | exp . RANGE exp
   35    | exp . EQ exp
   36    | exp . NOTEQ exp
   37    | exp . GT exp
   38    | exp . GE exp
   39    | exp . LT exp
   40    | exp . LE exp
   45    | exp . error
   47    | exp . OR error
   48    | exp . XOR error
   49    | exp . NOT error
   50    | exp . AND error
   51    | exp . SUB error

    error     shift, and go to state 32
    IDENT     shift, and go to state 2
    STRING    shift, and go to state 3
    NUM_INT   shift, and go to state 4
    FUNCTION  shift, and go to state 6
    AND       shift, and go to state 33
    NOT       shift, and go to state 34
    OR        shift, and go to state 35
    SUB       shift, and go to state 36
    XOR       shift, and go to state 37
    RANGE     shift, and go to state 38
    EQ        shift, and go to state 39
    NOTEQ     shift, and go to state 40
    GT        shift, and go to state 41
    GE        shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    '('       shift, and go to state 8

    $end  reduce using rule 5 (opt_where)
    ')'   reduce using rule 5 (opt_where)

    functional    go to state 11
    scalar_value  go to state 12
    exp           go to state 45


state 94

   14 scalar_list: scalar_list ',' scalar_value .

    $default  reduce using rule 14 (scalar_list)
