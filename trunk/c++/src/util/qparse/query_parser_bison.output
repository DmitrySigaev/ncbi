Conflict in state 13 between rule 30 and token AND resolved as reduce.
Conflict in state 13 between rule 30 and token NOT resolved as reduce.
Conflict in state 13 between rule 30 and token OR resolved as shift.
Conflict in state 13 between rule 30 and token SUB resolved as shift.
Conflict in state 13 between rule 30 and token XOR resolved as shift.
Conflict in state 13 between rule 30 and token RANGE resolved as shift.
Conflict in state 13 between rule 30 and token EQ resolved as shift.
Conflict in state 13 between rule 30 and token NOTEQ resolved as shift.
Conflict in state 13 between rule 30 and token GT resolved as shift.
Conflict in state 13 between rule 30 and token GE resolved as shift.
Conflict in state 13 between rule 30 and token LT resolved as shift.
Conflict in state 13 between rule 30 and token LE resolved as shift.
Conflict in state 45 between rule 11 and token AND resolved as reduce.
Conflict in state 45 between rule 11 and token NOT resolved as shift.
Conflict in state 45 between rule 11 and token OR resolved as shift.
Conflict in state 45 between rule 11 and token SUB resolved as shift.
Conflict in state 45 between rule 11 and token XOR resolved as shift.
Conflict in state 45 between rule 11 and token RANGE resolved as shift.
Conflict in state 45 between rule 11 and token EQ resolved as shift.
Conflict in state 45 between rule 11 and token NOTEQ resolved as shift.
Conflict in state 45 between rule 11 and token GT resolved as shift.
Conflict in state 45 between rule 11 and token GE resolved as shift.
Conflict in state 45 between rule 11 and token LT resolved as shift.
Conflict in state 45 between rule 11 and token LE resolved as shift.
Conflict in state 47 between rule 29 and token AND resolved as reduce.
Conflict in state 47 between rule 29 and token NOT resolved as reduce.
Conflict in state 47 between rule 29 and token OR resolved as shift.
Conflict in state 47 between rule 29 and token SUB resolved as shift.
Conflict in state 47 between rule 29 and token XOR resolved as shift.
Conflict in state 47 between rule 29 and token RANGE resolved as shift.
Conflict in state 47 between rule 29 and token EQ resolved as shift.
Conflict in state 47 between rule 29 and token NOTEQ resolved as shift.
Conflict in state 47 between rule 29 and token GT resolved as shift.
Conflict in state 47 between rule 29 and token GE resolved as shift.
Conflict in state 47 between rule 29 and token LT resolved as shift.
Conflict in state 47 between rule 29 and token LE resolved as shift.
Conflict in state 47 between rule 30 and token OR resolved as shift.
Conflict in state 47 between rule 30 and token SUB resolved as shift.
Conflict in state 47 between rule 30 and token XOR resolved as shift.
Conflict in state 47 between rule 30 and token RANGE resolved as shift.
Conflict in state 47 between rule 30 and token EQ resolved as shift.
Conflict in state 47 between rule 30 and token NOTEQ resolved as shift.
Conflict in state 47 between rule 30 and token GT resolved as shift.
Conflict in state 47 between rule 30 and token GE resolved as shift.
Conflict in state 47 between rule 30 and token LT resolved as shift.
Conflict in state 47 between rule 30 and token LE resolved as shift.
Conflict in state 49 between rule 13 and token AND resolved as reduce.
Conflict in state 49 between rule 13 and token NOT resolved as reduce.
Conflict in state 49 between rule 13 and token OR resolved as reduce.
Conflict in state 49 between rule 13 and token SUB resolved as shift.
Conflict in state 49 between rule 13 and token XOR resolved as shift.
Conflict in state 49 between rule 13 and token RANGE resolved as shift.
Conflict in state 49 between rule 13 and token EQ resolved as shift.
Conflict in state 49 between rule 13 and token NOTEQ resolved as shift.
Conflict in state 49 between rule 13 and token GT resolved as shift.
Conflict in state 49 between rule 13 and token GE resolved as shift.
Conflict in state 49 between rule 13 and token LT resolved as shift.
Conflict in state 49 between rule 13 and token LE resolved as shift.
Conflict in state 51 between rule 12 and token AND resolved as reduce.
Conflict in state 51 between rule 12 and token NOT resolved as reduce.
Conflict in state 51 between rule 12 and token OR resolved as reduce.
Conflict in state 51 between rule 12 and token SUB resolved as reduce.
Conflict in state 51 between rule 12 and token XOR resolved as shift.
Conflict in state 51 between rule 12 and token RANGE resolved as shift.
Conflict in state 51 between rule 12 and token EQ resolved as shift.
Conflict in state 51 between rule 12 and token NOTEQ resolved as shift.
Conflict in state 51 between rule 12 and token GT resolved as shift.
Conflict in state 51 between rule 12 and token GE resolved as shift.
Conflict in state 51 between rule 12 and token LT resolved as shift.
Conflict in state 51 between rule 12 and token LE resolved as shift.
Conflict in state 53 between rule 14 and token AND resolved as reduce.
Conflict in state 53 between rule 14 and token NOT resolved as reduce.
Conflict in state 53 between rule 14 and token OR resolved as reduce.
Conflict in state 53 between rule 14 and token SUB resolved as reduce.
Conflict in state 53 between rule 14 and token XOR resolved as reduce.
Conflict in state 53 between rule 14 and token RANGE resolved as shift.
Conflict in state 53 between rule 14 and token EQ resolved as shift.
Conflict in state 53 between rule 14 and token NOTEQ resolved as shift.
Conflict in state 53 between rule 14 and token GT resolved as shift.
Conflict in state 53 between rule 14 and token GE resolved as shift.
Conflict in state 53 between rule 14 and token LT resolved as shift.
Conflict in state 53 between rule 14 and token LE resolved as shift.
Conflict in state 54 between rule 17 and token AND resolved as reduce.
Conflict in state 54 between rule 17 and token NOT resolved as reduce.
Conflict in state 54 between rule 17 and token OR resolved as reduce.
Conflict in state 54 between rule 17 and token SUB resolved as reduce.
Conflict in state 54 between rule 17 and token XOR resolved as reduce.
Conflict in state 54 between rule 17 and token RANGE resolved as reduce.
Conflict in state 54 between rule 17 and token EQ resolved as shift.
Conflict in state 54 between rule 17 and token NOTEQ resolved as shift.
Conflict in state 54 between rule 17 and token GT resolved as shift.
Conflict in state 54 between rule 17 and token GE resolved as shift.
Conflict in state 54 between rule 17 and token LT resolved as shift.
Conflict in state 54 between rule 17 and token LE resolved as shift.
Conflict in state 55 between rule 22 and token AND resolved as reduce.
Conflict in state 55 between rule 22 and token NOT resolved as reduce.
Conflict in state 55 between rule 22 and token OR resolved as reduce.
Conflict in state 55 between rule 22 and token SUB resolved as reduce.
Conflict in state 55 between rule 22 and token XOR resolved as reduce.
Conflict in state 55 between rule 22 and token RANGE resolved as reduce.
Conflict in state 55 between rule 22 and token EQ resolved as reduce.
Conflict in state 55 between rule 22 and token NOTEQ resolved as shift.
Conflict in state 55 between rule 22 and token GT resolved as shift.
Conflict in state 55 between rule 22 and token GE resolved as shift.
Conflict in state 55 between rule 22 and token LT resolved as shift.
Conflict in state 55 between rule 22 and token LE resolved as shift.
Conflict in state 56 between rule 23 and token AND resolved as reduce.
Conflict in state 56 between rule 23 and token NOT resolved as reduce.
Conflict in state 56 between rule 23 and token OR resolved as reduce.
Conflict in state 56 between rule 23 and token SUB resolved as reduce.
Conflict in state 56 between rule 23 and token XOR resolved as reduce.
Conflict in state 56 between rule 23 and token RANGE resolved as reduce.
Conflict in state 56 between rule 23 and token EQ resolved as reduce.
Conflict in state 56 between rule 23 and token NOTEQ resolved as reduce.
Conflict in state 56 between rule 23 and token GT resolved as shift.
Conflict in state 56 between rule 23 and token GE resolved as shift.
Conflict in state 56 between rule 23 and token LT resolved as shift.
Conflict in state 56 between rule 23 and token LE resolved as shift.
Conflict in state 57 between rule 24 and token AND resolved as reduce.
Conflict in state 57 between rule 24 and token NOT resolved as reduce.
Conflict in state 57 between rule 24 and token OR resolved as reduce.
Conflict in state 57 between rule 24 and token SUB resolved as reduce.
Conflict in state 57 between rule 24 and token XOR resolved as reduce.
Conflict in state 57 between rule 24 and token RANGE resolved as reduce.
Conflict in state 57 between rule 24 and token EQ resolved as reduce.
Conflict in state 57 between rule 24 and token NOTEQ resolved as reduce.
Conflict in state 57 between rule 24 and token GT resolved as reduce.
Conflict in state 57 between rule 24 and token GE resolved as shift.
Conflict in state 57 between rule 24 and token LT resolved as shift.
Conflict in state 57 between rule 24 and token LE resolved as shift.
Conflict in state 58 between rule 25 and token AND resolved as reduce.
Conflict in state 58 between rule 25 and token NOT resolved as reduce.
Conflict in state 58 between rule 25 and token OR resolved as reduce.
Conflict in state 58 between rule 25 and token SUB resolved as reduce.
Conflict in state 58 between rule 25 and token XOR resolved as reduce.
Conflict in state 58 between rule 25 and token RANGE resolved as reduce.
Conflict in state 58 between rule 25 and token EQ resolved as reduce.
Conflict in state 58 between rule 25 and token NOTEQ resolved as reduce.
Conflict in state 58 between rule 25 and token GT resolved as reduce.
Conflict in state 58 between rule 25 and token GE resolved as reduce.
Conflict in state 58 between rule 25 and token LT resolved as shift.
Conflict in state 58 between rule 25 and token LE resolved as shift.
Conflict in state 59 between rule 26 and token AND resolved as reduce.
Conflict in state 59 between rule 26 and token NOT resolved as reduce.
Conflict in state 59 between rule 26 and token OR resolved as reduce.
Conflict in state 59 between rule 26 and token SUB resolved as reduce.
Conflict in state 59 between rule 26 and token XOR resolved as reduce.
Conflict in state 59 between rule 26 and token RANGE resolved as reduce.
Conflict in state 59 between rule 26 and token EQ resolved as reduce.
Conflict in state 59 between rule 26 and token NOTEQ resolved as reduce.
Conflict in state 59 between rule 26 and token GT resolved as reduce.
Conflict in state 59 between rule 26 and token GE resolved as reduce.
Conflict in state 59 between rule 26 and token LT resolved as reduce.
Conflict in state 59 between rule 26 and token LE resolved as shift.
Conflict in state 60 between rule 27 and token AND resolved as reduce.
Conflict in state 60 between rule 27 and token NOT resolved as reduce.
Conflict in state 60 between rule 27 and token OR resolved as reduce.
Conflict in state 60 between rule 27 and token SUB resolved as reduce.
Conflict in state 60 between rule 27 and token XOR resolved as reduce.
Conflict in state 60 between rule 27 and token RANGE resolved as reduce.
Conflict in state 60 between rule 27 and token EQ resolved as reduce.
Conflict in state 60 between rule 27 and token NOTEQ resolved as reduce.
Conflict in state 60 between rule 27 and token GT resolved as reduce.
Conflict in state 60 between rule 27 and token GE resolved as reduce.
Conflict in state 60 between rule 27 and token LT resolved as reduce.
Conflict in state 60 between rule 27 and token LE resolved as reduce.


State 3 contains 1 shift/reduce conflict.
State 13 contains 5 shift/reduce conflicts.
State 21 contains 3 shift/reduce conflicts.
State 34 contains 17 shift/reduce conflicts.
State 35 contains 3 shift/reduce conflicts and 18 reduce/reduce conflicts.
State 36 contains 19 reduce/reduce conflicts.
State 44 contains 3 shift/reduce conflicts.
State 45 contains 5 shift/reduce conflicts.
State 46 contains 3 shift/reduce conflicts.
State 47 contains 5 shift/reduce conflicts and 9 reduce/reduce conflicts.
State 48 contains 3 shift/reduce conflicts.
State 49 contains 5 shift/reduce conflicts.
State 50 contains 3 shift/reduce conflicts.
State 51 contains 5 shift/reduce conflicts.
State 52 contains 3 shift/reduce conflicts.
State 53 contains 5 shift/reduce conflicts.
State 54 contains 5 shift/reduce conflicts.
State 55 contains 5 shift/reduce conflicts.
State 56 contains 5 shift/reduce conflicts.
State 57 contains 5 shift/reduce conflicts.
State 58 contains 5 shift/reduce conflicts.
State 59 contains 5 shift/reduce conflicts.
State 60 contains 5 shift/reduce conflicts.


Grammar

  Number, Line, Rule
    1 111 input -> exp
    2 121 scalar_value -> NUM_INT
    3 128 scalar_value -> STRING
    4 133 scalar_value -> IDENT
    5 139 scalar_list -> scalar_value
    6 144 scalar_list -> scalar_list ',' scalar_value
    7 150 exp -> scalar_value
    8 155 exp -> STRING IDENT
    9 164 exp -> exp exp
   10 175 exp -> '(' exp ')'
   11 185 exp -> exp AND exp
   12 190 exp -> exp SUB exp
   13 195 exp -> exp OR exp
   14 200 exp -> exp XOR exp
   15 205 exp -> scalar_value BETWEEN scalar_value AND scalar_value
   16 218 exp -> scalar_value NOT_BETWEEN scalar_value AND scalar_value
   17 232 exp -> exp RANGE exp
   18 237 exp -> scalar_value LIKE scalar_value
   19 242 exp -> scalar_value NOT_LIKE scalar_value
   20 247 exp -> scalar_value IN '(' scalar_list ')'
   21 258 exp -> scalar_value NOT_IN '(' scalar_list ')'
   22 269 exp -> exp EQ exp
   23 274 exp -> exp NOTEQ exp
   24 278 exp -> exp GT exp
   25 282 exp -> exp GE exp
   26 286 exp -> exp LT exp
   27 290 exp -> exp LE exp
   28 294 exp -> '(' exp ')'
   29 299 exp -> exp NOT exp
   30 304 exp -> NOT exp
   31 313 exp -> error STRING
   32 322 exp -> error IDENT
   33 331 exp -> error NUM_INT
   34 340 exp -> exp error
   35 352 exp -> '(' exp error
   36 362 exp -> exp OR error
   37 372 exp -> exp XOR error
   38 382 exp -> exp NOT error
   39 392 exp -> exp AND error
   40 402 exp -> exp SUB error


Terminals, with rules where they appear

$ (-1)
'(' (40) 10 20 21 28 35
')' (41) 10 20 21 28
',' (44) 6
error (256) 31 32 33 34 35 36 37 38 39 40
IDENT (257) 4 8 32
STRING (258) 3 8 31
NUM_INT (259) 2 33
AND (260) 11 15 16 39
NOT (261) 29 30 38
OR (262) 13 36
SUB (263) 12 40
XOR (264) 14 37
RANGE (265) 17
EQ (266) 22
NOTEQ (267) 23
GT (268) 24
GE (269) 25
LT (270) 26
LE (271) 27
BETWEEN (272) 15
NOT_BETWEEN (273) 16
LIKE (274) 18
NOT_LIKE (275) 19
IN (276) 20
NOT_IN (277) 21


Nonterminals, with rules where they appear

input (27)
    on left: 1
scalar_value (28)
    on left: 2 3 4, on right: 5 6 7 15 16 18 19 20 21
scalar_list (29)
    on left: 5 6, on right: 6 20 21
exp (30)
    on left: 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
    26 27 28 29 30 31 32 33 34 35 36 37 38 39 40, on right: 1 9 10
    11 12 13 14 17 22 23 24 25 26 27 28 29 30 34 35 36 37 38 39 40


state 0

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    input	go to state 72
    scalar_value	go to state 7
    exp 	go to state 8



state 1

    exp  ->  error . STRING   (rule 31)
    exp  ->  error . IDENT   (rule 32)
    exp  ->  error . NUM_INT   (rule 33)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11



state 2

    scalar_value  ->  IDENT .   (rule 4)

    $default	reduce using rule 4 (scalar_value)



state 3

    scalar_value  ->  STRING .   (rule 3)
    exp  ->  STRING . IDENT   (rule 8)

    IDENT	shift, and go to state 12

    IDENT	[reduce using rule 3 (scalar_value)]
    $default	reduce using rule 3 (scalar_value)



state 4

    scalar_value  ->  NUM_INT .   (rule 2)

    $default	reduce using rule 2 (scalar_value)



state 5

    exp  ->  NOT . exp   (rule 30)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 13



state 6

    exp  ->  '(' . exp ')'   (rule 10)
    exp  ->  '(' . exp ')'   (rule 28)
    exp  ->  '(' . exp error   (rule 35)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 14



state 7

    exp  ->  scalar_value .   (rule 7)
    exp  ->  scalar_value . BETWEEN scalar_value AND scalar_value   (rule 15)
    exp  ->  scalar_value . NOT_BETWEEN scalar_value AND scalar_value   (rule 16)
    exp  ->  scalar_value . LIKE scalar_value   (rule 18)
    exp  ->  scalar_value . NOT_LIKE scalar_value   (rule 19)
    exp  ->  scalar_value . IN '(' scalar_list ')'   (rule 20)
    exp  ->  scalar_value . NOT_IN '(' scalar_list ')'   (rule 21)

    BETWEEN	shift, and go to state 15
    NOT_BETWEEN	shift, and go to state 16
    LIKE	shift, and go to state 17
    NOT_LIKE	shift, and go to state 18
    IN  	shift, and go to state 19
    NOT_IN	shift, and go to state 20

    $default	reduce using rule 7 (exp)



state 8

    input  ->  exp .   (rule 1)
    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 22
    NOT 	shift, and go to state 23
    OR  	shift, and go to state 24
    SUB 	shift, and go to state 25
    XOR 	shift, and go to state 26
    RANGE	shift, and go to state 27
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 1 (input)
    scalar_value	go to state 7
    exp 	go to state 34



state 9

    exp  ->  error IDENT .   (rule 32)

    $default	reduce using rule 32 (exp)



state 10

    exp  ->  error STRING .   (rule 31)

    $default	reduce using rule 31 (exp)



state 11

    exp  ->  error NUM_INT .   (rule 33)

    $default	reduce using rule 33 (exp)



state 12

    exp  ->  STRING IDENT .   (rule 8)

    $default	reduce using rule 8 (exp)



state 13

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  NOT exp .   (rule 30)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    OR  	shift, and go to state 24
    SUB 	shift, and go to state 25
    XOR 	shift, and go to state 26
    RANGE	shift, and go to state 27
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 30 (exp)
    error	[reduce using rule 30 (exp)]
    IDENT	[reduce using rule 30 (exp)]
    STRING	[reduce using rule 30 (exp)]
    NUM_INT	[reduce using rule 30 (exp)]
    AND 	reduce using rule 30 (exp)
    NOT 	reduce using rule 30 (exp)
    '(' 	[reduce using rule 30 (exp)]
    ')' 	reduce using rule 30 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 14

    exp  ->  exp . exp   (rule 9)
    exp  ->  '(' exp . ')'   (rule 10)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  '(' exp . ')'   (rule 28)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  '(' exp . error   (rule 35)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 35
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 22
    NOT 	shift, and go to state 23
    OR  	shift, and go to state 24
    SUB 	shift, and go to state 25
    XOR 	shift, and go to state 26
    RANGE	shift, and go to state 27
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6
    ')' 	shift, and go to state 36

    scalar_value	go to state 7
    exp 	go to state 34



state 15

    exp  ->  scalar_value BETWEEN . scalar_value AND scalar_value   (rule 15)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 37
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 38



state 16

    exp  ->  scalar_value NOT_BETWEEN . scalar_value AND scalar_value   (rule 16)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 37
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 39



state 17

    exp  ->  scalar_value LIKE . scalar_value   (rule 18)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 37
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 40



state 18

    exp  ->  scalar_value NOT_LIKE . scalar_value   (rule 19)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 37
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 41



state 19

    exp  ->  scalar_value IN . '(' scalar_list ')'   (rule 20)

    '(' 	shift, and go to state 42



state 20

    exp  ->  scalar_value NOT_IN . '(' scalar_list ')'   (rule 21)

    '(' 	shift, and go to state 43



state 21

    exp  ->  error . STRING   (rule 31)
    exp  ->  error . IDENT   (rule 32)
    exp  ->  error . NUM_INT   (rule 33)
    exp  ->  exp error .   (rule 34)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 34 (exp)]
    STRING	[reduce using rule 34 (exp)]
    NUM_INT	[reduce using rule 34 (exp)]
    $default	reduce using rule 34 (exp)



state 22

    exp  ->  exp AND . exp   (rule 11)
    exp  ->  exp AND . error   (rule 39)

    error	shift, and go to state 44
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 45



state 23

    exp  ->  exp NOT . exp   (rule 29)
    exp  ->  NOT . exp   (rule 30)
    exp  ->  exp NOT . error   (rule 38)

    error	shift, and go to state 46
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 47



state 24

    exp  ->  exp OR . exp   (rule 13)
    exp  ->  exp OR . error   (rule 36)

    error	shift, and go to state 48
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 49



state 25

    exp  ->  exp SUB . exp   (rule 12)
    exp  ->  exp SUB . error   (rule 40)

    error	shift, and go to state 50
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 51



state 26

    exp  ->  exp XOR . exp   (rule 14)
    exp  ->  exp XOR . error   (rule 37)

    error	shift, and go to state 52
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 53



state 27

    exp  ->  exp RANGE . exp   (rule 17)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 54



state 28

    exp  ->  exp EQ . exp   (rule 22)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 55



state 29

    exp  ->  exp NOTEQ . exp   (rule 23)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 56



state 30

    exp  ->  exp GT . exp   (rule 24)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 57



state 31

    exp  ->  exp GE . exp   (rule 25)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 58



state 32

    exp  ->  exp LT . exp   (rule 26)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 59



state 33

    exp  ->  exp LE . exp   (rule 27)

    error	shift, and go to state 1
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 5
    '(' 	shift, and go to state 6

    scalar_value	go to state 7
    exp 	go to state 60



state 34

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp exp .   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    AND 	shift, and go to state 22
    NOT 	shift, and go to state 23
    OR  	shift, and go to state 24
    SUB 	shift, and go to state 25
    XOR 	shift, and go to state 26
    RANGE	shift, and go to state 27
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 9 (exp)
    error	[reduce using rule 9 (exp)]
    IDENT	[reduce using rule 9 (exp)]
    STRING	[reduce using rule 9 (exp)]
    NUM_INT	[reduce using rule 9 (exp)]
    AND 	[reduce using rule 9 (exp)]
    NOT 	[reduce using rule 9 (exp)]
    OR  	[reduce using rule 9 (exp)]
    SUB 	[reduce using rule 9 (exp)]
    XOR 	[reduce using rule 9 (exp)]
    RANGE	[reduce using rule 9 (exp)]
    EQ  	[reduce using rule 9 (exp)]
    NOTEQ	[reduce using rule 9 (exp)]
    GT  	[reduce using rule 9 (exp)]
    GE  	[reduce using rule 9 (exp)]
    LT  	[reduce using rule 9 (exp)]
    LE  	[reduce using rule 9 (exp)]
    '(' 	[reduce using rule 9 (exp)]
    ')' 	reduce using rule 9 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 35

    exp  ->  error . STRING   (rule 31)
    exp  ->  error . IDENT   (rule 32)
    exp  ->  error . NUM_INT   (rule 33)
    exp  ->  exp error .   (rule 34)
    exp  ->  '(' exp error .   (rule 35)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    $   	reduce using rule 35 (exp)
    error	reduce using rule 34 (exp)
    error	[reduce using rule 35 (exp)]
    IDENT	[reduce using rule 34 (exp)]
    IDENT	[reduce using rule 35 (exp)]
    STRING	[reduce using rule 34 (exp)]
    STRING	[reduce using rule 35 (exp)]
    NUM_INT	[reduce using rule 34 (exp)]
    NUM_INT	[reduce using rule 35 (exp)]
    AND 	reduce using rule 34 (exp)
    AND 	[reduce using rule 35 (exp)]
    NOT 	reduce using rule 34 (exp)
    NOT 	[reduce using rule 35 (exp)]
    OR  	reduce using rule 34 (exp)
    OR  	[reduce using rule 35 (exp)]
    SUB 	reduce using rule 34 (exp)
    SUB 	[reduce using rule 35 (exp)]
    XOR 	reduce using rule 34 (exp)
    XOR 	[reduce using rule 35 (exp)]
    RANGE	reduce using rule 34 (exp)
    RANGE	[reduce using rule 35 (exp)]
    EQ  	reduce using rule 34 (exp)
    EQ  	[reduce using rule 35 (exp)]
    NOTEQ	reduce using rule 34 (exp)
    NOTEQ	[reduce using rule 35 (exp)]
    GT  	reduce using rule 34 (exp)
    GT  	[reduce using rule 35 (exp)]
    GE  	reduce using rule 34 (exp)
    GE  	[reduce using rule 35 (exp)]
    LT  	reduce using rule 34 (exp)
    LT  	[reduce using rule 35 (exp)]
    LE  	reduce using rule 34 (exp)
    LE  	[reduce using rule 35 (exp)]
    '(' 	reduce using rule 34 (exp)
    '(' 	[reduce using rule 35 (exp)]
    ')' 	reduce using rule 34 (exp)
    ')' 	[reduce using rule 35 (exp)]
    $default	reduce using rule 34 (exp)


state 36

    exp  ->  '(' exp ')' .   (rule 10)
    exp  ->  '(' exp ')' .   (rule 28)

    $   	reduce using rule 10 (exp)
    $   	[reduce using rule 28 (exp)]
    error	reduce using rule 10 (exp)
    error	[reduce using rule 28 (exp)]
    IDENT	reduce using rule 10 (exp)
    IDENT	[reduce using rule 28 (exp)]
    STRING	reduce using rule 10 (exp)
    STRING	[reduce using rule 28 (exp)]
    NUM_INT	reduce using rule 10 (exp)
    NUM_INT	[reduce using rule 28 (exp)]
    AND 	reduce using rule 10 (exp)
    AND 	[reduce using rule 28 (exp)]
    NOT 	reduce using rule 10 (exp)
    NOT 	[reduce using rule 28 (exp)]
    OR  	reduce using rule 10 (exp)
    OR  	[reduce using rule 28 (exp)]
    SUB 	reduce using rule 10 (exp)
    SUB 	[reduce using rule 28 (exp)]
    XOR 	reduce using rule 10 (exp)
    XOR 	[reduce using rule 28 (exp)]
    RANGE	reduce using rule 10 (exp)
    RANGE	[reduce using rule 28 (exp)]
    EQ  	reduce using rule 10 (exp)
    EQ  	[reduce using rule 28 (exp)]
    NOTEQ	reduce using rule 10 (exp)
    NOTEQ	[reduce using rule 28 (exp)]
    GT  	reduce using rule 10 (exp)
    GT  	[reduce using rule 28 (exp)]
    GE  	reduce using rule 10 (exp)
    GE  	[reduce using rule 28 (exp)]
    LT  	reduce using rule 10 (exp)
    LT  	[reduce using rule 28 (exp)]
    LE  	reduce using rule 10 (exp)
    LE  	[reduce using rule 28 (exp)]
    '(' 	reduce using rule 10 (exp)
    '(' 	[reduce using rule 28 (exp)]
    ')' 	reduce using rule 10 (exp)
    ')' 	[reduce using rule 28 (exp)]
    $default	reduce using rule 10 (exp)


state 37

    scalar_value  ->  STRING .   (rule 3)

    $default	reduce using rule 3 (scalar_value)



state 38

    exp  ->  scalar_value BETWEEN scalar_value . AND scalar_value   (rule 15)

    AND 	shift, and go to state 61



state 39

    exp  ->  scalar_value NOT_BETWEEN scalar_value . AND scalar_value   (rule 16)

    AND 	shift, and go to state 62



state 40

    exp  ->  scalar_value LIKE scalar_value .   (rule 18)

    $default	reduce using rule 18 (exp)



state 41

    exp  ->  scalar_value NOT_LIKE scalar_value .   (rule 19)

    $default	reduce using rule 19 (exp)



state 42

    exp  ->  scalar_value IN '(' . scalar_list ')'   (rule 20)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 37
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 63
    scalar_list	go to state 64



state 43

    exp  ->  scalar_value NOT_IN '(' . scalar_list ')'   (rule 21)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 37
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 63
    scalar_list	go to state 65



state 44

    exp  ->  error . STRING   (rule 31)
    exp  ->  error . IDENT   (rule 32)
    exp  ->  error . NUM_INT   (rule 33)
    exp  ->  exp AND error .   (rule 39)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 39 (exp)]
    STRING	[reduce using rule 39 (exp)]
    NUM_INT	[reduce using rule 39 (exp)]
    $default	reduce using rule 39 (exp)



state 45

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp AND exp .   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOT 	shift, and go to state 23
    OR  	shift, and go to state 24
    SUB 	shift, and go to state 25
    XOR 	shift, and go to state 26
    RANGE	shift, and go to state 27
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 11 (exp)
    error	[reduce using rule 11 (exp)]
    IDENT	[reduce using rule 11 (exp)]
    STRING	[reduce using rule 11 (exp)]
    NUM_INT	[reduce using rule 11 (exp)]
    AND 	reduce using rule 11 (exp)
    '(' 	[reduce using rule 11 (exp)]
    ')' 	reduce using rule 11 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 46

    exp  ->  error . STRING   (rule 31)
    exp  ->  error . IDENT   (rule 32)
    exp  ->  error . NUM_INT   (rule 33)
    exp  ->  exp NOT error .   (rule 38)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 38 (exp)]
    STRING	[reduce using rule 38 (exp)]
    NUM_INT	[reduce using rule 38 (exp)]
    $default	reduce using rule 38 (exp)



state 47

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp NOT exp .   (rule 29)
    exp  ->  NOT exp .   (rule 30)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    OR  	shift, and go to state 24
    SUB 	shift, and go to state 25
    XOR 	shift, and go to state 26
    RANGE	shift, and go to state 27
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 29 (exp)
    $   	[reduce using rule 30 (exp)]
    error	[reduce using rule 29 (exp)]
    error	[reduce using rule 30 (exp)]
    IDENT	[reduce using rule 29 (exp)]
    IDENT	[reduce using rule 30 (exp)]
    STRING	[reduce using rule 29 (exp)]
    STRING	[reduce using rule 30 (exp)]
    NUM_INT	[reduce using rule 29 (exp)]
    NUM_INT	[reduce using rule 30 (exp)]
    AND 	reduce using rule 29 (exp)
    AND 	[reduce using rule 30 (exp)]
    NOT 	reduce using rule 29 (exp)
    NOT 	[reduce using rule 30 (exp)]
    '(' 	[reduce using rule 29 (exp)]
    '(' 	[reduce using rule 30 (exp)]
    ')' 	reduce using rule 29 (exp)
    ')' 	[reduce using rule 30 (exp)]
    scalar_value	go to state 7
    exp 	go to state 34



state 48

    exp  ->  error . STRING   (rule 31)
    exp  ->  error . IDENT   (rule 32)
    exp  ->  error . NUM_INT   (rule 33)
    exp  ->  exp OR error .   (rule 36)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 36 (exp)]
    STRING	[reduce using rule 36 (exp)]
    NUM_INT	[reduce using rule 36 (exp)]
    $default	reduce using rule 36 (exp)



state 49

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp OR exp .   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    SUB 	shift, and go to state 25
    XOR 	shift, and go to state 26
    RANGE	shift, and go to state 27
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 13 (exp)
    error	[reduce using rule 13 (exp)]
    IDENT	[reduce using rule 13 (exp)]
    STRING	[reduce using rule 13 (exp)]
    NUM_INT	[reduce using rule 13 (exp)]
    AND 	reduce using rule 13 (exp)
    NOT 	reduce using rule 13 (exp)
    OR  	reduce using rule 13 (exp)
    '(' 	[reduce using rule 13 (exp)]
    ')' 	reduce using rule 13 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 50

    exp  ->  error . STRING   (rule 31)
    exp  ->  error . IDENT   (rule 32)
    exp  ->  error . NUM_INT   (rule 33)
    exp  ->  exp SUB error .   (rule 40)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 40 (exp)]
    STRING	[reduce using rule 40 (exp)]
    NUM_INT	[reduce using rule 40 (exp)]
    $default	reduce using rule 40 (exp)



state 51

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp SUB exp .   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    XOR 	shift, and go to state 26
    RANGE	shift, and go to state 27
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 12 (exp)
    error	[reduce using rule 12 (exp)]
    IDENT	[reduce using rule 12 (exp)]
    STRING	[reduce using rule 12 (exp)]
    NUM_INT	[reduce using rule 12 (exp)]
    AND 	reduce using rule 12 (exp)
    NOT 	reduce using rule 12 (exp)
    OR  	reduce using rule 12 (exp)
    SUB 	reduce using rule 12 (exp)
    '(' 	[reduce using rule 12 (exp)]
    ')' 	reduce using rule 12 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 52

    exp  ->  error . STRING   (rule 31)
    exp  ->  error . IDENT   (rule 32)
    exp  ->  error . NUM_INT   (rule 33)
    exp  ->  exp XOR error .   (rule 37)

    IDENT	shift, and go to state 9
    STRING	shift, and go to state 10
    NUM_INT	shift, and go to state 11

    IDENT	[reduce using rule 37 (exp)]
    STRING	[reduce using rule 37 (exp)]
    NUM_INT	[reduce using rule 37 (exp)]
    $default	reduce using rule 37 (exp)



state 53

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp XOR exp .   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    RANGE	shift, and go to state 27
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 14 (exp)
    error	[reduce using rule 14 (exp)]
    IDENT	[reduce using rule 14 (exp)]
    STRING	[reduce using rule 14 (exp)]
    NUM_INT	[reduce using rule 14 (exp)]
    AND 	reduce using rule 14 (exp)
    NOT 	reduce using rule 14 (exp)
    OR  	reduce using rule 14 (exp)
    SUB 	reduce using rule 14 (exp)
    XOR 	reduce using rule 14 (exp)
    '(' 	[reduce using rule 14 (exp)]
    ')' 	reduce using rule 14 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 54

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp RANGE exp .   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    EQ  	shift, and go to state 28
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 17 (exp)
    error	[reduce using rule 17 (exp)]
    IDENT	[reduce using rule 17 (exp)]
    STRING	[reduce using rule 17 (exp)]
    NUM_INT	[reduce using rule 17 (exp)]
    AND 	reduce using rule 17 (exp)
    NOT 	reduce using rule 17 (exp)
    OR  	reduce using rule 17 (exp)
    SUB 	reduce using rule 17 (exp)
    XOR 	reduce using rule 17 (exp)
    RANGE	reduce using rule 17 (exp)
    '(' 	[reduce using rule 17 (exp)]
    ')' 	reduce using rule 17 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 55

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp EQ exp .   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    NOTEQ	shift, and go to state 29
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 22 (exp)
    error	[reduce using rule 22 (exp)]
    IDENT	[reduce using rule 22 (exp)]
    STRING	[reduce using rule 22 (exp)]
    NUM_INT	[reduce using rule 22 (exp)]
    AND 	reduce using rule 22 (exp)
    NOT 	reduce using rule 22 (exp)
    OR  	reduce using rule 22 (exp)
    SUB 	reduce using rule 22 (exp)
    XOR 	reduce using rule 22 (exp)
    RANGE	reduce using rule 22 (exp)
    EQ  	reduce using rule 22 (exp)
    '(' 	[reduce using rule 22 (exp)]
    ')' 	reduce using rule 22 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 56

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp NOTEQ exp .   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    GT  	shift, and go to state 30
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 23 (exp)
    error	[reduce using rule 23 (exp)]
    IDENT	[reduce using rule 23 (exp)]
    STRING	[reduce using rule 23 (exp)]
    NUM_INT	[reduce using rule 23 (exp)]
    AND 	reduce using rule 23 (exp)
    NOT 	reduce using rule 23 (exp)
    OR  	reduce using rule 23 (exp)
    SUB 	reduce using rule 23 (exp)
    XOR 	reduce using rule 23 (exp)
    RANGE	reduce using rule 23 (exp)
    EQ  	reduce using rule 23 (exp)
    NOTEQ	reduce using rule 23 (exp)
    '(' 	[reduce using rule 23 (exp)]
    ')' 	reduce using rule 23 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 57

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp GT exp .   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    GE  	shift, and go to state 31
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 24 (exp)
    error	[reduce using rule 24 (exp)]
    IDENT	[reduce using rule 24 (exp)]
    STRING	[reduce using rule 24 (exp)]
    NUM_INT	[reduce using rule 24 (exp)]
    AND 	reduce using rule 24 (exp)
    NOT 	reduce using rule 24 (exp)
    OR  	reduce using rule 24 (exp)
    SUB 	reduce using rule 24 (exp)
    XOR 	reduce using rule 24 (exp)
    RANGE	reduce using rule 24 (exp)
    EQ  	reduce using rule 24 (exp)
    NOTEQ	reduce using rule 24 (exp)
    GT  	reduce using rule 24 (exp)
    '(' 	[reduce using rule 24 (exp)]
    ')' 	reduce using rule 24 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 58

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp GE exp .   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    LT  	shift, and go to state 32
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 25 (exp)
    error	[reduce using rule 25 (exp)]
    IDENT	[reduce using rule 25 (exp)]
    STRING	[reduce using rule 25 (exp)]
    NUM_INT	[reduce using rule 25 (exp)]
    AND 	reduce using rule 25 (exp)
    NOT 	reduce using rule 25 (exp)
    OR  	reduce using rule 25 (exp)
    SUB 	reduce using rule 25 (exp)
    XOR 	reduce using rule 25 (exp)
    RANGE	reduce using rule 25 (exp)
    EQ  	reduce using rule 25 (exp)
    NOTEQ	reduce using rule 25 (exp)
    GT  	reduce using rule 25 (exp)
    GE  	reduce using rule 25 (exp)
    '(' 	[reduce using rule 25 (exp)]
    ')' 	reduce using rule 25 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 59

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp LT exp .   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    LE  	shift, and go to state 33
    '(' 	shift, and go to state 6

    $   	reduce using rule 26 (exp)
    error	[reduce using rule 26 (exp)]
    IDENT	[reduce using rule 26 (exp)]
    STRING	[reduce using rule 26 (exp)]
    NUM_INT	[reduce using rule 26 (exp)]
    AND 	reduce using rule 26 (exp)
    NOT 	reduce using rule 26 (exp)
    OR  	reduce using rule 26 (exp)
    SUB 	reduce using rule 26 (exp)
    XOR 	reduce using rule 26 (exp)
    RANGE	reduce using rule 26 (exp)
    EQ  	reduce using rule 26 (exp)
    NOTEQ	reduce using rule 26 (exp)
    GT  	reduce using rule 26 (exp)
    GE  	reduce using rule 26 (exp)
    LT  	reduce using rule 26 (exp)
    '(' 	[reduce using rule 26 (exp)]
    ')' 	reduce using rule 26 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 60

    exp  ->  exp . exp   (rule 9)
    exp  ->  exp . AND exp   (rule 11)
    exp  ->  exp . SUB exp   (rule 12)
    exp  ->  exp . OR exp   (rule 13)
    exp  ->  exp . XOR exp   (rule 14)
    exp  ->  exp . RANGE exp   (rule 17)
    exp  ->  exp . EQ exp   (rule 22)
    exp  ->  exp . NOTEQ exp   (rule 23)
    exp  ->  exp . GT exp   (rule 24)
    exp  ->  exp . GE exp   (rule 25)
    exp  ->  exp . LT exp   (rule 26)
    exp  ->  exp . LE exp   (rule 27)
    exp  ->  exp LE exp .   (rule 27)
    exp  ->  exp . NOT exp   (rule 29)
    exp  ->  exp . error   (rule 34)
    exp  ->  exp . OR error   (rule 36)
    exp  ->  exp . XOR error   (rule 37)
    exp  ->  exp . NOT error   (rule 38)
    exp  ->  exp . AND error   (rule 39)
    exp  ->  exp . SUB error   (rule 40)

    error	shift, and go to state 21
    IDENT	shift, and go to state 2
    STRING	shift, and go to state 3
    NUM_INT	shift, and go to state 4
    '(' 	shift, and go to state 6

    $   	reduce using rule 27 (exp)
    error	[reduce using rule 27 (exp)]
    IDENT	[reduce using rule 27 (exp)]
    STRING	[reduce using rule 27 (exp)]
    NUM_INT	[reduce using rule 27 (exp)]
    AND 	reduce using rule 27 (exp)
    NOT 	reduce using rule 27 (exp)
    OR  	reduce using rule 27 (exp)
    SUB 	reduce using rule 27 (exp)
    XOR 	reduce using rule 27 (exp)
    RANGE	reduce using rule 27 (exp)
    EQ  	reduce using rule 27 (exp)
    NOTEQ	reduce using rule 27 (exp)
    GT  	reduce using rule 27 (exp)
    GE  	reduce using rule 27 (exp)
    LT  	reduce using rule 27 (exp)
    LE  	reduce using rule 27 (exp)
    '(' 	[reduce using rule 27 (exp)]
    ')' 	reduce using rule 27 (exp)
    scalar_value	go to state 7
    exp 	go to state 34



state 61

    exp  ->  scalar_value BETWEEN scalar_value AND . scalar_value   (rule 15)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 37
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 66



state 62

    exp  ->  scalar_value NOT_BETWEEN scalar_value AND . scalar_value   (rule 16)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 37
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 67



state 63

    scalar_list  ->  scalar_value .   (rule 5)

    $default	reduce using rule 5 (scalar_list)



state 64

    scalar_list  ->  scalar_list . ',' scalar_value   (rule 6)
    exp  ->  scalar_value IN '(' scalar_list . ')'   (rule 20)

    ',' 	shift, and go to state 68
    ')' 	shift, and go to state 69



state 65

    scalar_list  ->  scalar_list . ',' scalar_value   (rule 6)
    exp  ->  scalar_value NOT_IN '(' scalar_list . ')'   (rule 21)

    ',' 	shift, and go to state 68
    ')' 	shift, and go to state 70



state 66

    exp  ->  scalar_value BETWEEN scalar_value AND scalar_value .   (rule 15)

    $default	reduce using rule 15 (exp)



state 67

    exp  ->  scalar_value NOT_BETWEEN scalar_value AND scalar_value .   (rule 16)

    $default	reduce using rule 16 (exp)



state 68

    scalar_list  ->  scalar_list ',' . scalar_value   (rule 6)

    IDENT	shift, and go to state 2
    STRING	shift, and go to state 37
    NUM_INT	shift, and go to state 4

    scalar_value	go to state 71



state 69

    exp  ->  scalar_value IN '(' scalar_list ')' .   (rule 20)

    $default	reduce using rule 20 (exp)



state 70

    exp  ->  scalar_value NOT_IN '(' scalar_list ')' .   (rule 21)

    $default	reduce using rule 21 (exp)



state 71

    scalar_list  ->  scalar_list ',' scalar_value .   (rule 6)

    $default	reduce using rule 6 (scalar_list)



state 72

    $   	go to state 73



state 73

    $   	go to state 74



state 74

    $default	accept


