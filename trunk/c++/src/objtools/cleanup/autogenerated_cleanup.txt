# This file describes to datatool how to generate
# the autogenerated_cleanup files.
# Its syntax is described in a big comment at the
# top of traversal_spec_file_parser.cpp

# example datatool usage to get the files out of this:
# ( foo.asn is the file(s) containing the ASN spec )
# ( spec.txt is THIS file. )
# -m foo.asn -oA -tvs spec.txt

# Last known command-line used for this:
# (You would have to adjust the file names to fit your 
# directory, of course )
# datatool -pch ncbi_pch.hpp -m /home/kornbluh/c++.opt/src/objects/seqset/seqset.asn  -m /home/kornbluh/c++.opt/src/objects/general/general.asn -m /home/kornbluh/c++.opt/src/objects/seq/seq.asn  -m /home/kornbluh/c++.opt/src/objects/seqloc/seqloc.asn -m /home/kornbluh/c++.opt/src/objects/seqfeat/seqfeat.asn -m /home/kornbluh/c++.opt/src/objects/seqblock/seqblock.asn  -m /home/kornbluh/c++.opt/src/objects/seqalign/seqalign.asn -m /home/kornbluh/c++.opt/src/objects/pub/pub.asn  -m /home/kornbluh/c++.opt/src/objects/biblio/biblio.asn  -m /home/kornbluh/c++.opt/src/objects/seqres/seqres.asn -m /home/kornbluh/c++.opt/src/objects/seqtable/seqtable.asn -m /home/kornbluh/c++.opt/src/objects/medline/medline.asn -m /home/kornbluh/c++.opt/src/objects/submit/submit.asn -oA -tvs /home/kornbluh/c++.opt/src/objtools/cleanup/autogenerated_cleanup.txt

# Notice the hard-coded paths in here.  It's likely that you'll want
# to change these to put the code into the right place in your own
# build directory.
# ( TODO: Hard-coded paths are bad coding style.  I should fix this when I get the chance. )
output_header_file "/home/kornbluh/c++.opt/src/objtools/cleanup/autogenerated_cleanup.hpp"
output_source_file "/home/kornbluh/c++.opt/src/objtools/cleanup/autogenerated_cleanup.cpp"
output_class_name CAutogeneratedCleanup

# The auto-generated class needs a pointer to the class containing all the cleanup functions
member { CNewCleanup_imp & m_NewCleanup }

root Seq-entry  BasicCleanupSeqEntry
root Seq-submit BasicCleanupSeqSubmit
root Seq-annot  BasicCleanupSeqAnnot
root Bioseq     BasicCleanupBioseq
root Bioseq-set BasicCleanupBioseqSet
root Seq-feat   BasicCleanupSeqFeat

# You can use angle brackets or double-quotes
header_include "newcleanupp.hpp"
# Yes, you need the following line because the auto-generator doesn't
# necessarily know exactly how you want to include the .hpp file
source_include "autogenerated_cleanup.hpp"
source_include <objects/misc/sequence_macros.hpp>

use m_NewCleanup.x_CleanupStringMarkChanged {
    Seqdesc.name
    Seqdesc.title
    Seqdesc.comment
    Seqdesc.region
    Affil.str
    Affil.std.affil
    Affil.std.div
    Affil.std.city
    Affil.std.sub
    Affil.std.country
    Affil.std.street
    Affil.std.email
    Affil.std.fax
    Affil.std.phone
    Affil.std.postal-code
#Commented these out for now, since we should really
# only allow them when under Seq-feat.user
# In C as: VisitAllUserObjectsInUop ((UserObjectPtr) sfp->data.value.ptrvalue, NULL, CleanUserObject);
##    User-field.data.str
##    User-field.data.strs.E
##    User-field.label.str
##    User-object.type.str
    RNA-ref.ext.name
    Seq-feat.data.region
    Seq-feat.comment
    Seq-feat.title
    Seq-feat.except-text
    Gene-ref.locus
    Gene-ref.allele
    Gene-ref.desc
    Gene-ref.maploc
    Gene-ref.locus-tag
    Gene-ref.syn.E
    Prot-ref.desc
    Prot-ref.name.E
    Prot-ref.ec.E
    Prot-ref.activity.E
    RNA-gen.product
    RNA-gen.class
    RNA-gen.quals.E.qual
    RNA-gen.quals.E.val
    Imprint.volume
    Imprint.issue
    Imprint.pages
    Imprint.section
    Imprint.part-sup
    Imprint.language
    Imprint.part-supi
    Imp-feat.key
    Imp-feat.loc
    Imp-feat.descr
    Org-ref.mod.E
    Org-ref.syn.E
    Org-ref.taxname
    Org-ref.common
    OrgMod.subname
    OrgMod.attrib
    OrgName.attrib
    OrgName.lineage
    OrgName.div
}

use m_NewCleanup.x_ConvertDoubleQuotesMarkChanged {
    Seqdesc.region
    Seq-feat.data.region
    Seq-feat.comment
    Gene-ref.locus
    Gene-ref.allele
    Gene-ref.desc
    Gene-ref.maploc
    Gene-ref.locus-tag
    Gene-ref.syn.E
    Prot-ref.desc
    Prot-ref.name.E
    Prot-ref.ec.E
    Prot-ref.activity.E
    RNA-ref.ext.name
    RNA-gen.product
    RNA-gen.class
    RNA-gen.quals.E.qual
    RNA-gen.quals.E.val
    Pubdesc.comment
}

use m_NewCleanup.x_CompressStringSpacesMarkChanged {
    Seq-feat.data.region
    Affil.str
    Affil.std.affil
    Affil.std.div
    Affil.std.city
    Affil.std.sub
    Affil.std.country
    Affil.std.street
    Affil.std.email
    Affil.std.fax
    Affil.std.phone
    Affil.std.postal-code
    Prot-ref.desc
    Prot-ref.name.E
    RNA-ref.ext.name
    RNA-gen.product
    RNA-gen.class
    RNA-gen.quals.E.qual
    RNA-gen.quals.E.val
    Imprint.volume
    Imprint.issue
    Imprint.pages
    Imprint.section
    Imprint.part-sup
    Imprint.language
    Imprint.part-supi
    Org-ref.mod.E
    OrgMod.subname
    OrgMod.attrib
    Org-ref.taxname
    Org-ref.common
}

use m_NewCleanup.x_StripSpacesMarkChanged {
    Cit-art.title.E.name
}

use m_NewCleanup.x_FixUpEllipsis {
    Seq-feat.comment
}

use m_NewCleanup.SeqIdBC { Seq-id }

use m_NewCleanup.SeqLocBC { Seq-loc }
use m_NewCleanup.ConvertSeqLocWholeToInt {
    Seq-loc EXCEPT { product }
}

use m_NewCleanup.SeqsetBC { Bioseq-set }

use m_NewCleanup.SeqfeatBC { Seq-feat }
use m_NewCleanup.x_SortUniqSeqFeat { POST Seq-feat }

# Seq-feat data stuff
use m_NewCleanup.GeneFeatBC { Seq-feat.data.gene, Seq-feat }
use m_NewCleanup.GenerefBC { POST Gene-ref }
use m_NewCleanup.ProtFeatfBC { Seq-feat.data.prot, Seq-feat }
use m_NewCleanup.PostProtFeatfBC { POST Seq-feat.data.prot }
use m_NewCleanup.ProtrefBC { Prot-ref }
use m_NewCleanup.RnaFeatBC { POST Seq-feat.data.rna, Seq-feat }
use m_NewCleanup.RnarefBC { POST RNA-ref }
use m_NewCleanup.PubdescBC { POST Pubdesc }
use m_NewCleanup.ImpFeatBC { POST Seq-feat.data.imp, Seq-feat }
use m_NewCleanup.SiteFeatBC { Seq-feat.data.site, Seq-feat }
use m_NewCleanup.CdregionFeatBC { Seq-feat.data.cdregion, Seq-feat }

use m_NewCleanup.GBblockBC { GB-block }
use m_NewCleanup.EMBLblockBC { EMBL-block }

use m_NewCleanup.x_MoveSeqdescOrgToSourceOrg { Seqdesc.org, Seqdesc }

# Biosource stuff
use m_NewCleanup.BiosourceBC { BioSource }
use m_NewCleanup.x_SortUniqBiosource { POST BioSource }
use m_NewCleanup.x_ModernizePCRPrimers { BioSource }
use m_NewCleanup.PCRReactionSetBC { BioSource.pcr-primers }
use m_NewCleanup.x_CleanupOrgModAndSubSourceOther { BioSource.org.orgname, BioSource }

use m_NewCleanup.x_GBQualToOrgRef {  
    Seq-feat.data.org,        Seq-feat
    Seq-feat.data.biosrc.org, Seq-feat
}

use m_NewCleanup.x_MoveSeqfeatOrgToSourceOrg { Seq-feat.data.org, Seq-feat }

use m_NewCleanup.x_ExpandCombinedQuals { Seq-feat.qual }

use m_NewCleanup.x_SortUniqOrgRef { POST Org-ref }

use m_NewCleanup.x_DateStdBC { Date-std }

use m_NewCleanup.DbtagBC { Dbtag }

use m_NewCleanup.DeltaExtBC { Seq-inst.ext.delta, Seq-inst }

use m_NewCleanup.x_FixUnsetMolFromBiomol{ Bioseq.descr.E.molinfo, Bioseq }

use m_NewCleanup.UserObjectBC { POST User-object }

use m_NewCleanup.x_CleanupECNumber { Prot-ref.ec.E }
