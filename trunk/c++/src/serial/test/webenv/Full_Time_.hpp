/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code is generated by application DATATOOL
 *   using specifications from the ASN data definition file
 *   'twebenv.asn'.
 *
 * ATTENTION:
 *   Don't edit or check-in this file to the CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

#ifndef FULL_TIME_BASE_HPP
#define FULL_TIME_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated classes

class CFull_Time_Base : public ncbi::CObject
{
    typedef ncbi::CObject Tparent;
public:
    // constructor
    CFull_Time_Base(void);
    // destructor
    virtual ~CFull_Time_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TYear;
    typedef int TMonth;
    typedef int TDay;
    typedef int THour;
    typedef int TMinute;
    typedef int TSecond;

    // members' getters
    // members' setters
    void ResetYear(void);
    const int& GetYear(void) const;
    void SetYear(const int& value);
    int& SetYear(void);

    void ResetMonth(void);
    const int& GetMonth(void) const;
    void SetMonth(const int& value);
    int& SetMonth(void);

    void ResetDay(void);
    const int& GetDay(void) const;
    void SetDay(const int& value);
    int& SetDay(void);

    void ResetHour(void);
    const int& GetHour(void) const;
    void SetHour(const int& value);
    int& SetHour(void);

    void ResetMinute(void);
    const int& GetMinute(void) const;
    void SetMinute(const int& value);
    int& SetMinute(void);

    void ResetSecond(void);
    const int& GetSecond(void) const;
    void SetSecond(const int& value);
    int& SetSecond(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CFull_Time_Base(const CFull_Time_Base&);
    CFull_Time_Base& operator=(const CFull_Time_Base&);

    // members' data
    TYear m_Year;
    TMonth m_Month;
    TDay m_Day;
    THour m_Hour;
    TMinute m_Minute;
    TSecond m_Second;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
void CFull_Time_Base::ResetYear(void)
{
    m_Year = 0;
}

inline
const CFull_Time_Base::TYear& CFull_Time_Base::GetYear(void) const
{
    return m_Year;
}

inline
void CFull_Time_Base::SetYear(const TYear& value)
{
    m_Year = value;
}

inline
CFull_Time_Base::TYear& CFull_Time_Base::SetYear(void)
{
    return m_Year;
}

inline
void CFull_Time_Base::ResetMonth(void)
{
    m_Month = 0;
}

inline
const CFull_Time_Base::TMonth& CFull_Time_Base::GetMonth(void) const
{
    return m_Month;
}

inline
void CFull_Time_Base::SetMonth(const TMonth& value)
{
    m_Month = value;
}

inline
CFull_Time_Base::TMonth& CFull_Time_Base::SetMonth(void)
{
    return m_Month;
}

inline
void CFull_Time_Base::ResetDay(void)
{
    m_Day = 0;
}

inline
const CFull_Time_Base::TDay& CFull_Time_Base::GetDay(void) const
{
    return m_Day;
}

inline
void CFull_Time_Base::SetDay(const TDay& value)
{
    m_Day = value;
}

inline
CFull_Time_Base::TDay& CFull_Time_Base::SetDay(void)
{
    return m_Day;
}

inline
void CFull_Time_Base::ResetHour(void)
{
    m_Hour = 0;
}

inline
const CFull_Time_Base::THour& CFull_Time_Base::GetHour(void) const
{
    return m_Hour;
}

inline
void CFull_Time_Base::SetHour(const THour& value)
{
    m_Hour = value;
}

inline
CFull_Time_Base::THour& CFull_Time_Base::SetHour(void)
{
    return m_Hour;
}

inline
void CFull_Time_Base::ResetMinute(void)
{
    m_Minute = 0;
}

inline
const CFull_Time_Base::TMinute& CFull_Time_Base::GetMinute(void) const
{
    return m_Minute;
}

inline
void CFull_Time_Base::SetMinute(const TMinute& value)
{
    m_Minute = value;
}

inline
CFull_Time_Base::TMinute& CFull_Time_Base::SetMinute(void)
{
    return m_Minute;
}

inline
void CFull_Time_Base::ResetSecond(void)
{
    m_Second = 0;
}

inline
const CFull_Time_Base::TSecond& CFull_Time_Base::GetSecond(void) const
{
    return m_Second;
}

inline
void CFull_Time_Base::SetSecond(const TSecond& value)
{
    m_Second = value;
}

inline
CFull_Time_Base::TSecond& CFull_Time_Base::SetSecond(void)
{
    return m_Second;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////






#endif // FULL_TIME_BASE_HPP
