/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code is generated by application DATATOOL
 *   using specifications from the data definition file
 *   'twebenv.asn'.
 *
 * ATTENTION:
 *   Don't edit or check-in this file to the CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

#ifndef QUERY_HISTORY_BASE_HPP
#define QUERY_HISTORY_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>


// forward declarations
class CQuery_Command;
class CTime;


// generated classes

class CQuery_History_Base : public ncbi::CSerialObject
{
    typedef ncbi::CSerialObject Tparent;
public:
    // constructor
    CQuery_History_Base(void);
    // destructor
    virtual ~CQuery_History_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef std::string TName;
    typedef int TSeqNumber;
    typedef CTime TTime;
    typedef CQuery_Command TCommand;

    // getters
    // setters

    // optional
    // typedef std::string TName
    bool IsSetName(void) const;
    bool CanGetName(void) const;
    void ResetName(void);
    const TName& GetName(void) const;
    void SetName(const TName& value);
    TName& SetName(void);

    // mandatory
    // typedef int TSeqNumber
    bool IsSetSeqNumber(void) const;
    bool CanGetSeqNumber(void) const;
    void ResetSeqNumber(void);
    TSeqNumber GetSeqNumber(void) const;
    void SetSeqNumber(const TSeqNumber& value);
    TSeqNumber& SetSeqNumber(void);

    // mandatory
    // typedef CTime TTime
    bool IsSetTime(void) const;
    bool CanGetTime(void) const;
    void ResetTime(void);
    const TTime& GetTime(void) const;
    void SetTime(TTime& value);
    TTime& SetTime(void);

    // mandatory
    // typedef CQuery_Command TCommand
    bool IsSetCommand(void) const;
    bool CanGetCommand(void) const;
    void ResetCommand(void);
    const TCommand& GetCommand(void) const;
    void SetCommand(TCommand& value);
    TCommand& SetCommand(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CQuery_History_Base(const CQuery_History_Base&);
    CQuery_History_Base& operator=(const CQuery_History_Base&);

    // data
    Uint4 m_set_State[1];
    TName m_Name;
    TSeqNumber m_SeqNumber;
    ncbi::CRef< TTime > m_Time;
    ncbi::CRef< TCommand > m_Command;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CQuery_History_Base::IsSetName(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CQuery_History_Base::CanGetName(void) const
{
    return IsSetName();
}

inline
const std::string& CQuery_History_Base::GetName(void) const
{
    if (!CanGetName()) {
        ThrowUnassigned(0);
    }
    return m_Name;
}

inline
void CQuery_History_Base::SetName(const std::string& value)
{
    m_Name = value;
    m_set_State[0] |= 0x3;
}

inline
std::string& CQuery_History_Base::SetName(void)
{
#ifdef _DEBUG
    if (!IsSetName()) {
        m_Name = ms_UnassignedStr;
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Name;
}

inline
bool CQuery_History_Base::IsSetSeqNumber(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CQuery_History_Base::CanGetSeqNumber(void) const
{
    return IsSetSeqNumber();
}

inline
void CQuery_History_Base::ResetSeqNumber(void)
{
    m_SeqNumber = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CQuery_History_Base::GetSeqNumber(void) const
{
    if (!CanGetSeqNumber()) {
        ThrowUnassigned(1);
    }
    return m_SeqNumber;
}

inline
void CQuery_History_Base::SetSeqNumber(const int& value)
{
    m_SeqNumber = value;
    m_set_State[0] |= 0xc;
}

inline
int& CQuery_History_Base::SetSeqNumber(void)
{
#ifdef _DEBUG
    if (!IsSetSeqNumber()) {
        memset(&m_SeqNumber,ms_UnassignedByte,sizeof(m_SeqNumber));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_SeqNumber;
}

inline
bool CQuery_History_Base::IsSetTime(void) const
{
    return m_Time;
}

inline
bool CQuery_History_Base::CanGetTime(void) const
{
    return IsSetTime();
}

inline
const CTime& CQuery_History_Base::GetTime(void) const
{
    if (!CanGetTime()) {
        ThrowUnassigned(2);
    }
    return (*m_Time);
}

inline
CTime& CQuery_History_Base::SetTime(void)
{
    return (*m_Time);
}

inline
bool CQuery_History_Base::IsSetCommand(void) const
{
    return m_Command;
}

inline
bool CQuery_History_Base::CanGetCommand(void) const
{
    return IsSetCommand();
}

inline
const CQuery_Command& CQuery_History_Base::GetCommand(void) const
{
    if (!CanGetCommand()) {
        ThrowUnassigned(3);
    }
    return (*m_Command);
}

inline
CQuery_Command& CQuery_History_Base::SetCommand(void)
{
    return (*m_Command);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////






#endif // QUERY_HISTORY_BASE_HPP
