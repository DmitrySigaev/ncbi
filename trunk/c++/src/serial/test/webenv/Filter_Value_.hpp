/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code is generated by application DATATOOL
 *   using specifications from the data definition file
 *   'twebenv.asn'.
 *
 * ATTENTION:
 *   Don't edit or check-in this file to the CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

#ifndef FILTER_VALUE_BASE_HPP
#define FILTER_VALUE_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>


// generated classes

class CFilter_Value_Base : public ncbi::CSerialObject
{
    typedef ncbi::CSerialObject Tparent;
public:
    // constructor
    CFilter_Value_Base(void);
    // destructor
    virtual ~CFilter_Value_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef std::string TName;
    typedef std::string TValue;

    // getters
    // setters

    // mandatory
    // typedef std::string TName
    bool IsSetName(void) const;
    bool CanGetName(void) const;
    void ResetName(void);
    const TName& GetName(void) const;
    void SetName(const TName& value);
    TName& SetName(void);

    // mandatory
    // typedef std::string TValue
    bool IsSetValue(void) const;
    bool CanGetValue(void) const;
    void ResetValue(void);
    const TValue& GetValue(void) const;
    void SetValue(const TValue& value);
    TValue& SetValue(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CFilter_Value_Base(const CFilter_Value_Base&);
    CFilter_Value_Base& operator=(const CFilter_Value_Base&);

    // data
    Uint4 m_set_State[1];
    TName m_Name;
    TValue m_Value;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CFilter_Value_Base::IsSetName(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CFilter_Value_Base::CanGetName(void) const
{
    return IsSetName();
}

inline
const std::string& CFilter_Value_Base::GetName(void) const
{
    if (!CanGetName()) {
        ThrowUnassigned(0);
    }
    return m_Name;
}

inline
void CFilter_Value_Base::SetName(const std::string& value)
{
    m_Name = value;
    m_set_State[0] |= 0x3;
}

inline
std::string& CFilter_Value_Base::SetName(void)
{
#ifdef _DEBUG
    if (!IsSetName()) {
        m_Name = ms_UnassignedStr;
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Name;
}

inline
bool CFilter_Value_Base::IsSetValue(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CFilter_Value_Base::CanGetValue(void) const
{
    return IsSetValue();
}

inline
const std::string& CFilter_Value_Base::GetValue(void) const
{
    if (!CanGetValue()) {
        ThrowUnassigned(1);
    }
    return m_Value;
}

inline
void CFilter_Value_Base::SetValue(const std::string& value)
{
    m_Value = value;
    m_set_State[0] |= 0xc;
}

inline
std::string& CFilter_Value_Base::SetValue(void)
{
#ifdef _DEBUG
    if (!IsSetValue()) {
        m_Value = ms_UnassignedStr;
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Value;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////






#endif // FILTER_VALUE_BASE_HPP
