/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @VersionStruct_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'samplesoap.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef VERSIONSTRUCT_BASE_HPP
#define VERSIONSTRUCT_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>


// generated classes

/////////////////////////////////////////////////////////////////////////////
class CVersionStruct_Base : public ncbi::CSerialObject
{
    typedef ncbi::CSerialObject Tparent;
public:
    // constructor
    CVersionStruct_Base(void);
    // destructor
    virtual ~CVersionStruct_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef std::string TMajor;
    typedef std::string TMinor;
    typedef std::string TClientID;

    // getters
    // setters

    /// mandatory
    /// typedef std::string TMajor
    bool IsSetMajor(void) const;
    bool CanGetMajor(void) const;
    void ResetMajor(void);
    const TMajor& GetMajor(void) const;
    void SetMajor(const TMajor& value);
    TMajor& SetMajor(void);

    /// mandatory
    /// typedef std::string TMinor
    bool IsSetMinor(void) const;
    bool CanGetMinor(void) const;
    void ResetMinor(void);
    const TMinor& GetMinor(void) const;
    void SetMinor(const TMinor& value);
    TMinor& SetMinor(void);

    /// mandatory
    /// typedef std::string TClientID
    bool IsSetClientID(void) const;
    bool CanGetClientID(void) const;
    void ResetClientID(void);
    const TClientID& GetClientID(void) const;
    void SetClientID(const TClientID& value);
    TClientID& SetClientID(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CVersionStruct_Base(const CVersionStruct_Base&);
    CVersionStruct_Base& operator=(const CVersionStruct_Base&);

    // data
    Uint4 m_set_State[1];
    TMajor m_Major;
    TMinor m_Minor;
    TClientID m_ClientID;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CVersionStruct_Base::IsSetMajor(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CVersionStruct_Base::CanGetMajor(void) const
{
    return IsSetMajor();
}

inline
const std::string& CVersionStruct_Base::GetMajor(void) const
{
    if (!CanGetMajor()) {
        ThrowUnassigned(0);
    }
    return m_Major;
}

inline
void CVersionStruct_Base::SetMajor(const std::string& value)
{
    m_Major = value;
    m_set_State[0] |= 0x3;
}

inline
std::string& CVersionStruct_Base::SetMajor(void)
{
#ifdef _DEBUG
    if (!IsSetMajor()) {
        m_Major = ms_UnassignedStr;
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Major;
}

inline
bool CVersionStruct_Base::IsSetMinor(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CVersionStruct_Base::CanGetMinor(void) const
{
    return IsSetMinor();
}

inline
const std::string& CVersionStruct_Base::GetMinor(void) const
{
    if (!CanGetMinor()) {
        ThrowUnassigned(1);
    }
    return m_Minor;
}

inline
void CVersionStruct_Base::SetMinor(const std::string& value)
{
    m_Minor = value;
    m_set_State[0] |= 0xc;
}

inline
std::string& CVersionStruct_Base::SetMinor(void)
{
#ifdef _DEBUG
    if (!IsSetMinor()) {
        m_Minor = ms_UnassignedStr;
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Minor;
}

inline
bool CVersionStruct_Base::IsSetClientID(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CVersionStruct_Base::CanGetClientID(void) const
{
    return IsSetClientID();
}

inline
const std::string& CVersionStruct_Base::GetClientID(void) const
{
    if (!CanGetClientID()) {
        ThrowUnassigned(2);
    }
    return m_ClientID;
}

inline
void CVersionStruct_Base::SetClientID(const std::string& value)
{
    m_ClientID = value;
    m_set_State[0] |= 0x30;
}

inline
std::string& CVersionStruct_Base::SetClientID(void)
{
#ifdef _DEBUG
    if (!IsSetClientID()) {
        m_ClientID = ms_UnassignedStr;
    }
#endif
    m_set_State[0] |= 0x10;
    return m_ClientID;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////






#endif // VERSIONSTRUCT_BASE_HPP
