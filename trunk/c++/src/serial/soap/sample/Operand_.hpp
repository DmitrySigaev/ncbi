/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @Operand_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'samplesoap.dtd'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OPERAND_BASE_HPP
#define OPERAND_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>


// generated classes

/////////////////////////////////////////////////////////////////////////////
class COperand_Base : public ncbi::CSerialObject
{
    typedef ncbi::CSerialObject Tparent;
public:
    // constructor
    COperand_Base(void);
    // destructor
    virtual ~COperand_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class C_Attlist : public ncbi::CSerialObject
    {
        typedef ncbi::CSerialObject Tparent;
    public:
        // constructor
        C_Attlist(void);
        // destructor
        ~C_Attlist(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        enum EAttlist_operation {
            eAttlist_operation_add = 1,
            eAttlist_operation_subtract = 2
        };
        
        /// Access to EAttlist_operation's attributes (values, names) as defined in spec
        static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(EAttlist_operation)(void);
        
        // types
        typedef EAttlist_operation TOperation;
    
        // getters
        // setters
    
        /// mandatory
        /// typedef EAttlist_operation TOperation
        bool IsSetOperation(void) const;
        bool CanGetOperation(void) const;
        void ResetOperation(void);
        TOperation GetOperation(void) const;
        void SetOperation(const TOperation& value);
        TOperation& SetOperation(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Attlist(const C_Attlist&);
        C_Attlist& operator=(const C_Attlist&);
    
        // data
        Uint4 m_set_State[1];
        TOperation m_Operation;
    };
    // types
    typedef C_Attlist TAttlist;
    typedef std::string TX;
    typedef std::string TY;

    // getters
    // setters

    /// mandatory
    /// typedef C_Attlist TAttlist
    bool IsSetAttlist(void) const;
    bool CanGetAttlist(void) const;
    void ResetAttlist(void);
    const TAttlist& GetAttlist(void) const;
    void SetAttlist(TAttlist& value);
    TAttlist& SetAttlist(void);

    /// mandatory
    /// typedef std::string TX
    bool IsSetX(void) const;
    bool CanGetX(void) const;
    void ResetX(void);
    const TX& GetX(void) const;
    void SetX(const TX& value);
    TX& SetX(void);

    /// mandatory
    /// typedef std::string TY
    bool IsSetY(void) const;
    bool CanGetY(void) const;
    void ResetY(void);
    const TY& GetY(void) const;
    void SetY(const TY& value);
    TY& SetY(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    COperand_Base(const COperand_Base&);
    COperand_Base& operator=(const COperand_Base&);

    // data
    Uint4 m_set_State[1];
    ncbi::CRef< TAttlist > m_Attlist;
    TX m_X;
    TY m_Y;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool COperand_Base::C_Attlist::IsSetOperation(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool COperand_Base::C_Attlist::CanGetOperation(void) const
{
    return IsSetOperation();
}

inline
void COperand_Base::C_Attlist::ResetOperation(void)
{
    m_Operation = EAttlist_operation(0);
    m_set_State[0] &= ~0x3;
}

inline
COperand_Base::C_Attlist::EAttlist_operation COperand_Base::C_Attlist::GetOperation(void) const
{
    if (!CanGetOperation()) {
        ThrowUnassigned(0);
    }
    return m_Operation;
}

inline
void COperand_Base::C_Attlist::SetOperation(const COperand_Base::C_Attlist::EAttlist_operation& value)
{
    m_Operation = value;
    m_set_State[0] |= 0x3;
}

inline
COperand_Base::C_Attlist::EAttlist_operation& COperand_Base::C_Attlist::SetOperation(void)
{
#ifdef _DEBUG
    if (!IsSetOperation()) {
        memset(&m_Operation,ms_UnassignedByte,sizeof(m_Operation));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Operation;
}

inline
bool COperand_Base::IsSetAttlist(void) const
{
    return m_Attlist;
}

inline
bool COperand_Base::CanGetAttlist(void) const
{
    return IsSetAttlist();
}

inline
const COperand_Base::C_Attlist& COperand_Base::GetAttlist(void) const
{
    if (!CanGetAttlist()) {
        ThrowUnassigned(0);
    }
    return (*m_Attlist);
}

inline
COperand_Base::C_Attlist& COperand_Base::SetAttlist(void)
{
    return (*m_Attlist);
}

inline
bool COperand_Base::IsSetX(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool COperand_Base::CanGetX(void) const
{
    return IsSetX();
}

inline
const std::string& COperand_Base::GetX(void) const
{
    if (!CanGetX()) {
        ThrowUnassigned(1);
    }
    return m_X;
}

inline
void COperand_Base::SetX(const std::string& value)
{
    m_X = value;
    m_set_State[0] |= 0xc;
}

inline
std::string& COperand_Base::SetX(void)
{
#ifdef _DEBUG
    if (!IsSetX()) {
        m_X = ms_UnassignedStr;
    }
#endif
    m_set_State[0] |= 0x4;
    return m_X;
}

inline
bool COperand_Base::IsSetY(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool COperand_Base::CanGetY(void) const
{
    return IsSetY();
}

inline
const std::string& COperand_Base::GetY(void) const
{
    if (!CanGetY()) {
        ThrowUnassigned(2);
    }
    return m_Y;
}

inline
void COperand_Base::SetY(const std::string& value)
{
    m_Y = value;
    m_set_State[0] |= 0x30;
}

inline
std::string& COperand_Base::SetY(void)
{
#ifdef _DEBUG
    if (!IsSetY()) {
        m_Y = ms_UnassignedStr;
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Y;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////






#endif // OPERAND_BASE_HPP
