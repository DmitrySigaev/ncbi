#################################
# $Id$
# Author:  Denis Vakatov (vakatov@ncbi.nlm.nih.gov)
#################################
# Meta-makefile(to be configured into "Makefile")
# This can be used to build/install/clean [*_PROJ] makefiles
# in current directory and in the below [SUB_PROJ] directories.
#
# LIB_PROJ = pl1 pl2 ...  // Makefile.pl1.lib Makefile.pl1.lib ...
# APP_PROJ = pa1 pl2 ...  // Makefile.pa1.app Makefile.pa1.app ...
# USR_PROJ = pu1 pu2 ...  // Makefile.pu1 Makefile.pu1 ...
# SUB_PROJ = app sub_proj1 sub_proj2
#
# srcdir = @srcdir@
# include @builddir@/Makefile.meta
#################################

builddir = @builddir@


### Make sure we are using a right command shell

@make_shell@


### One-level build -- [USR_PROJ] makefiles

USRP_BRA = \
if test ! -z "$(USR_PROJ)" ; then \
   x_project="$(USR_PROJ)" ; \
   for i in $$x_project ; do \
      if test -f "Makefile.$$i" ; then \
        x_mfile="Makefile.$$i" ; \
      else x_mfile="$(srcdir)/Makefile.$$i" ; \
      fi ; \
		$(MAKE) -f "$$x_mfile" builddir="$(builddir)" srcdir="$(srcdir)" $(MFLAGS)
USRP_KET = ||  exit 1 ; \
   done ; \
fi

LIBP_BRA = \
if test ! -z "$(LIB_PROJ)" ; then \
   x_project="$(LIB_PROJ)" ; \
   for i in $$x_project ; do \
		$(MAKE) -f "$(builddir)/Makefile.lib.tmpl" srcdir="$(srcdir)" TMPL="$$i" $(MFLAGS)
LIBP_KET = ||  exit 2 ; \
   done ; \
fi

@APP_NOBUILD@
APPP_BRA = \
if test ! -z "$(APP_PROJ)" ; then \
   x_project="$(APP_PROJ)" ; \
   for i in $$x_project ; do \
		$(MAKE) -f "$(builddir)/Makefile.app.tmpl" srcdir="$(srcdir)" TMPL="$$i" @APP_NOCOPY@ $(MFLAGS)
APPP_KET = ||  exit 3 ; \
   done ; \
fi

all:
	@$(USRP_BRA) all   $(USRP_KET)
	@$(LIBP_BRA) all   $(LIBP_KET)
	@$(APPP_BRA) all   $(APPP_KET)
clean:
	@$(USRP_BRA) clean $(USRP_KET)
	@$(LIBP_BRA) clean $(LIBP_KET)
	@$(APPP_BRA) clean $(APPP_KET)
purge:
	@$(USRP_BRA) purge $(USRP_KET)
	@$(LIBP_BRA) purge $(LIBP_KET)
	@$(APPP_BRA) purge $(APPP_KET)


### Recursive build -- in the [SUB_PROJ] directories

SUB_BRA = \
if test ! -z "$(SUB_PROJ)" ; then \
	x_subproj="$(SUB_PROJ)" ; \
	for i in $$x_subproj ; do \
		( if test -d $$i ; then \
          cd $$i  &&  $(MAKE) $(MFLAGS)

SUB_KET = ||  exit 4 ; \
        else \
          echo "Warning:  non-existent sub-project \"$$i\"" ; \
        fi ) ||  exit 5 ; \
	done ; \
fi

all_r: all
	@$(SUB_BRA) all_r   $(SUB_KET)
clean_r: clean
	@$(SUB_BRA) clean_r $(SUB_KET)
purge_r: purge 
	@$(SUB_BRA) purge_r $(SUB_KET)
