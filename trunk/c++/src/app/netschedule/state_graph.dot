# dot -T ps state_graph.dot -o state_graph.ps

digraph NetScheduleNew {

    None        [ label = "None",        shape = "box" ];
    Canceled    [ label = "Canceled",    shape = "box" ];
    Timeout     [ label = "Timeout",     shape = "diamond", style = "dashed" ];
    ReadTimeout [ label = "ReadTimeout", shape = "diamond", style = "dashed" ];
    Tries       [ label = "Tries",       shape = "diamond", style = "dashed" ];
    ReadTries   [ label = "ReadTries",   shape = "diamond", style = "dashed" ];

    None        -> Pending          [ label = "SUBMIT" ];

    Pending     -> Running          [ label = "GET\nWGET\nJXCG" ];
    Pending     -> Canceled         [ label = "CANCEL" ];
    Pending     -> Done             [ label = "PUT\nJXCG" ];

    Running     -> Pending          [ label = "RETURN" ];
    Running     -> Canceled         [ label = "CANCEL" ];
    Running     -> Done             [ label = "PUT\nJXCG" ];
    Running     -> Timeout          [ label = "timeout" ];
    Running     -> Tries            [ label = "FPUT" ];

    Tries       -> Failed;
    Tries       -> Pending;

    Timeout     -> Pending;
    Timeout     -> Failed;

    Failed      -> Canceled         [ label = "CANCEL" ];

    Done        -> Reading          [ label = "READ" ];
    Done        -> Canceled         [ label = "CANCEL" ];

    Reading     -> Canceled         [ label = "CANCEL" ];
    Reading     -> Confirmed        [ label = "CFRM" ];
    Reading     -> Done             [ label = "RDRB" ];
    Reading     -> ReadTimeout      [ label = "timeout" ];
    Reading     -> ReadTries        [ label = "FRED" ];

    ReadTries   -> ReadFailed;
    ReadTries   -> Done;

    ReadTimeout -> Done;
    ReadTimeout -> ReadFailed;

    ReadFailed  -> Canceled         [ label = "CANCEL" ];

    Confirmed   -> Canceled         [ label = "CANCEL" ];
}

# Old diagrams

#digraph NetSchedule {
#  None -> Pending [label="submit"];
#
#  Pending -> Running [label="execute"];
#  Pending -> Canceled [label="cancel"];
#  Pending -> Done [label="out-of-sync success"];
#
#
#  Running -> Returned [label="return"];
#  Running -> Canceled [label="cancel"];
#  Running -> Failed [label="fail"];
#  Running -> Done [label="success"];
#
#  Returned -> Pending [label="r2p"];
#  Returned -> Running [label="r2p-execute?"];
#  Returned -> Canceled [label="cancel"];
#  Returned -> Failed [label="fail"];
#  Returned -> Done [label="out-of-sync success"];
#}
#
#digraph Reschedule {
#  Running -> Pending [label="reschedule?"];
#  Canceled -> Pending [label="reschedule"];
#  Failed -> Pending [label="reschedule"];
#  Done -> Pending [label="reschedule"];
#}
#
#digraph Ignore {
#  Pending -> Returned;
#  Pending -> Failed;
#  Canceled -> Running;
#  Canceled -> Returned;
#  Canceled -> Failed;
#  Canceled -> Done;
#  Failed -> Returned;
#  Failed -> Canceled;
#  Failed -> Done;
#  Done -> Returned;
#  Done -> Canceled;
#  Done -> Failed;
#}
