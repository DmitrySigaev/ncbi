
; General purpose server parameters
[server]

; TCP/IP port number server responds on
port=9100

; UDP port server uses for event notification
udp_port=9111

; maximum number of clients(threads) can be served simultaneously
max_threads=25

; initial number of threads created for incoming requests
init_threads=2

; Server side logging
log=false


; Network inactivity timeout in seconds
network_timeout=20

; When true server recreates the [bdb].path directory and reinits the
; database
reinit=false

; When true, server transforms into a daemon, detached from the 
; current program group (for UNIX only)
daemon=false

; List of network hosts allowed admin access to netschedule
admin_host=localhost;service1


; BerkeleyDB related parameters

[bdb]

; directory to keep the database. It is important that this
; directory resides on local drive (not NFS)
;
; WARNING: the database directory sometimes can be recursively deleted
;          (when netcached started with -reinit). 
;          DO NOT keep any of your files(besides the database) in it.
path=./netschedule_data

; amount of memory allocated by BerkeleyDB for the database cache
; Berkeley DB page cache) (More is better)
mem_size=5M



[queue_test]

; job expiration timeout (seconds) for completed jobs 
timeout=3600

; notification timeout (seconds). 
; Worker nodes may subscribe for notification (queue events), 
; which will be sent periodically (with specified notification timeout)
notif_timeout=7

; Job execution timeout (seconds). If job is not resolved in the specified 
; amount of time (from the moment worker node receives it) 
; job will be rescheduled for another round of execution. 
; Only fixed number of retry attempts is allowed.
;
; If 0 this "timeout" is taken as a default value
run_timeout=1800

; Execution timeout precision (seconds). Server checks exipation
; every "run_timeout_precision" seconds. Lower value means job execution 
; will be controlled with geater precision, at the expense of memory
; and CPU resources on the server side
run_timeout_precision=30


; Queue version control list
; ";" separated list of programs allowed to connect to the queue to submit
; and execute jobs. Versions newer than specified are allowed to connect.
; 
; Program name can contain version number like:
;    "Program 1.2.3"
;    "Program version 1.2.3"
;    "Program v. 1.2.3"
;
;program=test 2.0.0; test 1.0.0; Cgi_Tunnel2Grid 1.0.0

; List of network hosts allowed to submit jobs
subm_host=xpubmed0; xpubmed1; xpubmed2;


; List of network hosts allowed to run worker nodes
wnode_host=service2; service3

; When true all obsolete records are dumped into a rotated log file for further
; archival storage and analysis
dump_db=false


; Enable/Disable load balancing for this queue
lb=false

; load balancing service name
lb_service=

; load balancing collection time (seconds)
lb_collect_time=5

; For how long (seconds) job can be delayed (stalled) in the queue
; For this period load balancers seeks for a good enough worker node
; If start time for the job is delayed for more than this value
; job is scheduled to the first available node
lb_exec_delay=6

; Policy if non-load balanced worker node comes for a job.
; Variants: "deny", "allow", "reserve"
;   deny    - alien worker node is not receving jobs. period.
;   allow   - worker node receives a job without a delay
;   reserve - worker node receives a if job is stalled 
;             (not picked up by any of the load balanced nodes).
;             Alien nodes play reserve computational capacity in this case.
;
lb_unknown_host=allow

; Load balancing threashold curves:
;
; "linear"
; "regression"
;
lb_curve=linear

; Starting point for linear curve
;
lb_curve_linear_y0=0.8

; Ending point for linear curve
;
lb_curve_linear_yN=0.15

; Starting point for regression curve
;
lb_curve_linear_y0=0.85

lb_curve_linear_a=-0.2

; Load balancing policy (how AI unit makes it's decision)
;
;  "rate" - take into account host ratings as provided by LB service
;           Tries to distribute load evenly accross the machines
;
;  "cpu_avail" - load balancing is based on CPU availability
;           If machine has an available CPU it's granted a job
;
lb_policy=rate

