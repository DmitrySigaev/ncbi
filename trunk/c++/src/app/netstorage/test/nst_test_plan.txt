NetStorage Server Test Plan
---------------------------

1. Start/stop

1.1 Bare process
Steps:
- start the server

Checks:
- the server process up and running


1.2 Pid file
Steps:
- start the server specifying a pid file name

Checks:
- the server process up and running
- the pid file has been created
- the pid file PID matches the process pid



1.3 Bad pid file
Steps:
- start the server specifying a pid file where the server
  has no permissions

Checks:
- the server process has not started


1.4 Stop via signal
Steps:
- start the server (A)
- send SIGTERM to the server process (B)

Checks:
- server up and running (after A)
- server stopped (after B)




2. INFO

2.1 Getting server info
Steps:
- start the server
- send the INFO message


Checks:
- server replay has received with:
  - reply SN matches request SN
  - ServerVersion is provided
  - ProtocolVersion is provided
  - PID is provided; PID matches the server process PID
  - BuildDate is provided
  - StartDate is provided
  - ServerSession is provided
  - ServerBinaryPath is provided; the path matches where the server binary path
    actually is
  - ServerCommandLine is provided


2.2 Server session preserved
Steps:
- start server
- send the INFO message
- collect ServerSession value (A)
- send the INFO message
- collect ServerSession value (B)

Checks:
- A value must match B value


2.3 Changed server session
Steps:
- start server
- sendthe INFO message
- collect ServerSession value (A)
- stop the server
- start the server
- send the INFO message
- collect ServerSession value (B)

Checks:
- A value must differ B value



3. CONFIGURATION

3.1 Getting the server configuration
Steps:
- start server
- send the CONFIGURATION message

Checks:
- server reply has received with:
  - Configuration is provided
  - ConfigurationFilePath is provided; the path is absolute and matches the one
    used by the server



4. HELLO

4.1 Say hello
Steps:
- start server
- send the HELLO message

Checks:
- server reply status is OK



5. BYE

5.1 Say bye
Steps:
- start server
- send the BYE message

Checks:
- the connection is still opened
- the server reply status is OK

5.2 Hello after BYE
- start server
- send the BYE message
- send the HELLO message (B)

Checks:
- the server reply status is ERROR (after B)
- the connection is closed (after B)




6. SHUTDOWN

6.1 Soft shutdown
Steps:
- have 'admin' in the server config file as an administrator
- start server
- send HELLO with Client set to 'admin'
- send SHUTDOWN mode = soft

Checks:
- the server is stopped


6.2 Hard shutdown
Steps:
- have 'admin' in the server config file as an administrator
- start server
- send HELLO with Client set to 'admin'
- send SHUTDOWN mode = hard

Checks:
- the server is stopped


6.3 Wrong shutdown mode
Steps:
- have 'admin' in the server config file as an administrator
- start server
- send HELLO with Client set to 'admin'
- send SHUTDOWN mode = semi-soft

Checks:
- the server reply has status ERROR
- the server up and running


6.4 Failed shutdown without hello
Steps:
- have 'admin' in the server config file as an administrator
- start server
- send SHUTDOWN mode = soft

Checks:
- the server reply has status ERROR
- the server up and running


6.5 Failed shutdown with non-admin hello
Steps:
- have 'admin' in the server config file as an administrator
- start server
- send HELLO with Client set to 'not-an-admin'
- send SHUTDOWN mode = soft

Checks:
- the server reply has status ERROR
- the server up and running


6.6 Second hello shutdown
Steps:
- have 'admin' in the server config file as an administrator
- start server
- send HELLO with Client set to 'not-an-admin'
- send SHUTDOWN mode = soft (A)
- send HELLO with Client set to 'admin'
- send SHUTDOWN mode = soft (B)

Checks:
- the server reply has status ERROR (after A)
- the server up and running (after A)
- the server is stopped


7. GETCLIENTSINFO

7.1 Get client info - no clients
Steps:
- start server
- send GETCLIENTSINFO

Checks:
- the server reply status is OK and there is an empty list of clients


7.2 Get clients info
Steps:
- start server
- send HELLO with Client set to 'client_1'
- send HELLO with Client set to 'client_2'
- send GETCLIENTSINFO

Checks:
- the server reply status is OK and there is info about two clients; one of the
  clients name is 'client_1' while the others is 'client_2'

7.3a Get clients metadata option info
Prerequisites:
- Configured service is s
Steps:
- start server
- send HELLO with Client 'me' and Service s and metadata option Required
- send GETCLIENTSINFO

Checks:
- the client 'me' metadata option is Required


7.3b Get clients metadata option info
Prerequisites:
- Configured service is s
Steps:
- start server
- send HELLO with Client 'me' and Service NotConfigured and metadata option Required

Checks:
- the server reports an error


7.3c Get clients metadata option info
Prerequisites:
- Configured service is s
Steps:
- start server
- send HELLO with Client 'me' and Service s and metadata option Disabled
- send GETCLIENTSINFO

Checks:
- the client 'me' metadata option is Disabled


7.3d Get clients metadata option info
Prerequisites:
- Configured service is s
Steps:
- start server
- send HELLO with Client 'me' and Service s and metadata option Monitoring
- send GETCLIENTSINFO

Checks:
- the client 'me' metadata option is Monitoring

7.3e Get clients metadata option info
Prerequisites:
- Configured service is s
Steps:
- start server
- send HELLO with Client 'me' and Service s and no metadata option
- send GETCLIENTSINFO

Checks:
- the client 'me' metadata option is NotSpecified


8. GETOBJECTINFO

8.1 Bad ObjectID
Steps:
- start server
- send GETOBJECTINFO with ObjectID set to 'blah'

Checks:
- the server reply status is ERROR



9. WRITE

All combinations of:
- UserKey.UniqueID: string
- UserKey.AppDomain: string
- Fast: bool
- Persistent: bool
- Movable: bool
- ICache.SecviceName: string
- ICache.CacheName: string
should be tested as follows:
- start server
- send WRITE
- send GETOBJECTINFO
- make sure the object is where it is supposed to be


9.x Bad ObjectID
Steps:
- start server
- send WRITE message with malformed ObjectID

Checks:
- server reply status is ERROR


9.y Write the into the same object using alternative object identifications
    and make sure the same object is overwritten




10. READ

10.1 Read from NC
Steps:
- starts server
- using WRITE create an object in NC of size 32 bytes
- send READ message for the object

Checks:
- server reply status is OK and the object is read properly


10.2 Read from FT
Steps:
- starts server
- using WRITE create an object in FT of size 32 bytes
- send READ message for the object

Checks:
- server reply status is OK and the object is read properly


10.3 Read large object from NC
Steps:
- set the inactivity timeout to 2 sec in the server config file
- starts server
- using WRITE create an object in NC of size 20 GB
- send READ message for the object

Checks:
- server reply status is OK and the object is read properly


10.4 Read large object from FT
Steps:
- set the inactivity timeout to 2 sec in the server config file
- starts server
- using WRITE create an object in FT of size 20 GB
- send READ message for the object

Checks:
- server reply status is OK and the object is read properly


10.5 Read non-existing from NC
Steps:
- start server
- send READ message for the object which is supposed to be in NC

Checks:
- server reply status is ERROR


10.6 Read non-existing from FT
Steps:
- start server
- send READ message for the object which is supposed to be in FT

Checks:
- server reply status is ERROR


10.7 Read with bad ObjectID
Steps:
- start server
- send READ message with malformed ObjectID

Checks:
- server reply status is ERROR



11. DELETE

11.1 Delete from NC
Steps:
- start server
- create an object using WRITE in NC
- send DELETE message for the object
- send READ object for the object

Checks:
- server reply status is ERROR

11.2 Delete from FT
Steps:
- start server
- create an object using WRITE in FT
- send DELETE message for the object
- send READ object for the object

Checks:
- server reply status is ERROR


11.3 Delete non-existing from NC
Steps:
- start server
- send DELETE message with non-existing object which is supposed to be in NC


Checks:
- server reply status is OK

11.4 Delete non-existing from FT
Steps:
- start server
- send DELETE message with non-existing object which is supposed to be in FT

Checks:
- server reply status is OK


11.5 Delete with bad ObjectID
Steps:
- start server
- send DELETE message with malformed ObjectID

Checks:
- server reply status is ERROR


12. RELOCATE

12.1 Relocate from NC to FT
Steps:
- start server
- create an object in NC
- relocate the object from NC
- send GETOBJECTINFO for the object

Checks:
- server reply status is OK and the object location is FT


12.2 Relocate from FT to NC
Steps:
- start server
- create an object in FT
- relocate the object from FT
- send GETOBJECTINFO for the object

Checks:
- server reply status is OK and the object location is NC


12.3 Relocate non-existing from NC
Steps:
- start server
- relocate non-existing object which is supposed to be in NC

Checks:
- the server reply status is ERROR


12.4 Relocate non-existing from FT
Steps:
- start server
- relocate non-existing object which is supposed to be in FT

Checks:
- the server reply status is ERROR


12.5 Relocate non-relocatable from NC
Steps:
- start server
- create non relocatable object in NC
- relocate the object to FT

Checks:
- the server reply status is ERROR


12.6 Relocate non-relocatable from FT
Steps:
- start server
- create non relocatable object in FT
- relocate the object to NC

Checks:
- the server reply status is ERROR


12.7 Relocate big from NC
Steps:
- set the inactivity timeout to 2 sec in the server config file
- start server
- create a movable object in NC of 20 GB size
- relocate the object from NC to FT

Checks:
- the server reply status is OK


12.8 Relocate big from FT
Steps:
- set the inactivity timeout to 2 sec in the server config file
- start server
- create a movable object in FT of 20 GB size
- relocate the object from FT to NC

Checks:
- the server reply status is OK


12.9 Relocate with bad file ID
Steps:
- start server
- relocate an object using a malformed ObjectID

Checks:
- the server reply status is ERROR


13. EXISTS

13.1 Existing NC object
Steps:
- start server
- create an object in NC using WRITE
- send the EXISTS message for that object

Checks:
- the server reply status is OK and the object exists


13.2 Existing FT object
Steps:
- start server
- create an object in FT using WRITE
- send the EXISTS message for that object

Checks:
- the server reply status is OK and the object exists


13.3 Non-existing NC object
Steps:
- start server
- send the EXISTS message for an object which supposed to be in NC

Checks:
- the server reply status is OK and the object does not exist


13.4 Non-existing FT object
Steps:
- start server
- send the EXISTS message for an object which supposed to be in FT

Checks:
- the server reply status is OK and the object does not exist


13.5 Bad ObjectID
Steps:
- start server
- send the EXISTS message with malformed ObjectID

Checks:
- the server reply is ERROR


14. GETSIZE

14.1 Get existing object size from NC
Steps:
- start server
- create an object in NC using WRITE of size 32 bytes
- get the object size

Checks:
- the server reply status is OK and the size is 32 bytes


14.2 Get existing object size from FT
Steps:
- start server
- create an object in FT using WRITE of size 32 bytes
- get the object size

Checks:
- the server reply status is OK and the size is 32 bytes


14.3 Get non-existing NC object size
Steps:
- start server
- get a non-existing NC object size

Checks:
- the server reply status is ERROR


14.4 Get non-existing FT object size
Steps:
- start server
- get a non-existing FT object size

Checks:
- the server reply status is ERROR


14.5 Bad ObjectID
Steps:
- start server
- send the GETSIZE message with malformed ObjectID

Checks:
- the server reply is ERROR



15. GETATTR
Prerequisites:
- Configured service s
Steps:
- Say HELLO with Service K and Client me and no metadata option
- send GETATTR

Checks:
- the server reports error


15.1 GETATTR for not existing object
Prerequisites:
- Configured service s
Steps:
- Say HELLO with Service s and Client me and no metadata option
- send GETATTR for non existing user key identified object

Checks:
- the server reports NetStorageObjectNotFound

15.2 GETATTR for not exising attribute
Prerequisites:
- Configured service s
Steps:
- Say HELLO with Service s and Client me and metadata option Required
- send GETATTR for existing object and non existing attributes

Checks:
- the server reports Attribute Not Found

15.3
Prerequisites:
- Configured service s
Steps:
- Say HELLO with Service s and Client me and metadata option Monitoring
- send GETATTR for existing object and existing attribute

Checks:
- the attribute value matches the expected


16. SETATTR
Prerequisites:
- Configured service s
Steps:
- Say HELLO with Service s and Client me and metadata option Disabled
- send SETATTR

Checks:
- the server reports an error

16.1 SETATTR
Prerequisites:
- Configured service s
Steps:
- Say HELLO with Service s and Client me and metadata option Monitoring
- send SETATTR

Checks:
- the server reports an error

16.2 SETATTR
Prerequisites:
- Configured service s
Steps:
- Say HELLO with Service s and Client me and metadata option Required
- send SETATTR for an existing object (A)
- send SETATTR for the same object and the same attribute (B) with a different
  value

Checks:
- (A) the attribute value matches the expected
- (B) the attribute value matches the expected
- (A) check the attribute read/write timestamps after each access



17. Object expiration

