/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using the following specifications:
 *   'seq.asn'.
 */

// standard includes
#include <ncbi_pch.hpp>

// generated includes
#include <objects/seq/Delta_ext.hpp>
#include <objects/seq/Delta_seq.hpp>
#include <objects/seq/Seq_literal.hpp>
#include <objects/seq/Seq_data.hpp>
#include <objects/seq/IUPACaa.hpp>
#include <objects/seq/IUPACna.hpp>
#include <objects/seq/seqport_util.hpp>

// generated classes

BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::

// destructor
CDelta_ext::~CDelta_ext(void)
{
}


/// add a literal segment at the end
/// this variant adds a gap literal
CDelta_seq& CDelta_ext::AddLiteral(TSeqPos len)
{
    CRef<CDelta_seq> seg(new CDelta_seq());
    seg->SetLiteral().SetLength(len);

    Set().push_back(seg);
    return *seg;
}


/// add a literal segment at the end
/// this variant adds a gap literal
CDelta_seq& CDelta_ext::AddLiteral(const string& iupac_seq,
                                   CSeq_inst::EMol mol)
{
    CRef<CDelta_seq> seg(new CDelta_seq());
    seg->SetLiteral().SetLength(iupac_seq.size());

    switch (mol) {
    case CSeq_inst::eMol_aa:
        seg->SetLiteral().SetSeq_data().SetIupacaa().Set() = iupac_seq;
        break;

    case CSeq_inst::eMol_na:
    case CSeq_inst::eMol_dna:
    case CSeq_inst::eMol_rna:
        seg->SetLiteral().SetSeq_data().SetIupacna().Set() = iupac_seq;
        CSeqportUtil::Pack(&seg->SetLiteral().SetSeq_data());
        break;

    default:
        NCBI_THROW(CException, eUnknown,
                   "CDelta_ext::AddLiteral(): unhandled mol type");
        break;
    }

    Set().push_back(seg);
    return *seg;
}


/// add a segment that refers to another segment
CDelta_seq& CDelta_ext::AddSeqRange(const CSeq_id& id,
                                    TSeqPos from, TSeqPos to,
                                    ENa_strand strand)
{
    CRef<CDelta_seq> seg(new CDelta_seq());
    seg->SetLoc().SetInt().SetFrom(from);
    seg->SetLoc().SetInt().SetTo  (to);
    seg->SetLoc().SetId(id);
    seg->SetLoc().SetStrand(strand);

    Set().push_back(seg);
    return *seg;
}


END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


/*
* ===========================================================================
*
* $Log$
* Revision 1.1  2005/11/07 13:50:40  dicuccio
* Added programmatic API for appending segments onto a delta-seq
*
*
* ===========================================================================
*/
/* Original file checksum: lines: 65, chars: 1883, CRC32: 149e396a */
