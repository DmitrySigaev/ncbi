/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using the following specifications:
 *   'valerr.asn'.
 */

// standard includes
#include <ncbi_pch.hpp>

// generated includes
#include <objects/valerr/ValidErrItem.hpp>
#include <util/static_map.hpp>

// generated classes

BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


typedef pair<const string, const string> TErrStrs;
typedef pair<unsigned int, TErrStrs> TErrTypStrs;

const TErrTypStrs sc_ErrStrs [] = {
    TErrTypStrs(eErr_ALL,
    TErrStrs( "ALL", "ALL")),
    TErrTypStrs(eErr_UNKNOWN,
    TErrStrs( "UNKNOWN", "UNKNOWN")),

/* SEQ_INST */

    TErrTypStrs( eErr_SEQ_INST_ExtNotAllowed, 
TErrStrs("ExtNotAllowed",
"A Bioseq 'extension' is used for special classes of Bioseq. This class \
of Bioseq should not have one but it does. This is probably a software \
error.")),
    TErrTypStrs( eErr_SEQ_INST_ExtBadOrMissing, 
    TErrStrs("ExtBadOrMissing",
"This class of Bioseq requires an 'extension' but it is missing or of \
the wrong type. This is probably a software error.")),
    TErrTypStrs( eErr_SEQ_INST_SeqDataNotFound, 
    TErrStrs("SeqDataNotFound",
"No actual sequence data was found on this Bioseq. This is probably a \
software problem.")),
    TErrTypStrs( eErr_SEQ_INST_SeqDataNotAllowed, 
    TErrStrs("SeqDataNotAllowed",
"The wrong type of sequence data was found on this Bioseq. This is \
probably a software problem.")),
    TErrTypStrs( eErr_SEQ_INST_ReprInvalid,
    TErrStrs( "ReprInvalid",
"This Bioseq has an invalid representation class. This is probably a \
software error.")),
    TErrTypStrs( eErr_SEQ_INST_CircularProtein,
    TErrStrs( "CircularProtein",
"This protein Bioseq is represented as circular. Circular topology is \
normally used only for certain DNA molecules, for example, plasmids.")),
    TErrTypStrs( eErr_SEQ_INST_DSProtein,
    TErrStrs( "DSProtein",
"This protein Bioseq has strandedness indicated. Strandedness is \
normally a property only of DNA sequences. Please unset the \
strandedness.")),
    TErrTypStrs( eErr_SEQ_INST_MolNotSet,
    TErrStrs( "MolNotSet",
"It is not clear whether this sequence is nucleic acid or protein. \
Please set the appropriate molecule type (Bioseq.mol).")),
    TErrTypStrs( eErr_SEQ_INST_MolOther,
    TErrStrs( "MolOther",
"Most sequences are either nucleic acid or protein. However, the \
molecule type (Bioseq.mol) is set to 'other'. It should probably be set \
to nucleic acid or a protein.")),
    TErrTypStrs( eErr_SEQ_INST_FuzzyLen,
    TErrStrs( "FuzzyLen",
"This sequence is marked as having an uncertain length, but the length \
is known exactly.")),
    TErrTypStrs( eErr_SEQ_INST_InvalidLen,
    TErrStrs( "InvalidLen",
"The length indicated for this sequence is invalid. This is probably a \
software error.")),
    TErrTypStrs( eErr_SEQ_INST_InvalidAlphabet,
    TErrStrs( "InvalidAlphabet",
"This Bioseq has an invalid alphabet (e.g. protein codes on a nucleic \
acid or vice versa). This is probably a software error.")),
    TErrTypStrs( eErr_SEQ_INST_SeqDataLenWrong,
    TErrStrs( "SeqDataLenWrong",
"The length of this Bioseq does not agree with the length of the actual \
data. This is probably a software error.")),
    TErrTypStrs( eErr_SEQ_INST_SeqPortFail,
    TErrStrs( "SeqPortFail",
"Something is very wrong with this entry. The validator cannot open a \
SeqPort on the Bioseq. Further testing cannot be done.")),
    TErrTypStrs( eErr_SEQ_INST_InvalidResidue,
    TErrStrs( "InvalidResidue",
"Invalid residue codes were found in this Bioseq.")),
    TErrTypStrs( eErr_SEQ_INST_StopInProtein,
    TErrStrs( "StopInProtein",
"Stop codon symbols were found in this protein Bioseq.")),
    TErrTypStrs( eErr_SEQ_INST_PartialInconsistent,
    TErrStrs( "PartialInconsistent",
"This segmented sequence is described as complete or incomplete in \
several places, but these settings are inconsistent.")),
    TErrTypStrs( eErr_SEQ_INST_ShortSeq,
    TErrStrs( "ShortSeq",
"This Bioseq is unusually short (less than 4 amino acids or less than 11 \
nucleic acids). GenBank does not usually accept such short sequences.")),
    TErrTypStrs( eErr_SEQ_INST_NoIdOnBioseq,
    TErrStrs( "NoIdOnBioseq",
"No SeqIds were found on this Bioseq. This is probably a software \
error.")),
    TErrTypStrs( eErr_SEQ_INST_BadDeltaSeq,
    TErrStrs( "BadDeltaSeq",
"Delta sequences should only be HTGS-1 or HTGS-2.")),
    TErrTypStrs( eErr_SEQ_INST_LongHtgsSequence,
    TErrStrs( "LongHtgsSequence",
"HTGS-1 or HTGS-2 sequences must be < 350 KB in length.")),
    TErrTypStrs( eErr_SEQ_INST_LongLiteralSequence,
    TErrStrs( "LongLiteralSequence",
"Delta literals must be < 350 KB in length.")),
    TErrTypStrs( eErr_SEQ_INST_SequenceExceeds350kbp,
    TErrStrs( "SequenceExceeds350kbp",
"Individual sequences must be < 350 KB in length, unless they represent \
a single gene.")),
    TErrTypStrs( eErr_SEQ_INST_ConflictingIdsOnBioseq,
    TErrStrs( "ConflictingIdsOnBioseq",
"Two SeqIds of the same class was found on this Bioseq. This is probably \
a software error.")),
    TErrTypStrs( eErr_SEQ_INST_MolNuclAcid,
    TErrStrs( "MolNuclAcid",
"The specific type of this nucleic acid (DNA or RNA) is not set.")),
    TErrTypStrs( eErr_SEQ_INST_ConflictingBiomolTech,
    TErrStrs( "ConflictingBiomolTech",
"HTGS/STS/GSS records should be genomic DNA. There is a conflict between \
the technique and expected molecule type.")),
    TErrTypStrs( eErr_SEQ_INST_SeqIdNameHasSpace,
    TErrStrs( "SeqIdNameHasSpace",
"The Seq-id.name field should be a single word without any whitespace. \
This should be fixed by the database staff.")),
    TErrTypStrs( eErr_SEQ_INST_IdOnMultipleBioseqs,
    TErrStrs( "IdOnMultipleBioseqs",
"There are multiple occurrences of the same Seq-id in this record. \
Sequence identifiers must be unique within a record.")),
    TErrTypStrs( eErr_SEQ_INST_DuplicateSegmentReferences,
    TErrStrs( "DuplicateSegmentReferences",
"The segmented sequence refers multiple times to the same Seq-id. This \
may be due to a software error. Please consult with the database staff \
to fix this record.")),
    TErrTypStrs( eErr_SEQ_INST_TrailingX,
    TErrStrs( "TrailingX",
"The protein sequence ends with one or more X (unknown) amino acids.")),
    TErrTypStrs( eErr_SEQ_INST_BadSeqIdFormat,
    TErrStrs( "BadSeqIdFormat",
"A nucleotide sequence identifier should be 1 letter plus 5 digits or 2 \
letters plus 6 digits, and a protein sequence identifer should be 3 \
letters plus 5 digits.")),
    TErrTypStrs( eErr_SEQ_INST_PartsOutOfOrder,
    TErrStrs( "PartsOutOfOrder",
"The parts inside a segmented set should correspond to the seq_ext of \
the segmented bioseq. A difference will affect how the flatfile is \
displayed.")),
    TErrTypStrs( eErr_SEQ_INST_BadSecondaryAccn,
    TErrStrs( "BadSecondaryAccn",
"A secondary accession usually indicates a record replaced or subsumed \
by the current record. In this case, the current accession and \
secondary are the same.")),
    TErrTypStrs( eErr_SEQ_INST_ZeroGiNumber,
    TErrStrs( "ZeroGiNumber",
"GI numbers are assigned to sequences by NCBI's sequence tracking \
database. 0 is not a legal value for a gi number.")),
    TErrTypStrs( eErr_SEQ_INST_RnaDnaConflict,
    TErrStrs( "RnaDnaConflict",
"The MolInfo biomol field is inconsistent with the Bioseq molecule type \
field.")),
    TErrTypStrs( eErr_SEQ_INST_HistoryGiCollision,
    TErrStrs( "HistoryGiCollision",
"The Bioseq history gi refers to this Bioseq, not to its predecessor or \
successor.")),
    TErrTypStrs( eErr_SEQ_INST_GiWithoutAccession,
    TErrStrs( "GiWithoutAccession",
"The Bioseq has a gi identifier but no GenBank/EMBL/DDBJ accession \
identifier.")),
    TErrTypStrs( eErr_SEQ_INST_MultipleAccessions,
    TErrStrs( "MultipleAccessions",
"The Bioseq has a gi identifier and more than one GenBank/EMBL/DDBJ \
accession identifier.")),
    TErrTypStrs( eErr_SEQ_INST_HistAssemblyMissing,
    TErrStrs( "HistAssemblyMissing",
"The Bioseq has a TPA identifier but does not have a Seq-hist.assembly alignment. \
This should be annotated or calculated by the database, resulting in a PRIMARY \
block visible in the flatfile.")),
    TErrTypStrs( eErr_SEQ_INST_TerminalNs,
    TErrStrs( "TerminalNs",
"The Bioseq has one or more N bases at the end.")),
    TErrTypStrs( eErr_SEQ_INST_UnexpectedIdentifierChange,
    TErrStrs( "UnexpectedIdentifierChange",
"The set of sequence identifiers on a Bioseq are not consistent with the \
previous version of the record in the database.")),
    TErrTypStrs( eErr_SEQ_INST_InternalNsInSeqLit,
    TErrStrs( "InternalNsInSeqLit",
"There are runs of many Ns inside the SeqLit component of a delta Bioseq.")),
    TErrTypStrs( eErr_SEQ_INST_SeqLitGapLength0,
    TErrStrs( "SeqLitGapLength0",
"A SeqLit component of a delta Bioseq can specify a gap, but it should \
not be a gap of 0 length.")),
    TErrTypStrs( eErr_SEQ_INST_TpaAssmeblyProblem,
    TErrStrs( "TpaAssmeblyProblem",
"Third party annotation records should have a TpaAssembly user object and a \
Seq-hist.assembly alignment for the PRIMARY block.")),
    TErrTypStrs( eErr_SEQ_INST_SeqLocLength,
    TErrStrs( "SeqLocLength",
"A SeqLoc component of a delta Bioseq is suspiciously small.")),
    TErrTypStrs( eErr_SEQ_INST_MissingGaps,
    TErrStrs( "MissingGaps",
"HTGS delta records should have gaps between each sequence segment.")),
    TErrTypStrs( eErr_SEQ_INST_CompleteTitleProblem,
    TErrStrs( "CompleteTitleProblem",
"The sequence title has complete genome in it, but it is not marked as complete.")),
    TErrTypStrs( eErr_SEQ_INST_CompleteCircleProblem,
    TErrStrs( "CompleteCircleProblem",
"This sequence has a circular topology, but it is not marked as complete.")),
    TErrTypStrs( eErr_SEQ_INST_BadHTGSeq,
    TErrStrs( "BadHTGSeq",
"High throughput genomic sequences without gaps should have quality score graphs.")),

/* SEQ_DESCR */

    TErrTypStrs( eErr_SEQ_DESCR_BioSourceMissing,
    TErrStrs( "BioSourceMissing",
"The biological source of this sequence has not been described \
correctly. A Bioseq must have a BioSource descriptor that covers the \
entire molecule. Additional BioSource features may also be added to \
recombinant molecules, natural or otherwise, to designate the parts of \
the molecule. Please add the source information.")),
    TErrTypStrs( eErr_SEQ_DESCR_InvalidForType,
    TErrStrs( "InvalidForType",
"This descriptor cannot be used with this Bioseq. A descriptor placed at \
the BioseqSet level applies to all of the Bioseqs in the set. Please \
make sure the descriptor is consistent with every sequence to which it \
applies.")),
    TErrTypStrs( eErr_SEQ_DESCR_FileOpenCollision,
    TErrStrs( "FileOpenCollision",
"FileOpen is unable to find a local file. This is normal, and can be \
ignored.")),
    TErrTypStrs( eErr_SEQ_DESCR_Unknown,
    TErrStrs( "Unknown",
"An unknown or 'other' modifier was used.")),
    TErrTypStrs( eErr_SEQ_DESCR_NoPubFound,
    TErrStrs( "NoPubFound",
"No publications were found in this entry which refer to this Bioseq. If \
a publication descriptor is added to a BioseqSet, it will apply to all \
of the Bioseqs in the set. A publication feature should be used if the \
publication applies only to a subregion of a sequence.")),
    TErrTypStrs( eErr_SEQ_DESCR_NoOrgFound,
    TErrStrs( "NoOrgFound",
"This entry does not specify the organism that was the source of the \
sequence. Please name the organism.")),
    TErrTypStrs( eErr_SEQ_DESCR_MultipleBioSources,
    TErrStrs( "MultipleBioSources",
"There are multiple BioSource or OrgRef descriptors in the same chain \
with the same taxonomic name. Their information should be combined into \
a single BioSource descriptor.")),
    TErrTypStrs( eErr_SEQ_DESCR_NoMolInfoFound,
    TErrStrs( "NoMolInfoFound",
"This sequence does not have a Mol-info descriptor applying to it. This \
indicates genomic vs. message, sequencing technique, and whether the \
sequence is incomplete.")),
    TErrTypStrs( eErr_SEQ_DESCR_BadCountryCode,
    TErrStrs( "BadCountryCode",
"The country code (up to the first colon) is not on the approved list of \
countries.")),
    TErrTypStrs( eErr_SEQ_DESCR_NoTaxonID,
    TErrStrs( "NoTaxonID",
"The BioSource is missing a taxonID database identifier. This will be \
inserted by the automated taxonomy lookup called by Clean Up Record.")),
    TErrTypStrs( eErr_SEQ_DESCR_InconsistentBioSources,
    TErrStrs( "InconsistentBioSources",
"This population study has BioSource descriptors with different \
taxonomic names. All members of a population study should be from the \
same organism.")),
    TErrTypStrs( eErr_SEQ_DESCR_MissingLineage,
    TErrStrs( "MissingLineage",
"A BioSource should have a taxonomic lineage, which can be obtained from \
the taxonomy network server.")),
    TErrTypStrs( eErr_SEQ_DESCR_SerialInComment,
    TErrStrs( "SerialInComment",
"Comments that refer to the conclusions of a specific reference should \
not be cited by a serial number inside brackets (e.g., [3]), but should \
instead be attached as a REMARK on the reference itself.")),
    TErrTypStrs( eErr_SEQ_DESCR_BioSourceNeedsFocus,
    TErrStrs( "BioSourceNeedsFocus",
"Focus must be set on a BioSource descriptor in records where there is a \
BioSource feature with a different organism name.")),
    TErrTypStrs( eErr_SEQ_DESCR_BadOrganelle,
    TErrStrs( "BadOrganelle",
"Note that only Kinetoplastida have kinetoplasts, and that only \
Chlorarchniophyta and Cryptophyta have nucleomorphs.")),
    TErrTypStrs( eErr_SEQ_DESCR_MultipleChromosomes,
    TErrStrs( "MultipleChromosomes",
"There are multiple chromosome qualifiers on this Bioseq. With the \
exception of some pseudoautosomal genes, this is likely to be a \
biological annotation error.")),
    TErrTypStrs( eErr_SEQ_DESCR_BadSubSource,
    TErrStrs( "BadSubSource",
"Unassigned SubSource subtype.")),
    TErrTypStrs( eErr_SEQ_DESCR_BadOrgMod,
    TErrStrs( "BadOrgMod",
"Unassigned OrgMod subtype.")),
    TErrTypStrs( eErr_SEQ_DESCR_InconsistentProteinTitle,
    TErrStrs( "InconsistentProteinTitle",
"An instantiated protein title descriptor should normally be the same as \
the automatically generated title. This may be a curated exception, or \
it may be out of synch with the current annotation.")),
    TErrTypStrs( eErr_SEQ_DESCR_Inconsistent,
    TErrStrs( "Inconsistent",
"There are two descriptors of the same type which are inconsistent with \
each other. Please make them consistent.")),
    TErrTypStrs( eErr_SEQ_DESCR_ObsoleteSourceLocation,
    TErrStrs( "ObsoleteSourceLocation",
"There is a source location that is no longer legal for use in GenBank \
records.")),
    TErrTypStrs( eErr_SEQ_DESCR_ObsoleteSourceQual,
    TErrStrs( "ObsoleteSourceQual",
"There is a source qualifier that is no longer legal for use in GenBank \
records.")),
    TErrTypStrs( eErr_SEQ_DESCR_StructuredSourceNote,
    TErrStrs( "StructuredSourceNote",
"The name of a structured source field is present as text in a note. \
The data should probably be put into the appropriate field instead.")),
    TErrTypStrs( eErr_SEQ_DESCR_MultipleTitles,
    TErrStrs( "MultipleTitles",
"There are multiple title descriptors in the same chain.")),
    TErrTypStrs( eErr_SEQ_DESCR_Obsolete,
    TErrStrs( "Obsolete",
"Obsolete descriptor type.")),
    TErrTypStrs( eErr_SEQ_DESCR_UnnecessaryBioSourceFocus,
    TErrStrs( "UnnecessaryBioSourceFocus",
"Focus should not be set on a BioSource descriptor in records where there is no \
BioSource feature.")),
    TErrTypStrs( eErr_SEQ_DESCR_RefGeneTrackingWithoutStatus,
    TErrStrs( "RefGeneTrackingWithoutStatus",
"The RefGeneTracking user object does not have the required Status field set.")),
    TErrTypStrs( eErr_SEQ_DESCR_UnwantedCompleteFlag,
    TErrStrs( "UnwantedCompleteFlag",
"The Mol-info.completeness flag should not be set on a genomic sequence unless \
the title also says it is a complete sequence or complete genome.")),
    TErrTypStrs( eErr_SEQ_DESCR_CollidingPublications,
    TErrStrs( "CollidingPublications",
"Multiple publication descriptors with the same PMID or MUID apply to a Bioseq. \
The lower-level ones are redundant, and should be removed.")),
    TErrTypStrs( eErr_SEQ_DESCR_TransgenicProblem,
    TErrStrs( "TransgenicProblem",
"A BioSource descriptor with /transgenic set must be accompanied by a BioSource \
feature on the nucleotide record.")),

/* SEQ_GENERIC */

    TErrTypStrs( eErr_GENERIC_NonAsciiAsn,
    TErrStrs( "NonAsciiAsn",
"There is a non-ASCII type character in this entry.")),
    TErrTypStrs( eErr_GENERIC_Spell,
    TErrStrs( "Spell",
"There is a potentially misspelled word in this entry.")),
    TErrTypStrs( eErr_GENERIC_AuthorListHasEtAl,
    TErrStrs( "AuthorListHasEtAl",
"The author list contains et al, which should be replaced with the \
remaining author names.")),
    TErrTypStrs( eErr_GENERIC_MissingPubInfo,
    TErrStrs( "MissingPubInfo",
"The publication is missing essential information, such as title or \
authors.")),
    TErrTypStrs( eErr_GENERIC_UnnecessaryPubEquiv,
    TErrStrs( "UnnecessaryPubEquiv",
"A nested Pub-equiv is not normally expected in a publication. This may \
prevent proper display of all publication information.")),
    TErrTypStrs( eErr_GENERIC_BadPageNumbering,
    TErrStrs( "BadPageNumbering",
"The publication page numbering is suspect.")),
    TErrTypStrs( eErr_GENERIC_MedlineEntryPub,
    TErrStrs( "MedlineEntryPub",
"Publications should not be of type medline-entry.  This has abstract and MeSH \
term information that does not appear in the GenBank flatfile.  Type cit-art \
should be used instead.")),

/* SEQ_PKG */

    TErrTypStrs( eErr_SEQ_PKG_NoCdRegionPtr,
    TErrStrs( "NoCdRegionPtr",
"A protein is found in this entry, but the coding region has not been \
described. Please add a CdRegion feature to the nucleotide Bioseq.")),
    TErrTypStrs( eErr_SEQ_PKG_NucProtProblem,
    TErrStrs( "NucProtProblem",
"Both DNA and protein sequences were expected, but one of the two seems \
to be missing. Perhaps this is the wrong package to use.")),
    TErrTypStrs( eErr_SEQ_PKG_SegSetProblem,
    TErrStrs( "SegSetProblem",
"A segmented sequence was expected, but it was not found. Perhaps this \
is the wrong package to use.")),
    TErrTypStrs( eErr_SEQ_PKG_EmptySet,
    TErrStrs( "EmptySet",
"No Bioseqs were found in this BioseqSet. Is that what was intended?")),
    TErrTypStrs( eErr_SEQ_PKG_NucProtNotSegSet,
    TErrStrs( "NucProtNotSegSet",
"A nuc-prot set should not contain any other BioseqSet except segset.")),
    TErrTypStrs( eErr_SEQ_PKG_SegSetNotParts,
    TErrStrs( "SegSetNotParts",
"A segset should not contain any other BioseqSet except parts.")),
    TErrTypStrs( eErr_SEQ_PKG_SegSetMixedBioseqs,
    TErrStrs( "SegSetMixedBioseqs",
"A segset should not contain both nucleotide and protein Bioseqs.")),
    TErrTypStrs( eErr_SEQ_PKG_PartsSetMixedBioseqs,
    TErrStrs( "PartsSetMixedBioseqs",
"A parts set should not contain both nucleotide and protein Bioseqs.")),
    TErrTypStrs( eErr_SEQ_PKG_PartsSetHasSets,
    TErrStrs( "PartsSetHasSets",
"A parts set should not contain BioseqSets.")),
    TErrTypStrs( eErr_SEQ_PKG_FeaturePackagingProblem,
    TErrStrs( "FeaturePackagingProblem",
"A feature should be packaged on its bioseq, or on a set containing the \
Bioseq.")),
    TErrTypStrs( eErr_SEQ_PKG_GenomicProductPackagingProblem,
    TErrStrs( "GenomicProductPackagingProblem",
"The product of an mRNA feature in a genomic product set should point to \
a cDNA Bioseq packaged in the set, perhaps within a nuc-prot set. \
RefSeq records may however be referenced remotely.")),
    TErrTypStrs( eErr_SEQ_PKG_InconsistentMolInfoBiomols,
    TErrStrs( "InconsistentMolInfoBiomols",
"Mol-info.biomol is inconsistent within a segset or parts set.")),
    TErrTypStrs( eErr_SEQ_PKG_GraphPackagingProblem,
    TErrStrs( "GraphPackagingProblem",
"A graph should be packaged on its bioseq, or on a set containing the Bioseq.")),

/* SEQ_FEAT */

    TErrTypStrs( eErr_SEQ_FEAT_InvalidForType,
    TErrStrs( "InvalidForType",
"This feature type is illegal on this type of Bioseq.")),
    TErrTypStrs( eErr_SEQ_FEAT_PartialProblem,
    TErrStrs( "PartialProblem",
"There are several places in an entry where a sequence can be described \
as either partial or complete. In this entry, these settings are \
inconsistent. Make sure that the location and product Seq-locs, the \
Bioseqs, and the SeqFeat partial flag all agree in describing this \
SeqFeat as partial or complete.")),
    TErrTypStrs( eErr_SEQ_FEAT_PartialsInconsistent,
    TErrStrs( "PartialsInconsistent",
"This segmented sequence is described as complete or incomplete in several \
places, but these settings are inconsistent.")),
    TErrTypStrs( eErr_SEQ_FEAT_InvalidType,
    TErrStrs( "InvalidType",
"A feature with an invalid type has been detected. This is most likely a \
software problem.")),
    TErrTypStrs( eErr_SEQ_FEAT_Range,
    TErrStrs( "Range",
"The coordinates describing the location of a feature do not fall within \
the sequence itself. A feature location or a product Seq-loc is out of \
range of the Bioseq it points to.")),
    TErrTypStrs( eErr_SEQ_FEAT_MixedStrand,
    TErrStrs( "MixedStrand",
"Mixed strands (plus and minus) have been found in the same location. \
While this is biologically possible, it is very unusual. Please check \
that this is really what you mean.")),
    TErrTypStrs( eErr_SEQ_FEAT_SeqLocOrder,
    TErrStrs( "SeqLocOrder",
"This location has intervals that are out of order. While whis is \
biologically possible, it is very unusual. Please check that this is \
really what you mean.")),
    TErrTypStrs( eErr_SEQ_FEAT_CdTransFail,
    TErrStrs( "CdTransFail",
"A fundamental error occurred in software while attempting to translate \
this coding region. It is either a software problem or sever data \
corruption.")),
    TErrTypStrs( eErr_SEQ_FEAT_StartCodon,
    TErrStrs( "StartCodon",
"An illegal start codon was used. Some possible explanations are: (1) \
the wrong genetic code may have been selected; (2) the wrong reading \
frame may be in use; or (3) the coding region may be incomplete at the \
5' end, in which case a partial location should be indicated.")),
    TErrTypStrs( eErr_SEQ_FEAT_InternalStop,
    TErrStrs( "InternalStop",
"Internal stop codons are found in the protein sequence. Some possible \
explanations are: (1) the wrong genetic code may have been selected; (2) \
the wrong reading frame may be in use; (3) the coding region may be \
incomplete at the 5' end, in which case a partial location should be \
indicated; or (4) the CdRegion feature location is incorrect.")),
    TErrTypStrs( eErr_SEQ_FEAT_NoProtein,
    TErrStrs( "NoProtein",
"Normally a protein sequence is supplied. This sequence can then be \
compared with the translation of the coding region. In this entry, no \
protein Bioseq was found, and the comparison could not be made.")),
 TErrTypStrs(eErr_SEQ_FEAT_MisMatchAA,
    TErrStrs( "MisMatchAA",
"The protein sequence that was supplied is not identical to the \
translation of the coding region. Mismatching amino acids are found \
between these two sequences.")),
    TErrTypStrs( eErr_SEQ_FEAT_TransLen,
    TErrStrs( "TransLen",
"The protein sequence that was supplied is not the same length as the \
translation of the coding region. Please determine why they are \
different.")),
    TErrTypStrs( eErr_SEQ_FEAT_NoStop,
    TErrStrs( "NoStop",
"A coding region that is complete should have a stop codon at the 3'end. \
 A stop codon was not found on this sequence, although one was \
expected.")),
    TErrTypStrs( eErr_SEQ_FEAT_TranslExcept,
    TErrStrs( "TranslExcept",
"An unparsed transl_except qualifier was found. This indicates a parser \
problem.")),
    TErrTypStrs( eErr_SEQ_FEAT_NoProtRefFound,
    TErrStrs( "NoProtRefFound",
"The name and description of the protein is missing from this entry. \
Every protein Bioseq must have one full-length Prot-ref feature to \
provide this information.")),
    TErrTypStrs( eErr_SEQ_FEAT_NotSpliceConsensus,
    TErrStrs( "NotSpliceConsensus",
"Splice junctions typically have GT as the first two bases of the intron \
(splice donor) and AG as the last two bases of the intron (splice \
acceptor). This intron does not conform to that pattern.")),
    TErrTypStrs( eErr_SEQ_FEAT_OrfCdsHasProduct,
    TErrStrs( "OrfCdsHasProduct",
"A coding region flagged as orf has a protein product. There should be \
no protein product bioseq on an orf.")),
    TErrTypStrs( eErr_SEQ_FEAT_GeneRefHasNoData,
    TErrStrs( "GeneRefHasNoData",
"A gene feature exists with no locus name or other fields filled in.")),
    TErrTypStrs( eErr_SEQ_FEAT_ExceptInconsistent,
    TErrStrs( "ExceptInconsistent",
"A coding region has an exception gbqual but the excpt flag is not \
set.")),
    TErrTypStrs( eErr_SEQ_FEAT_ProtRefHasNoData,
    TErrStrs( "ProtRefHasNoData",
"A protein feature exists with no name or other fields filled in.")),
    TErrTypStrs( eErr_SEQ_FEAT_GenCodeMismatch,
    TErrStrs( "GenCodeMismatch",
"The genetic code stored in the BioSource is different than that for \
this CDS.")),
    TErrTypStrs( eErr_SEQ_FEAT_RNAtype0,
    TErrStrs( "RNAtype0",
"RNA type 0 (unknown RNA) should be type 255 (other).")),
    TErrTypStrs( eErr_SEQ_FEAT_UnknownImpFeatKey,
    TErrStrs( "UnknownImpFeatKey",
"An import feature has an unrecognized key.")),
    TErrTypStrs( eErr_SEQ_FEAT_UnknownImpFeatQual,
    TErrStrs( "UnknownImpFeatQual",
"An import feature has an unrecognized qualifier.")),
    TErrTypStrs( eErr_SEQ_FEAT_WrongQualOnImpFeat,
    TErrStrs( "WrongQualOnImpFeat",
"This qualifier is not legal for this feature.")),
    TErrTypStrs( eErr_SEQ_FEAT_MissingQualOnImpFeat,
    TErrStrs( "MissingQualOnImpFeat",
"An essential qualifier for this feature is missing.")),
    TErrTypStrs( eErr_SEQ_FEAT_PsuedoCdsHasProduct,
    TErrStrs( "PsuedoCdsHasProduct",
"A coding region flagged as pseudo has a protein product. There should \
be no protein product bioseq on a pseudo CDS.")),
    TErrTypStrs( eErr_SEQ_FEAT_IllegalDbXref,
    TErrStrs( "IllegalDbXref",
"The database in a cross-reference is not on the list of officially \
recognized database abbreviations.")),
    TErrTypStrs( eErr_SEQ_FEAT_FarLocation,
    TErrStrs( "FarLocation",
"The location has a reference to a bioseq that is not packaged in this \
record.")),
    TErrTypStrs( eErr_SEQ_FEAT_DuplicateFeat,
    TErrStrs( "DuplicateFeat",
"The intervals on this feature are identical to another feature of the \
same type, but the label or comment are different.")),
    TErrTypStrs( eErr_SEQ_FEAT_UnnecessaryGeneXref,
    TErrStrs( "UnnecessaryGeneXref",
"This feature has a gene xref that is identical to the overlapping gene. \
This is redundant, and probably should be removed.")),
    TErrTypStrs( eErr_SEQ_FEAT_TranslExceptPhase,
    TErrStrs( "TranslExceptPhase",
"A /transl_except qualifier was not on a codon boundary.")),
    TErrTypStrs( eErr_SEQ_FEAT_TrnaCodonWrong,
    TErrStrs( "TrnaCodonWrong",
"The tRNA codon recognized does not code for the indicated amino acid \
using the specified genetic code.")),
    TErrTypStrs( eErr_SEQ_FEAT_BadTrnaAA,
    TErrStrs( "BadTrnaAA",
"The tRNA encoded amino acid is an illegal value.")),
    TErrTypStrs( eErr_SEQ_FEAT_BothStrands,
    TErrStrs( "BothStrands",
"Feature location indicates that it is on both strands. This is not \
biologically possible for this kind of feature. Please indicate the \
correct strand (plus or minus) for this feature.")),
    TErrTypStrs( eErr_SEQ_FEAT_CDSgeneRange,
    TErrStrs( "CDSgeneRange",
"A CDS is overlapped by a gene feature, but is not completely contained \
by it. This may be an annotation error.")),
    TErrTypStrs( eErr_SEQ_FEAT_CDSmRNArange,
    TErrStrs( "CDSmRNArange",
"A CDS is overlapped by an mRNA feature, but the mRNA does not cover all \
intervals (i.e., exons) on the CDS. This may be an annotation error.")),
    TErrTypStrs( eErr_SEQ_FEAT_OverlappingPeptideFeat,
    TErrStrs( "OverlappingPeptideFeat",
"The intervals on this processed protein feature overlap another protein \
feature. This may be caused by errors in originally annotating these \
features on DNA coordinates, where start or stop positions do not occur \
in between codon boundaries. These then appear as errors when the \
features are converted to protein coordinates by mapping through the \
CDS.")),
    TErrTypStrs( eErr_SEQ_FEAT_SerialInComment,
    TErrStrs( "SerialInComment",
"Comments that refer to the conclusions of a specific reference should \
not be cited by a serial number inside brackets (e.g., [3]), but should \
instead be attached as a REMARK on the reference itself.")),
    TErrTypStrs( eErr_SEQ_FEAT_MultipleCDSproducts,
    TErrStrs( "MultipleCDSproducts",
"More than one CDS feature points to the same protein product. This can \
happen with viral long terminal repeats (LTRs), but GenBank policy is to \
have each equivalent CDS point to a separately accessioned protein \
Bioseq.")),
    TErrTypStrs( eErr_SEQ_FEAT_FocusOnBioSourceFeature,
    TErrStrs( "FocusOnBioSourceFeature",
"The /focus flag is only appropriate on BioSource descriptors, not \
BioSource features.")),
    TErrTypStrs( eErr_SEQ_FEAT_PeptideFeatOutOfFrame,
    TErrStrs( "PeptideFeatOutOfFrame",
"The start or stop positions of this processed peptide feature do not \
occur in between codon boundaries. This may incorrectly overlap other \
peptides when the features are converted to protein coordinates by \
mapping through the CDS.")),
    TErrTypStrs( eErr_SEQ_FEAT_InvalidQualifierValue,
    TErrStrs( "InvalidQualifierValue",
"The value of this qualifier is constrained to a particular vocabulary \
of style. This value does not conform to those constraints. Please see \
the feature table documentation for more information.")),
    TErrTypStrs( eErr_SEQ_FEAT_MultipleMRNAproducts,
    TErrStrs( "MultipleMRNAproducts",
"More than one mRNA feature points to the same cDNA product. This is an \
error in the genomic product set. Each mRNA feature should have a \
unique product Bioseq.")),
    TErrTypStrs( eErr_SEQ_FEAT_mRNAgeneRange,
    TErrStrs( "mRNAgeneRange",
"An mRNA is overlapped by a gene feature, but is not completely \
contained by it. This may be an annotation error.")),
    TErrTypStrs( eErr_SEQ_FEAT_TranscriptLen,
    TErrStrs( "TranscriptLen",
"The mRNA sequence that was supplied is not the same length as the \
transcription of the mRNA feature. Please determine why they are \
different.")),
    TErrTypStrs( eErr_SEQ_FEAT_TranscriptMismatches,
    TErrStrs( "TranscriptMismatches",
"The mRNA sequence and the transcription of the mRNA feature are \
different. If the number is large, it may indicate incorrect intron/exon \
boundaries.")),
    TErrTypStrs( eErr_SEQ_FEAT_CDSproductPackagingProblem,
    TErrStrs( "CDSproductPackagingProblem",
"The nucleotide location and protein product of the CDS are not packaged \
together in the same nuc-prot set. This may be an error in the software \
used to create the record.")),
    TErrTypStrs( eErr_SEQ_FEAT_DuplicateInterval,
    TErrStrs( "DuplicateInterval",
"The location has identical adjacent intervals, e.g., a duplicate exon \
reference.")),
    TErrTypStrs( eErr_SEQ_FEAT_PolyAsiteNotPoint,
    TErrStrs( "PolyAsiteNotPoint",
"A polyA_site should be at a single nucleotide position.")),
    TErrTypStrs( eErr_SEQ_FEAT_ImpFeatBadLoc,
    TErrStrs( "ImpFeatBadLoc",
"An import feature loc field does not equal the feature location. This \
should be corrected, and then the loc field should be cleared.")),
    TErrTypStrs( eErr_SEQ_FEAT_LocOnSegmentedBioseq,
    TErrStrs( "LocOnSegmentedBioseq",
"Feature locations traditionally go on the individual parts of a \
segmented bioseq, not on the segmented sequence itself. These features \
are invisible in asn2ff reports, and are now being flagged for \
correction.")),
    TErrTypStrs( eErr_SEQ_FEAT_UnnecessaryCitPubEquiv,
    TErrStrs( "UnnecessaryCitPubEquiv",
"A set of citations on a feature should not normally have a nested \
Pub-equiv construct. This may prevent proper matching to the correct \
publication.")),
    TErrTypStrs( eErr_SEQ_FEAT_ImpCDShasTranslation,
    TErrStrs( "ImpCDShasTranslation",
"A CDS that has known translation errors cannot have a /translation \
qualifier.")),
    TErrTypStrs( eErr_SEQ_FEAT_ImpCDSnotPseudo,
    TErrStrs( "ImpCDSnotPseudo",
"A CDS that has known translation errors must be marked as pseudo to \
suppress the translation.")),
    TErrTypStrs( eErr_SEQ_FEAT_MissingMRNAproduct,
    TErrStrs( "MissingMRNAproduct",
"The mRNA feature points to a cDNA product that is not packaged in the \
record. This is an error in the genomic product set.")),
    TErrTypStrs( eErr_SEQ_FEAT_AbuttingIntervals,
    TErrStrs( "AbuttingIntervals",
"The start of one interval is next to the stop of another. A single \
interval may be desirable in this case.")),
    TErrTypStrs( eErr_SEQ_FEAT_CollidingGeneNames,
    TErrStrs( "CollidingGeneNames",
"Two gene features should not have the same name.")),
    TErrTypStrs( eErr_SEQ_FEAT_CollidingLocusTags,
    TErrStrs( "CollidingLocusTags",
"Two gene features should not have the same locus_tag, which is supposed \
to be a unique identifer.")),
    TErrTypStrs( eErr_SEQ_FEAT_MultiIntervalGene,
    TErrStrs( "MultiIntervalGene",
"A gene feature on a single Bioseq should have a single interval \
spanning everything considered to be under that gene.")),
    TErrTypStrs( eErr_SEQ_FEAT_FeatContentDup,
    TErrStrs( "FeatContentDup",
"The intervals on this feature are identical to another feature of the \
same type, and the label and comment are also identical. This is likely \
to be an error in annotating the record. Note that GenBank format \
suppresses duplicate features, so use of Graphic view is recommended.")),
    TErrTypStrs( eErr_SEQ_FEAT_BadProductSeqId,
    TErrStrs( "BadProductSeqId",
"The feature product refers to a database ID that has a locus name \
but no accession. This is probably an error in parsing of a submission.")),
    TErrTypStrs( eErr_SEQ_FEAT_RnaProductMismatch,
    TErrStrs( "RnaProductMismatch",
"The RNA feature product type does not correspond to the RNA feature type. \
These need to be consistent.")),
    TErrTypStrs( eErr_SEQ_FEAT_DifferntIdTypesInSeqLoc,
    TErrStrs( "DifferntIdTypesInSeqLoc",
"All ids in a single seq-loc which refer to the same bioseq should be of the \
same id type")),
    TErrTypStrs( eErr_SEQ_FEAT_MissingCDSproduct,
    TErrStrs( "MissingCDSproduct",
"The CDS should have a product, but does not.  Pseudo or short CDSs (less than 6 \
amino acids), or those marked with a rearrangement required for product exception, \
are exempt from needing a product.")),
    TErrTypStrs( eErr_SEQ_FEAT_MissingLocation,
    TErrStrs( "MissingLocation",
"A feature must specify its location.")),
    TErrTypStrs( eErr_SEQ_FEAT_OnlyGeneXrefs,
    TErrStrs( "OnlyGeneXrefs",
"There are gene xrefs but no gene features.  Records should normally have  \
single-interval gene features covering other biological features.  Gene \
xrefs are used only to override the inheritance by overlap.")),
    TErrTypStrs( eErr_SEQ_FEAT_UTRdoesNotAbutCDS,
    TErrStrs( "UTRdoesNotAbutCDS",
"The 5'UTR and 3'UTR features should exactly abut the CDS feature.")),
    TErrTypStrs( eErr_SEQ_FEAT_MultipleCdsOnMrna,
    TErrStrs( "MultipleCdsOnMrna",
"Only a single Cdregion feature should be annotated on mRNA bioseq.")),
    TErrTypStrs( eErr_SEQ_FEAT_BadConflictFlag,
    TErrStrs( "BadConflictFlag",
"The coding region conflict flag is set, but the translated product is the \
same as the instantiated product Bioseq.")),
    TErrTypStrs( eErr_SEQ_FEAT_ConflictFlagSet,
    TErrStrs( "ConflictFlagSet",
"The coding region conflict flag is appropriately set, but this record should \
be brought to the attention of the source database for possible correction.")),
    TErrTypStrs( eErr_SEQ_FEAT_LocusTagProblem,
    TErrStrs( "LocusTagProblem",
"A gene locus_tag should be a single token, with no spaces.")),
    TErrTypStrs( eErr_SEQ_FEAT_AltStartCodon,
    TErrStrs( "AltStartCodon",
"An alternative start codon was used. This is rare, and it is expected that \
confirmatory evidence will be cited.")),
    TErrTypStrs( eErr_SEQ_FEAT_GenesInconsistent,
    TErrStrs( "GenesInconsistent",
"The gene on the genomic sequence of a genomic product set should be the \
same as the gene on the cDNA product of the mRNA feature.")),
    TErrTypStrs( eErr_SEQ_FEAT_DuplicateTranslExcept,
    TErrStrs( "DuplicateTranslExcept",
"There are multiple /transl_except qualifiers at the same location on this \
CDS but with different amino acids indicated.")),
    TErrTypStrs( eErr_SEQ_FEAT_TranslExceptAndRnaEditing,
    TErrStrs( "TranslExceptAndRnaEditing",
"A CDS has both /exception=RNA editing and /transl_except qualifiers.  RNA \
editing indicates post-transcriptional changes prior to translation.  Use \
/transl_except for individual codon exceptions such as selenocysteine or \
other nonsense suppressors.")),
    TErrTypStrs( eErr_SEQ_FEAT_NoNameForProtein,
    TErrStrs( "NoNameForProtein",
"A protein feature has a description, but no product name.")),
    TErrTypStrs( eErr_SEQ_FEAT_TaxonDbxrefOnFeature,
    TErrStrs( "TaxonDbxrefOnFeature",
"A BioSource feature has a taxonID database identifier in the db_xref area \
common to all features.  This db_xref should only exist within the separate \
BioSource xref list.")),
    TErrTypStrs( eErr_SEQ_FEAT_MultipleBioseqs,
    TErrStrs( "MultipleBioseqs",
"Feature location refers to multiple near non-part bioseqs.")),
    TErrTypStrs( eErr_SEQ_FEAT_CDSmRNAmismatch,
    TErrStrs( "CDSmRNAmismatch",
"There should usually be a one-to-one correspondence between mRNA and CDS \
under a given gene.")),
    TErrTypStrs( eErr_SEQ_FEAT_UnnecessaryException,
    TErrStrs( "UnnecessaryException",
"The feature is marked with an exception qualifier, but the validator does \
not detect an error that needs to be suppressed.")),
    TErrTypStrs( eErr_SEQ_FEAT_LocusTagProductMismatch,
    TErrStrs( "LocusTagProductMismatch",
"In certain records a policy is that the locus_tag of the gene is expected to \
match the prefix of the general ID of the CDS or mRNA product Bioseq.")),
    TErrTypStrs( eErr_SEQ_FEAT_MrnaTransFail,
    TErrStrs( "MrnaTransFail",
"A fundamental error occurred in software while attempting to transcribe this \
messenger RNA. It is either a software problem or sever data corruption.")),
    TErrTypStrs( eErr_SEQ_FEAT_ImproperBondLocation,
    TErrStrs( "ImproperBondLocation,",
"Only bond features should have locations of type bond. Most other features should \
use interval or point locations.")),

/* SEQ_ALIGN */

    TErrTypStrs( eErr_SEQ_ALIGN_SeqIdProblem,
    TErrStrs( "SeqIdProblem",
"The seqence referenced by an alignment SeqID is not packaged in the record.")),
    TErrTypStrs( eErr_SEQ_ALIGN_StrandRev,
    TErrStrs( "StrandRev",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_DensegLenStart,
    TErrStrs( "DensegLenStart",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_StartMorethanBiolen,
    TErrStrs( "StartMorethanBiolen",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_EndMorethanBiolen,
    TErrStrs( "EndMorethanBiolen",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_LenMorethanBiolen,
    TErrStrs( "LenMorethanBiolen",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_SumLenStart,
    TErrStrs( "SumLenStart",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_SegsDimMismatch,
    TErrStrs( "SegsDimMismatch",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_SegsNumsegMismatch,
    TErrStrs( "SegsNumsegMismatch",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_SegsStartsMismatch,
    TErrStrs( "SegsStartsMismatch",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_SegsPresentMismatch,
    TErrStrs( "SegsPresentMismatch",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_SegsPresentStartsMismatch,
    TErrStrs( "SegsPresentStartsMismatch",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_SegsPresentStrandsMismatch,
    TErrStrs( "SegsPresentStrandsMismatch",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_FastaLike,
    TErrStrs( "FastaLike",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_SegmentGap,
    TErrStrs( "SegmentGap",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_SegsInvalidDim,
    TErrStrs( "SegsInvalidDim",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_Segtype,
    TErrStrs( "Segtype",
"Please contact the sequence database for further help with this error.")),
    TErrTypStrs( eErr_SEQ_ALIGN_BlastAligns,
    TErrStrs( "BlastAligns",
"BLAST alignments are not desired in records submitted to the sequence database.")),

/* SEQ_GRAPH */

    TErrTypStrs( eErr_SEQ_GRAPH_GraphMin,
    TErrStrs( "GraphMin",
"The graph minimum value is outside of the 0-100 range.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphMax,
    TErrStrs( "GraphMax",
"The graph maximum value is outside of the 0-100 range.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphBelow,
    TErrStrs( "GraphBelow",
"Some quality scores are below the stated graph minimum value.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphAbove,
    TErrStrs( "GraphAbove",
"Some quality scores are above the stated graph maximum value.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphByteLen,
    TErrStrs( "GraphByteLen",
"The number of bytes in the quality graph does not correspond to the \
stated length of the graph.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphOutOfOrder,
    TErrStrs( "GraphOutOfOrder",
"The quality graphs are not packaged in order - may be due to an old \
fa2htgs bug.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphBioseqLen,
    TErrStrs( "GraphBioseqLen",
"The length of the quality graph does not correspond to the length of \
the Bioseq.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphSeqLitLen,
    TErrStrs( "GraphSeqLitLen",
"The length of the quality graph does not correspond to the length of \
the delta Bioseq literal component.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphSeqLocLen,
    TErrStrs( "GraphSeqLocLen",
"The length of the quality graph does not correspond to the length of \
the delta Bioseq location component.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphStartPhase,
    TErrStrs( "GraphStartPhase",
"The quality graph does not start or stop on a sequence segment \
boundary.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphStopPhase,
    TErrStrs( "GraphStopPhase",
"The quality graph does not start or stop on a sequence segment \
boundary.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphDiffNumber,
    TErrStrs( "GraphDiffNumber",
"The number quality graph does not equal the number of sequence \
segments.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphACGTScore,
    TErrStrs( "GraphACGTScore",
"Quality score values for known bases should be above 0.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphNScore,
    TErrStrs( "GraphNScore",
"Quality score values for unknown bases should not be above 0.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphGapScore,
    TErrStrs( "GraphGapScore",
"Gap positions should not have quality scores above 0.")),
    TErrTypStrs( eErr_SEQ_GRAPH_GraphOverlap,
    TErrStrs( "GraphOverlap",
"Quality graphs overlap - may be due to an old fa2htgs bug.")),

/* INTERNAL */

    TErrTypStrs( eErr_INTERNAL_Exception,
    TErrStrs( "Exception",
"Exception was caught while performing validation. Vaidation terminated.")),
};

typedef CStaticArrayMap<unsigned int, TErrStrs> TErrTypeStrsMap;
DEFINE_STATIC_ARRAY_MAP(TErrTypeStrsMap, sc_ErrStrsMap, sc_ErrStrs);

#undef BEGIN
#undef END


CValidErrItem::CValidErrItem
(EDiagSev             sev,
 unsigned int         ec,
 const string&        msg,
 const string&        desc,
 const CSerialObject& obj,
 const string&        acc)
  : m_Object(&obj)
{
    SetSev(sev);
    SetErrIndex(ec);
    SetMsg(msg);
    SetObjDesc(desc);
    SetAccession(acc);
}

CValidErrItem::CValidErrItem
(EDiagSev             sev,
 unsigned int         ec,
 const string&        msg,
 const string&        desc,
 const CSerialObject& obj,
 const CSeq_entry&    ctx,
 const string&        acc)
  : m_Object(&obj),
    m_Ctx(&ctx)
{
    SetSev(sev);
    SetErrIndex(ec);
    SetMsg(msg);
    SetObjDesc(desc);
    SetAccession(acc);
}


// destructor
CValidErrItem::~CValidErrItem(void)
{
}


const string& CValidErrItem::GetErrCode(void) const
{
    return ConvertErrCode(GetErrIndex());
}


unsigned int CValidErrItem::GetErrCount(void)
{
    return sc_ErrStrsMap.size();
}


const string& CValidErrItem::GetErrGroup(void) const
{
    static const string kSeqInst  = "SEQ_INST";
    static const string kSeqDescr = "SEQ_DESCR";
    static const string kGeneric  = "GENERIC";
    static const string kSeqPkg   = "SEQ_PKG";
    static const string kSeqFeat  = "SEQ_FEAT";
    static const string kSeqAlign = "SEQ_ALIGN";
    static const string kSeqGraph = "SEQ_GRAPH";
    static const string kInternal = "INTERNAL";
    static const string kUnknown   = "UNKNOWN";

    
    TErrIndex errIndex = GetErrIndex();
#define IS_IN(x) (errIndex > ERR_CODE_BEGIN(x))  &&  (errIndex < ERR_CODE_END(x))

    if ((errIndex < eErr_MAX)  &&  (errIndex > 0)) {
        if ( IS_IN(SEQ_INST) ) {
            return kSeqInst;
        } else if ( IS_IN(SEQ_DESCR) ) {
            return kSeqDescr;
        } else if ( IS_IN(GENERIC) ) {
            return kGeneric;
        } else if ( IS_IN(SEQ_PKG) ) {
            return kSeqPkg;
        } else if ( IS_IN(SEQ_FEAT) ) {
            return kSeqFeat;
        } else if ( IS_IN(SEQ_ALIGN) ) {
            return kSeqAlign;
        } else if ( IS_IN(SEQ_GRAPH) ) {
            return kSeqGraph;
        } else if ( IS_IN(INTERNAL) ) {
            return kInternal;
        }
    }

#undef IS_IN

    return kUnknown;
}


const string& CValidErrItem::GetVerbose(void) const
{
    TErrIndex err = GetErrIndex();
    if (err <= eErr_MAX) {
        TErrTypeStrsMap::const_iterator err_it = sc_ErrStrsMap.find(err);
        if (err_it != sc_ErrStrsMap.end()) {
            return err_it->second.second;
        }
    }
    return sc_ErrStrsMap.find(eErr_UNKNOWN)->second.second ;
}


const CSerialObject& CValidErrItem::GetObject(void) const
{
    return *m_Object;
}


bool CValidErrItem::IsSetObject(void) const 
{
    return m_Object.NotEmpty(); 
}


const string& CValidErrItem::ConvertSeverity(EDiagSev sev)
{
    static const string str_sev[] = {
        "Info", "Warning", "Error", "Critical", "Fatal", "Trace"
    };

    return str_sev[sev];
}


const string& CValidErrItem::ConvertErrCode(unsigned int err_int)
{
    TErrIndex err = static_cast<TErrIndex> (err_int);
    if (err <= eErr_MAX) {
        TErrTypeStrsMap::const_iterator err_it = sc_ErrStrsMap.find(err);
        if (err_it != sc_ErrStrsMap.end()) {
            return err_it->second.first;
        }
    }
    return  sc_ErrStrsMap.find(eErr_UNKNOWN)->second.first ;
}


END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


/*
* ===========================================================================
*
* $Log$
* Revision 1.4  2006/09/25 12:56:41  dicuccio
* Return by const reference, not by value
*
* Revision 1.3  2006/04/03 17:10:08  rsmith
* make Err values permanent. Move into objects/valerr
*
* Revision 1.2  2006/03/16 14:14:46  rsmith
* add IsSetObject()
*
* Revision 1.1  2006/02/07 15:07:45  rsmith
* initial checkin
*
*
* ===========================================================================
*/
/* Original file checksum: lines: 64, chars: 1875, CRC32: 4cb3d7e3 */
