-- $Id: omssa.asn,v 1.18 2005/01/11 21:08:43 lewisg Exp $
--**********************************************************************
--
--  OMSSA (Open Mass Spectrometry Search Algorithm) data definitions
--  Lewis Geer, 2003
--
--  make using something like
--  "datatool -m omssa.asn -oc ObjOmssa -oA -od omssa.def"
--
--  note that this file requires omssa.def
--
--**********************************************************************

OMSSA DEFINITIONS ::=
BEGIN


-- Generic holder for experimental info

NameValue ::= SEQUENCE {
	name VisibleString,
        value VisibleString
        }

-- Holds a single spectrum

MSSpectrum ::= SEQUENCE {
	number INTEGER, -- unique number of spectrum
	charge SEQUENCE OF INTEGER,  -- may be more than one if unknown
	precursormz INTEGER,  -- scaled Da
	mz SEQUENCE OF INTEGER,  -- scaled Da
	abundance SEQUENCE OF INTEGER,  -- scaled
	ids SEQUENCE OF VisibleString OPTIONAL,  -- ids/filenames
        namevalue SEQUENCE OF NameValue OPTIONAL -- extra info: retention times, etc.
	}


-- Holds a set of spectra

MSSpectrumset ::= SEQUENCE OF MSSpectrum


-- enumerate enzymes

MSEnzymes ::= INTEGER {
	trypsin (0),
	argc (1),
        cnbr (2),
	chymotrypsin (3),
	formicacid (4),
	lysc (5),
	lysc-p (6),
	pepsin-a (7),
	tryp-cnbr (8),
	tryp-chymo (9),
	trypsin-p (10),
        max(11),
	none (255)
	}


-- enumerate modifications

MSMod ::= INTEGER {
    kmethyl (0),          -- methylation of K
    moxy (1),             -- oxidation of methionine
    ccarboxymethyl (2),   -- carboxymethyl cysteine
    ccarbamidomethyl(3),  -- carbamidomethyl cysteine
    kqdeamidation (4),    -- deamidation of K and Q
    cpropionamide (5),    -- propionamide cysteine
    sphosphorylation (6), -- phosphorylation of S
    tphosphorylation (7), -- phosphorylation of T
    yphosphorylation (8), -- phosphorylation of Y    
    ntermmcleave (9),     -- N terminal methionine cleavage
    ntermacetyl (10),     -- N terminal acetyl
    ntermmethyl (11),     -- N terminal methyl
    ntermtrimethyl (12),  -- N terminal trimethyl
    dmethythiol (13),     -- beta methythiolation of D
    qmethyl (14),         -- methylation of Q
    ktrimethyl (15),      -- trimethylation of K
    dmethyl (16),         -- methylation of D
    emethyl (17),         -- methylation of E
    ctermmethyl (18),     -- C terminal methylation
    dtrideuteromethyl (19), -- trideuteromethylation of D
    etrideuteromethyl (20), -- trideuteromethylation of E
    ctermtrideuteromethy (21),  -- C terminal trideuteromethylation
    max(22),
    none(255)
    }


-- How is charge to be handled?  Some input files are not clear
-- on this.  For example, a dta file only specifies one charge, 
-- even though the charge is not really known.

MSCalcPlusOne ::= INTEGER {
	dontcalc (0),  -- don't guess charge one
	calc (1)       -- guess charge one
	}

-- user instructions on whether to believe charges in input file
	
MSCalcCharge ::= INTEGER {
	calculate (0),  -- guess the charge(s) from the data
	usefile (1),    -- use what the input file says
	userange (2)    -- use the charge range specified
	}

-- How to handle precursor charge

MSChargeHandle ::= SEQUENCE {
        calcplusone MSCalcPlusOne DEFAULT 1,  -- do we guess charge one?
	calccharge MSCalcCharge DEFAULT 2,    -- how do we handle other charges?
	mincharge INTEGER DEFAULT 2,          -- if userange, what is the min?
	maxcharge INTEGER DEFAULT 3,          -- if userange, what is the max?
	considermult INTEGER DEFAULT 3        -- at which precursor charge to consider +2 ions?
	}
	

-- what type of atomic mass to use

MSSearchType ::= INTEGER {
	monoisotopic(0),
	average(1)
	}

-- Search settings

MSSearchSettings ::= SEQUENCE {
	precursorsearchtype MSSearchType,  -- average or monoisotopic?
	productsearchtype MSSearchType,  -- average or monoisotopic?
	ionstosearch SEQUENCE OF MSIonType,  -- which ions to search?
	peptol REAL,  -- peptide mass tolerance
	msmstol REAL, -- msms mass tolerance
        cutoff REAL,  -- evalue cutoff
          -- next 3 fields define intensity fraction below
          -- which peaks will be discard
        cutlo REAL, -- the start of the cutoff, fraction of most intense peak
        cuthi REAL, -- the end of the cutoff
        cutinc REAL, -- the increment of the cutoff
        singlewin INTEGER,  -- the size of the single charge filtering window
        doublewin INTEGER,  -- the size of the double charge filtering window
	singlenum INTEGER,  -- the number of peaks allowed in the single window
        doublenum INTEGER,  -- the number of peaks allowed in the double window
	fixed SEQUENCE OF MSMod,     -- fixed PTM's
	variable SEQUENCE OF MSMod,  -- variable PTM's
	enzyme MSEnzymes,      -- digestion enzyme
	missedcleave INTEGER,  -- number of missed cleaves allowed
	hitlistlen INTEGER DEFAULT 25,  -- the number of hits kept in memory
	                                -- for a spectrum
	db VisibleString,  -- sequence set to search, e.g. "nr"
        tophitnum INTEGER, -- number of m/z to consider in first pass
        minhit INTEGER DEFAULT 2, -- minimum number of m/z values for a valid hit
        minspectra INTEGER DEFAULT 4, -- minimum number of m/z for a valid spectra
        scale INTEGER DEFAULT 100,  -- scale for m/z float to integer
        maxmods INTEGER DEFAULT 64,  -- maximum number of mass ladders per
                                     -- database peptide
	taxids SEQUENCE OF INTEGER OPTIONAL,  -- taxa to limit search
	chargehandling MSChargeHandle OPTIONAL  -- how to deal with charges
}


-- The search request that is given to the OMSSA algorithm

MSRequest ::= SEQUENCE {
	spectra MSSpectrumset,      -- the set of spectra
        settings MSSearchSettings,  -- the search settings
	rid VisibleString OPTIONAL  -- request id
	}


-- enumeration of ion types

MSIonType ::= INTEGER {
	a (0),
	b (1),
        c (2),
	x (3),
	y (4),
	z (5),
	max (6)
	}
	

-- defines a particular ion

MSMZHit ::= SEQUENCE {
	ion MSIonType,  -- ion type, e.g. b
	charge INTEGER, -- ion charge
	number INTEGER, -- the sequential number of the ion
	mz INTEGER  -- scaled m/z value in Da
}


-- contains information about sequences with identical peptide
-- sequences

MSPepHit ::= SEQUENCE {
	start INTEGER,       -- start position (inclusive) in sequence
	stop INTEGER,        -- stop position (inclusive) in sequence
	gi INTEGER OPTIONAL, -- genbank identifier
	accession VisibleString OPTIONAL,  -- sequence accession
	defline VisibleString OPTIONAL     -- sequence description
}	

-- modifications to a hit peptide

MSModHit ::= SEQUENCE {
	site INTEGER,  -- the position in the peptide
	modtype MSMod  -- the type of modification
	}


-- hits to a given spectrum

MSHits ::= SEQUENCE {
	evalue REAL,     -- E-value (expect value)
	pvalue REAL,     -- P-value (probability value)
	charge INTEGER,  -- the charge state used in search.  -1 == not +1
	pephits SEQUENCE OF MSPepHit, -- peptides that match this hit
	mzhits SEQUENCE OF MSMZHit OPTIONAL,  -- ions hit
	pepstring VisibleString OPTIONAL,  -- the peptide sequence
        mass INTEGER OPTIONAL,  -- scaled mass of peptide in Da
	mods SEQUENCE OF MSModHit OPTIONAL  -- modifications to sequence
	}


-- error return for a particular spectrum's hitset

MSHitError ::= INTEGER {
	none (0),
	generalerr (1),
	unable2read (2),  -- can't read the spectrum
	notenuffpeaks (3) -- not enough peaks to search
	}


-- contains a set of hits to a single spectrum

MSHitSet ::= SEQUENCE {
        number INTEGER, -- unique number of spectrum
        error MSHitError OPTIONAL,               -- error, if any
        hits SEQUENCE OF MSHits OPTIONAL,        -- set of hit to spectrum
        ids SEQUENCE OF VisibleString OPTIONAL,  -- filenames or other ids of spectra searched
        namevalue SEQUENCE OF NameValue OPTIONAL -- extra info: retention times, etc.
	}


-- error return for the entire response

MSResponseError ::= INTEGER {
	none (0),
	generalerr (1),
	noblastdb (2),   -- unable to open blast library
	noinput (3)      -- input missing
	}


-- search results

MSResponse ::= SEQUENCE {
	hitsets SEQUENCE OF MSHitSet,  -- hits grouped by spectrum
        scale INTEGER DEFAULT 100,  -- scale to change m/z float to integer
	rid VisibleString OPTIONAL,  -- request id
	error MSResponseError OPTIONAL,  -- error response
        version VisibleString OPTIONAL,  -- version of OMSSA
	email VisibleString OPTIONAL,  -- email address for notification
        dbversion INTEGER OPTIONAL    -- version of db searched (usually size)
	}	
	
-- holds both search requests and responses

MSSearch ::= SEQUENCE {
	request SEQUENCE OF MSRequest OPTIONAL,
	response SEQUENCE OF MSResponse OPTIONAL
	}

END
