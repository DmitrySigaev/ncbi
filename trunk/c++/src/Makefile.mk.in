#################################
# $Id$
# Author:  Denis Vakatov (vakatov@ncbi.nlm.nih.gov)
#################################
#
# This template must be "configure"d and included in the very beginning
# of all underlying configurable NCBI project makefiles exactly this way:
#
# srcdir = @srcdir@
# include @builddir@/Makefile.mk
#
#################################


### Make sure to use a right command shell

@make_shell@


### Configurable paths

top_srcdir     = @top_srcdir@
abs_top_srcdir = @abs_top_srcdir@
build_root     = @build_root@
builddir       = @builddir@
status_dir     = @status_dir@


### Other paths
### includedir0 is reserved; user makefiles should only use includedir.

includedir0 = $(top_srcdir)/include
includedir  = $(includedir0)
incdir      = $(build_root)/inc
libdir      = $(build_root)/lib
bindir      = $(build_root)/bin
runpath     = @runpath@

# Destination root for exported headers (overridden by import_project.sh)
incdest     = $(incdir)

### Optional top-level project groups

OPT_GROUPS = @OPT_GROUPS@


### Header dirs to include

STD_INCLUDE = -I$(incdir) -I$(includedir0) $(OPT_GROUPS:%=-I$(includedir0)/%)


### Auxiliary commands, filters

RM       = rm -f
RMDIR    = rm -rf
COPY     = cp -p
BINCOPY  = @BINCOPY@
TOUCH    = touch
BINTOUCH = $(TOUCH)
LN_S	   = @LN_S@

### filters for screening out bogus messages
CC_FILTER    = @CC_FILTER@
CXX_FILTER   = @CXX_FILTER@
AR_FILTER    = @AR_FILTER@
LINK_FILTER  = @LINK_FILTER@

### wrappers (ccache, purify, etc.)
CC_WRAPPER   = @CC_WRAPPER@
CXX_WRAPPER  = @CXX_WRAPPER@
AR_WRAPPER   = @AR_WRAPPER@
LINK_WRAPPER = @LINK_WRAPPER@

CHECK_ARG = @CHECK_ARG@


### Configurable compiler/librarian/linker binaries and options
### (CONF-Set:  not to be alternated or used anywhere in the user makefiles!)

CONF_CC     = @CC@
CONF_CXX    = @CXX@
CONF_CPP    = @CPP@
CONF_CXXCPP = @CXXCPP@
CONF_AR     = @AR@
CONF_RANLIB = @RANLIB@
CONF_LINK   = @LINK@
CONF_C_LINK = @C_LINK@
CONF_STRIP  = @STRIP@

CONF_CFLAGS   = @CFLAGS@
CONF_CXXFLAGS = @CXXFLAGS@
CONF_CPPFLAGS = @CPPFLAGS@ $(STD_INCLUDE)
CONF_DEPFLAGS = @DEPFLAGS@
CONF_DEPFLAGS_POST = @DEPFLAGS_POST@
CONF_LDFLAGS  = @LDFLAGS@
CONF_LIBS     = @LIBS@
CONF_C_LIBS   = @C_LIBS@


### Configurable compiler/librarian/linker binaries and options
### (ORIG-Set:  not to be alternated, but can be used in the user makefiles
### to alternate the value of relevant flags, e.g. CXX = $(ORIG_CXX) -DFOO_BAR)

ORIG_CC     = $(CONF_CC)
ORIG_CXX    = $(CONF_CXX)
ORIG_CPP    = $(CONF_CPP)
ORIG_CXXCPP = $(CONF_CXXCPP)
ORIG_AR     = $(CONF_AR)
ORIG_RANLIB = $(CONF_RANLIB)
ORIG_LINK   = $(CONF_LINK)
ORIG_C_LINK = $(CONF_C_LINK)
ORIG_STRIP  = $(CONF_STRIP)

ORIG_CFLAGS   = $(CONF_CFLAGS)
ORIG_CXXFLAGS = $(CONF_CXXFLAGS)
ORIG_CPPFLAGS = $(CONF_CPPFLAGS)
ORIG_DEPFLAGS = $(CONF_DEPFLAGS)
ORIG_DEPFLAGS_POST = $(CONF_DEPFLAGS_POST)
ORIG_LDFLAGS  = $(CONF_LDFLAGS)
ORIG_LIBS     = $(CONF_LIBS)
ORIG_C_LIBS   = $(CONF_C_LIBS)


### Configurable compiler/librarian/linker binaries and options
### (WORK-Set:  to be used by standard build rules;
###             can be modified to meet a particular project requirements)

CC     = $(CONF_CC)
CXX    = $(CONF_CXX)
CPP    = $(CONF_CPP)
CXXCPP = $(CONF_CXXCPP)
AR     = $(CONF_AR)
RANLIB = $(CONF_RANLIB)
LINK   = $(CONF_LINK)
C_LINK = $(CONF_C_LINK) # Linker for pure-C programs
STRIP  = $(CONF_STRIP)

CFLAGS   = $(CONF_CFLAGS)
CXXFLAGS = $(CONF_CXXFLAGS)
CPPFLAGS = $(CONF_CPPFLAGS)
DEPFLAGS = $(CONF_DEPFLAGS)
DEPFLAGS_POST = $(CONF_DEPFLAGS_POST)
LDFLAGS  = $(CONF_LDFLAGS)
LIBS     = $(CONF_LIBS)
C_LIBS   = $(CONF_C_LIBS) # Libraries for pure-C programs
PRE_LIBS =

# To add directory /foo to the list to search at runtime, you can add
# $(RUNPATH_FLAG)/foo to your LDFLAGS.
RUNPATH_FLAG = @f_runpath@

### Debug/release suffixes
# "Debug" for debugging, "Release" for release
DEBUG_SFX = @DEBUG_SFX@
# 'd' for debugging, empty for release
D_SFX=@D_SFX@

### Muli-thread suffix
# "MT" if multi-thread,  "" if single-thread
MT_SFX = @MT_SFX@

### Whether to build apps
APP_OR_NULL = @APP_OR_NULL@

### DLL specifics
# whether to build the lib as static or dynamic
LIB_OR_DLL = @LIB_OR_DLL@
# library name suffix; either "-static" or empty
STATIC     = @STATIC@
# hard-coded; use only for "LIB_OR_DLL = both" libraries!
FORCE_STATIC = -static

LINK_DLL      = @LINK_DLL@
LINK_LOADABLE = @LINK_LOADABLE@
CFLAGS_DLL    = @CFLAGS_DLL@
CXXFLAGS_DLL  = @CXXFLAGS_DLL@
LDFLAGS_DLL   = $(LDFLAGS)

### To enable extra, potentially unsafe, optimization, use these flags
### INSTEAD of $(ORIG_*FLAGS).
### Note: If you have compiled any files with $(FAST_CXXFLAGS), you
### should pass $(FAST_LDFLAGS) to the linker for consistency.
FAST_CFLAGS   = @FAST_CFLAGS@
FAST_CXXFLAGS = @FAST_CXXFLAGS@
FAST_LDFLAGS  = @FAST_LDFLAGS@

### For platform-specific includes
COMPILER = @COMPILER@
OSTYPE   = @OSTYPE@

### Pointer size
NCBI_PLATFORM_BITS = @NCBI_PLATFORM_BITS@

### Post-link command (empty by default, needed for FLTK apps on MacOS X)
POST_LINK = @:

### Configuration summary
signature = @signature@

### Do not use any default suffix rules
.SUFFIXES:

### Use automatic auto-dependencies (SunOS make, .KEEP_STATE:)
@KeepStateTarget@
### "rules"/"rules_with_autodep" (whether to build auto-deps for GNU make)
Rules=@Rules@
### Kludge module to workaround an RTTI bug (Sun WorkShop only)
serial_ws50_rtti_kludge=@serial_ws50_rtti_kludge@
### Special object file needed for atomic counters
ncbicntr=@ncbicntr@

#################################
# Some platform-specific system libs that can be linked eventually
THREAD_LIBS  = @THREAD_LIBS@
NETWORK_LIBS = @NETWORK_LIBS@
MATH_LIBS    = @MATH_LIBS@
KSTAT_LIBS   = @KSTAT_LIBS@
RPCSVC_LIBS  = @RPCSVC_LIBS@
CRYPT_LIBS   = @CRYPT_LIBS@
DL_LIBS      = @DL_LIBS@
RT_LIBS      = @RT_LIBS@
ICONV_LIBS   = @ICONV_LIBS@

# This is a temporary workaround for Solaris/Intel platforms where
# we had to do a kludgy patch to work around a faulty Sybase "tli" lib.
# One can use this instead of $(NETWORK_LIBS) (which has the patch built in)
# if he is not using Sybase libs (and maybe even does not have them installed).
NETWORK_PURE_LIBS = @NETWORK_PURE_LIBS@

# Extra name-resolution libraries; $(NETWORK[_PURE]_LIBS) should normally
# suffice, but in some specialized cases you may need to prepend
# $(RESOLVER_LIBS).
RESOLVER_LIBS = @RESOLVER_LIBS@


#################################
# Optional variables that may be needed to build some projects
# (see in "configure.ac" for the pre-set defaults)
#

# --with-local-lbsm:  --->  src/connect/Makefile.[x]connect.lib
LOCAL_LBSM = @local_lbsm@
# --with-ncbi-crypt:  --->  src/connect/ext/Makefile.connext.lib
NCBI_CRYPT = @ncbi_crypt@

# non-public (X)CONNECT extensions
CONNEXT  = @CONNEXT@
XCONNEXT = @XCONNEXT@

# NCBI C++ API for BerkeleyDB
BDB_LIB       = @BDB_LIB@
BDB_CACHE_LIB = @BDB_CACHE_LIB@

# Compression libraries; the LIBS version goes in LIBS, and the LIB
# version goes in LIB.
Z_INCLUDE   = @Z_INCLUDE@
Z_LIBS      = @Z_LIBS@
Z_LIB       = @Z_LIB@
BZ2_INCLUDE = @BZ2_INCLUDE@
BZ2_LIBS    = @BZ2_LIBS@
BZ2_LIB     = @BZ2_LIB@

CMPRS_INCLUDE = $(Z_INCLUDE) $(BZ2_INCLUDE)
CMPRS_LIBS    = $(Z_LIBS) $(BZ2_LIBS)
CMPRS_LIB     = $(Z_LIB) $(BZ2_LIB)

# Perl-Compatible Regular Expressions
# For historical reasons, the bundled (LIB) version contains the POSIX
# wrapper and goes by the name "regexp".
PCRE_INCLUDE   = @PCRE_INCLUDE@
PCRE_LIBS      = @PCRE_LIBS@
PCREPOSIX_LIBS = @PCREPOSIX_LIBS@
PCRE_LIB       = @PCRE_LIB@

# OpenSSL, GnuTLS: headers and libs; TLS_* points to GNUTLS_* by preference.
GNUTLS_INCLUDE  = @GNUTLS_INCLUDE@
GNUTLS_LIBS     = @GNUTLS_LIBS@
OPENSSL_INCLUDE = @OPENSSL_INCLUDE@
OPENSSL_LIBS    = @OPENSSL_LIBS@
TLS_INCLUDE     = @TLS_INCLUDE@
TLS_LIBS        = @TLS_LIBS@

# Sybase:  headers and libs
SYBASE_INCLUDE = @SYBASE_INCLUDE@
SYBASE_LIBS    = @SYBASE_LIBS@
SYBASE_DLLS    = @SYBASE_DLLS@
SYBASE_DBLIBS  = @SYBASE_DBLIBS@

# FreeTDS -- version 0.60 (named after protocol v8), v0.63, default
ftds8         = @ftds8@
FTDS8_LIBS    = @FTDS8_LIBS@
FTDS8_LIB     = @FTDS8_LIB@
FTDS8_INCLUDE = @FTDS8_INCLUDE@

ftds63         = @ftds63@
FTDS63_LIBS    = @FTDS63_LIBS@
FTDS63_LIB     = @FTDS63_LIB@
FTDS63_INCLUDE = @FTDS63_INCLUDE@

FTDS_LIBS    = @FTDS_LIBS@
FTDS_LIB     = @FTDS_LIB@
FTDS_INCLUDE = @FTDS_INCLUDE@

# MySQL: headers and libs
MYSQL_INCLUDE = @MYSQL_INCLUDE@
MYSQL_LIBS    = @MYSQL_LIBS@

# Berkeley DB: headers and libs
BERKELEYDB_INCLUDE         = @BERKELEYDB_INCLUDE@
BERKELEYDB_STATIC_LIBS     = @BERKELEYDB_STATIC_LIBS@
BERKELEYDB_LIBS            = @BERKELEYDB_LIBS@
BERKELEYDB_CXX_STATIC_LIBS = @BERKELEYDB_CXX_STATIC_LIBS@
BERKELEYDB_CXX_LIBS        = @BERKELEYDB_CXX_LIBS@

# ODBC: headers and libs
ODBC_INCLUDE = @ODBC_INCLUDE@
ODBC_LIBS    = @ODBC_LIBS@

# PYTHON: headers and libs
PYTHON_INCLUDE = @PYTHON_INCLUDE@
PYTHON_LIBS    = @PYTHON_LIBS@

# CPPUNIT: headers and libs
CPPUNIT_INCLUDE = @CPPUNIT_INCLUDE@
CPPUNIT_LIBS    = @CPPUNIT_LIBS@

# Boost: headers and libs [use as $(BOOST_LIBPATH) $(BOOST_*_LIBS) $(RT_LIBS)]
BOOST_INCLUDE              = @BOOST_INCLUDE@
BOOST_LIBPATH              = @BOOST_LIBPATH@
BOOST_TAG                  = @BOOST_TAG@
BOOST_TEST_PEM_LIBS        = @BOOST_TEST_PEM_LIBS@
BOOST_TEST_PEM_STATIC_LIBS = @BOOST_TEST_PEM_STATIC_LIBS@
BOOST_TEST_TEM_LIBS        = @BOOST_TEST_TEM_LIBS@
BOOST_TEST_TEM_STATIC_LIBS = @BOOST_TEST_TEM_STATIC_LIBS@
BOOST_TEST_UTF_LIBS        = @BOOST_TEST_UTF_LIBS@
BOOST_TEST_UTF_STATIC_LIBS = @BOOST_TEST_UTF_STATIC_LIBS@

# NCBI C Toolkit:  headers and libs
NCBI_C_INCLUDE = @NCBI_C_INCLUDE@
NCBI_C_LIBPATH = @NCBI_C_LIBPATH@
NCBI_C_ncbi = @NCBI_C_ncbi@

# OpenGL: headers and libs (including core X dependencies) for code
# not using other toolkits.  (The wxWindows and FLTK variables already
# include these as appropriate.)
OPENGL_INCLUDE = @OPENGL_INCLUDE@
OPENGL_LIBS    = @OPENGL_LIBS@
OSMESA_INCLUDE = @OSMESA_INCLUDE@
OSMESA_LIBS    = @OSMESA_LIBS@
GLUT_INCLUDE   = @GLUT_INCLUDE@
GLUT_LIBS      = @GLUT_LIBS@

# wxWindows (2.4 or older):  headers and libs
WXWIN_INCLUDE        = @WXWIN_INCLUDE@
WXWIN_LIBS           = @WXWIN_LIBS@
WXWIN_STATIC_LIBS    = @WXWIN_STATIC_LIBS@
WXWIN_GL_LIBS        = @WXWIN_GL_LIBS@
WXWIN_GL_STATIC_LIBS = @WXWIN_GL_STATIC_LIBS@
# Assign WXWIN_POST_LINK to POST_LINK when building WX apps.
WXWIN_POST_LINK      = @WXWIN_POST_LINK@

# wxWidgets (2.6 or newer):  headers and libs
WXWIDGETS_INCLUDE        = @WXWIDGETS_INCLUDE@
WXWIDGETS_LIBS           = @WXWIDGETS_LIBS@
WXWIDGETS_STATIC_LIBS    = @WXWIDGETS_STATIC_LIBS@
WXWIDGETS_GL_LIBS        = @WXWIDGETS_GL_LIBS@
WXWIDGETS_GL_STATIC_LIBS = @WXWIDGETS_GL_STATIC_LIBS@
# Assign WXWIDGETS_POST_LINK to POST_LINK when building WX apps.
WXWIDGETS_POST_LINK      = @WXWIDGETS_POST_LINK@

# FLTK:  headers and libs (both with and without OpenGL support).
FLTK_INCLUDE     = @FLTK_INCLUDE@
FLTK_LIBS        = @FLTK_LIBS@
FLTK_LIBS_GL     = @FLTK_LIBS_GL@
FLTK_LIBS_IMAGES = @FLTK_LIBS_IMAGES@
FLTK_LIBS_ALL    = @FLTK_LIBS_ALL@
# Assign FLTK_POST_LINK to POST_LINK when building FLTK apps.
FLTK_CONFIG      = @FLTK_CONFIG@
FLTK_POST_LINK   = $(FLTK_CONFIG) --post
# Variants of FLTK_LIBS_* for use in applications (typically CGIs) that
# will run without FLTK's shared libraries available.
FLTK_STATIC_LIBS        = @FLTK_STATIC_LIBS@
FLTK_STATIC_LIBS_GL     = @FLTK_STATIC_LIBS_GL@
FLTK_STATIC_LIBS_IMAGES = @FLTK_STATIC_LIBS_IMAGES@
FLTK_STATIC_LIBS_ALL    = @FLTK_STATIC_LIBS_ALL@

# Fast-CGI lib:  headers and libs
FASTCGI_INCLUDE = @FASTCGI_INCLUDE@
FASTCGI_LIBS    = @FASTCGI_LIBS@
# Fast-CGI lib:  (module to add to the "xcgi" library)
FASTCGI_OBJS    = @FASTCGI_OBJS@

# NCBI SSS:  headers, library path, libraries
NCBI_SSS_INCLUDE = @NCBI_SSS_INCLUDE@
NCBI_SSS_LIBPATH = @NCBI_SSS_LIBPATH@
LIBSSSUTILS      = @LIBSSSUTILS@
LIBSSSDB         = @LIBSSSDB@

# SP:  headers, libraries
SP_INCLUDE = @SP_INCLUDE@
SP_LIBS    = @SP_LIBS@

# ORBacus CORBA headers, library path, libraries
ORBACUS_INCLUDE = @ORBACUS_INCLUDE@
ORBACUS_LIBPATH = @ORBACUS_LIBPATH@
LIBOB           = @LIBOB@
# LIBIMR should be empty for single-threaded builds
LIBIMR          = @LIBIMR@

# IBM's International Components for Unicode
ICU_CONFIG      = @ICU_CONFIG@
ICU_INCLUDE     = @ICU_INCLUDE@
ICU_LIBS        = @ICU_LIBS@
ICU_STATIC_LIBS = @ICU_STATIC_LIBS@

# XML/XSL support:
EXPAT_INCLUDE      = @EXPAT_INCLUDE@
EXPAT_LIBS         = @EXPAT_LIBS@
EXPAT_STATIC_LIBS  = @EXPAT_STATIC_LIBS@
SABLOT_INCLUDE     = @SABLOT_INCLUDE@
SABLOT_LIBS        = @SABLOT_LIBS@
SABLOT_STATIC_LIBS = @SABLOT_STATIC_LIBS@
LIBXML_INCLUDE     = @LIBXML_INCLUDE@
LIBXML_LIBS        = @LIBXML_LIBS@
LIBXML_STATIC_LIBS = @LIBXML_STATIC_LIBS@
LIBXSLT_INCLUDE    = @LIBXSLT_INCLUDE@
LIBXSLT_LIBS       = @LIBXSLT_LIBS@
LIBXSLT_STATIC_LIBS= @LIBXSLT_STATIC_LIBS@
XERCES_INCLUDE     = @XERCES_INCLUDE@
XERCES_LIBS        = @XERCES_LIBS@
XERCES_STATIC_LIBS = @XERCES_STATIC_LIBS@
XALAN_INCLUDE      = @XALAN_INCLUDE@
XALAN_LIBS         = @XALAN_LIBS@
XALAN_STATIC_LIBS  = @XALAN_STATIC_LIBS@

# OpenEye OEChem library:
OECHEM_INCLUDE = @OECHEM_INCLUDE@
OECHEM_LIBS    = @OECHEM_LIBS@

#SQLite 2.x
SQLITE_INCLUDE = @SQLITE_INCLUDE@
SQLITE_LIBS    = @SQLITE_LIBS@

#SQLite 3.x
SQLITE3_INCLUDE = @SQLITE3_INCLUDE@
SQLITE3_LIBS    = @SQLITE3_LIBS@

# Various image-format libraries
JPEG_INCLUDE  = @JPEG_INCLUDE@
JPEG_LIBS     = @JPEG_LIBS@
PNG_INCLUDE   = @PNG_INCLUDE@
PNG_LIBS      = @PNG_LIBS@
TIFF_INCLUDE  = @TIFF_INCLUDE@
TIFF_LIBS     = @TIFF_LIBS@
GIF_INCLUDE   = @GIF_INCLUDE@
GIF_LIBS      = @GIF_LIBS@
UNGIF_INCLUDE = @UNGIF_INCLUDE@
UNGIF_LIBS    = @UNGIF_LIBS@
XPM_INCLUDE   = @XPM_INCLUDE@
XPM_LIBS      = @XPM_LIBS@

IMAGE_LIBS    = $(JPEG_LIBS) $(PNG_LIBS) $(TIFF_LIBS) $(GIF_LIBS) $(XPM_LIBS)

# FreeType
FREETYPE_INCLUDE = @FREETYPE_INCLUDE@
FREETYPE_LIBS    = @FREETYPE_LIBS@


#################################
# Useful sets of object libraries
# Interdependent sequence libraries + seqcode.  Does not include seqset.
COMPRESS_LDEP = $(CMPRS_LIB)
COMPRESS_LIBS = xcompress $(COMPRESS_LDEP)

GENBANK_LDEP = \
	ncbi_xreader_id1 ncbi_xreader_id2 xconnect ncbi_xreader_cache \
	ncbi_xreader_pubseqos dbapi_driver $(GENBANK_READER_LIBS)
GENBANK_LIBS = ncbi_xloader_genbank $(GENBANK_LDEP)

GENBANK_READER_LDEP = id1 id2 seqsplit $(COMPRESS_LIBS) $(SOBJMGR_LIBS)
GENBANK_READER_LIBS = ncbi_xreader $(GENBANK_READER_LDEP)

GENBANK_READER_PUBSEQOS_LDEP = dbapi_driver $(GENBANK_READER_LIBS)
GENBANK_READER_PUBSEQOS_LIBS = ncbi_xreader_pubseqos $(GENBANK_READER_PUBSEQOS_LDEP)

GENBANK_READER_ID1_LDEP = xconnect id1 $(GENBANK_READER_LIBS)
GENBANK_READER_ID1_LIBS = ncbi_xreader_id1 $(GENBANK_READER_ID1_LDEP)

GENBANK_READER_ID2_LDEP = xconnect id2 seqsplit $(GENBANK_READER_LIBS)
GENBANK_READER_ID2_LIBS = ncbi_xreader_id2 $(GENBANK_READER_ID2_LDEP)

GENBANK_READER_CACHE_LDEP = $(GENBANK_READER_LIBS)
GENBANK_READER_CACHE_LIBS = ncbi_xreader_cache $(GENBANK_READER_CACHE_LDEP)

SEQ_LIBS = seq seqcode sequtil
SOBJMGR_LDEP = seqset seqedit $(SEQ_LIBS) pub medline biblio general \
	xser xutil xncbi
SOBJMGR_LIBS = xobjmgr $(SOBJMGR_LDEP)
OBJMGR_LIBS = $(GENBANK_LIBS)

# Overlapping with qall is poor, so we have a second macro to make it
# easier to stay out of trouble.
QOBJMGR_ONLY_LIBS = xobjmgr id2 seqsplit id1 seqset $(SEQ_LIBS) pub medline biblio \
	general xcompress $(CMPRS_LIB)
QOBJMGR_LIBS = $(QOBJMGR_ONLY_LIBS) qall
QOBJMGR_STATIC_LIBS = $(QOBJMGR_ONLY_LIBS:%=%$(STATIC)) qall
