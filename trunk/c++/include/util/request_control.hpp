#ifndef UTIL___REQUEST_THROTTLER__HPP
#define UTIL___REQUEST_THROTTLER__HPP

/*  $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Denis Vakatov, Vladimir Ivanov
 *
 * File Description:
 *   Manage request rate to some shared resource
 *
 */

#include <corelib/ncbistd.hpp>
#include <corelib/ncbitime.hpp>


/** @addtogroup UTIL
 *
 * @{
 */

BEGIN_NCBI_SCOPE


/////////////////////////////////////////////////////////////////////////////
///
/// CRequestThrottlerException --
///
/// Define exceptions generated by CRequestThrottler.
///
/// CRequestThrottlerException inherits its basic functionality from
/// CCoreException and defines additional error codes.

class NCBI_XUTIL_EXPORT CRequestThrottlerException : public CCoreException
{
public:
    /// Error types that CRequestThrottler can generate.
    enum EErrCode {
        eNumRequestsMax,         ///< Maximum number of requests exceeded;
        eNumRequestsPerPeriod,   ///< Number of requests per period exceeded;
        eMinTimeBetweenRequests  ///< The time between two consecutive requests
                                 ///< is too short;
    };
    /// Translate from the error code value to its string representation.
    virtual const char* GetErrCodeString(void) const
    {
        switch (GetErrCode()) {
        case eNumRequestsMax:         return "eNumRequestsMax";
        case eNumRequestsPerPeriod:   return "eNumRequestsPerPeriod";
        case eMinTimeBetweenRequests: return "eMinTimeBetweenRequests";
        default:                      return CException::GetErrCodeString();
        }
    }
    // Standard exception boilerplate code.
    NCBI_EXCEPTION_DEFAULT(CRequestThrottlerException, CCoreException);
};



/////////////////////////////////////////////////////////////////////////////
///
/// CRequestThrottler --
///
/// Manage request rate to some shared resource, for example.

class NCBI_XUTIL_EXPORT CRequestThrottler
{
public:
    /// What to do if exceeded the rate limits
    enum EThrottleAction {
        eSleep,      ///< Sleep till the rate requirements are met & return
        eErrCode,    ///< Return immediately with err code == FALSE
        eException,  ///< Throw an exception
        eDefault     ///< in c-tor: eSleep;  in Wait() -- value set in c-tor
    };

    /// Constructor.
    ///
    /// Construct class object.
    /// Zero values for time spans 'per_period' or 'min_time_between_requests'
    /// means no rate restriction for that throttling mechanism, respectively.
    ///
    /// @param num_requests_allowed
    ///   Maximum number of allowed requests per 'per_period'.
    /// @param per_period
    ///   Time span in which only 'num_requests_allowed' requests can be
    ///   approved.
    /// @param min_time_between_requests
    ///   Minimum time between two succesful consecutive requests.
    /// @param throttle_action
    ///   Set throttle action by default. The eDefault means eSleep here.
    CRequestThrottler(unsigned int num_requests_allowed,
                      CTimeSpan    per_period                = CTimeSpan(1,0),
                      CTimeSpan    min_time_between_requests = CTimeSpan(0,0),
                      EThrottleAction  throttle_action       = eDefault);

    /// Approve a request.
    ///
    /// @action
    ///   Throttle action used by this function call. If passed argument
    ///   equal to eDefault that use throttle action was set in 
    ///   the constructor.
    /// @return
    ///   Return TRUE if everything meet to established requirements.
    ///   Return FALSE if some requirements are not passed, or
    ///   throw exception if throttle action was set to eException.
    bool Approve(EThrottleAction action = eDefault);

    /// Lock/unlock functions for use by generic RAII guard CGuard.
    /// See 'corelib/guard.hpp' for details.
    
    void Lock()   { Approve(eSleep); }
    void Unlock() { /* do nothing */ }

private:
    /// Add time of approve to time line
    void x_AddToTimeLine(const CTime& now);

    /// Remove from the list of approved requests all expared items.
    void x_CleanTimeLine(CTime& now);

private:
    // Saved parameters from constructor
    unsigned int     m_NumRequestsAllowed;
    CTimeSpan        m_PerPeriod;
    CTimeSpan        m_MinTimeBetweenRequests;
    EThrottleAction  m_ThrottleAction;

    CTime            m_LastApproved;   ///< Last approve time
    unsigned int     m_NumRequests;    ///< Num requests per period

    typedef AutoPtr<CTime> TTime;
    typedef vector<TTime>  TTimeLine;

    TTimeLine       m_TimeLine;        ///< Vector of times of approvals
};


/* @} */


END_NCBI_SCOPE


/*
 * ===========================================================================
 * $Log$
 * Revision 1.1  2005/03/02 13:53:18  ivanov
 * Initial revision
 *
 * ===========================================================================
 */

#endif  /* UTIL___REQUEST_THROTTLER__HPP */
