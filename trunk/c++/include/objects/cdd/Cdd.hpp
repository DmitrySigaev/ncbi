/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using specifications from the ASN data definition file
 *   'cdd.asn'.
 *
 * ---------------------------------------------------------------------------
 * $Log$
 * Revision 1.12  2002/10/21 22:07:49  hurwitz
 * added check for consensus sequence
 *
 * Revision 1.11  2002/10/16 23:33:46  hurwitz
 * added functions for curation-status and old-root descriptions
 *
 * Revision 1.10  2002/10/09 21:22:17  hurwitz
 * small change to previous commit
 *
 * Revision 1.9  2002/10/09 21:00:53  hurwitz
 * added function for getting seq-id string for a row of the alignment
 *
 * Revision 1.8  2002/09/20 18:33:48  hurwitz
 * added functions to support membership display
 *
 * Revision 1.7  2002/08/30 21:25:26  hurwitz
 * added function to re-arrange rows of alignment
 *
 * Revision 1.6  2002/08/02 18:57:40  hurwitz
 * fix STL inconsistencies
 *
 * Revision 1.5  2002/08/02 14:39:34  hurwitz
 * many new features
 *
 * Revision 1.4  2002/07/09 14:51:17  hurwitz
 * added function
 *
 * Revision 1.3  2002/06/19 20:28:58  hurwitz
 * added more support functions for cdd access
 *
 * Revision 1.2  2002/06/10 21:04:28  hurwitz
 * added access function to parent field
 *
 * Revision 1.1  2002/06/06 18:08:16  anyone
 * add custom Cdd operations
 *
 *
 * ===========================================================================
 */

#ifndef OBJECTS_CDD_CDD_HPP
#define OBJECTS_CDD_CDD_HPP


// generated includes
#include <string>
#include <list>
#include <deque>
#include <objects/cdd/Cdd_.hpp>
#include <objects/seq/Seq_data.hpp>
#include <objects/seqloc/PDB_seq_id.hpp>
#include <objects/seqalign/Dense_diag.hpp>
#include <objects/seqalign/Seq_align.hpp>
#include <objects/cdd/Feature_evidence.hpp>

// generated classes

BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::

const int ALIGN_ANNOTS_ALIGNED_FAILURE = 1;

class CCdd : public CCdd_Base
{
    typedef CCdd_Base Tparent;
    typedef list< CRef< CDense_diag > > TDendiag;
public:
    CCdd(void);                                     // constructor
    ~CCdd(void);                                    // destructor
    string GetAccession(int& Version);              // get accession and version of CD
    string GetAccession() {
      int Dummy;
      return(GetAccession(Dummy));
    }
    string GetParentAccession(int& Version);        // get accession and version of parent
    string GetParentAccession() {
      int Dummy;
      return(GetParentAccession(Dummy));
    }
    void   SetAccession(string Accession, int Version);      // set accession and version of CD
    void   SetAccession(string Accession) {
      SetAccession(Accession, 1);
    }
    void   SetParentAccession(string Parent, int Version);   // set accession and version of parent
    string GetLongDescription();                      // long description of CD
    string GetUpdateDate();                           // last update date of CD
    int    GetNumRows();                              // number of rows in CD
    int    GetNumSequences();                         // number of sequences in CD
    int    GetAlignmentLength();                      // total number aligned residues
    int    GetPSSMLength();                           // number of residues in master, from first to last aligned residue
    bool   GetGI(int Row, int& GI);                   // get GI of Row
    bool   GetPDB(int Row, const CPDB_seq_id*& pPDB); // get PDB ID of Row
    int    GetLowerBound(int Row);                    // get Row lower alignment bound
    int    GetUpperBound(int Row);                    // get Row upper alignment bound
    int    GetReMasterFailureCode();                  // before re-mastering do this check
    bool   AlignAnnotsAligned();                      // one of the checks for re-mastering
    bool   ReMaster(int Row);                         // make Row the new master
    bool   GetSeqID(int SeqIndex, CRef<CSeq_id>& SeqID);               // get SeqID from sequence list
    bool   GetSeqIDs(int SeqIndex, list< CRef< CSeq_id > >& SeqIDs);   // get SeqIDs from sequence list
    bool   GetSeqID(int Pair, int DenDiagRow, CRef<CSeq_id>& SeqID);   // get SeqID from alignment
    bool   GetSeqIDFromAlignment(int RowIndex, CRef<CSeq_id>& SeqID) { // get SeqID from alignment
      int  Pair = (RowIndex <= 1) ? 0 : RowIndex-1;
      int  DenDiagRow = (RowIndex == 0) ? 0 : 1;
      return(GetSeqID(Pair, DenDiagRow, SeqID));
    }
    bool   Get_GI_or_PDB_String_FromAlignment(        // get seq-id string for RowIndex of alignment
      int  RowIndex, std::string& Str, bool Pad, int Len
    );
    int    GetSeqIndex(CRef<CSeq_id>& SeqID);         // get index into sequence list
    bool   GetMmdbId(int SeqIndex, int& id);          // get mmdb-id from sequence list
    bool   EraseRows(std::deque<int>& KeepRows);      // erase rows from alignment
    bool   EraseRow(int RowIndex);                    // erase a row from alignment
    bool   MoveToTop(int RowIndex);                   // move row to top of alignment
    bool   MoveToBottom(int RowIndex);                // move row to bottom of alignment
    void   EraseSequences();                          // erase sequences not in alignment
    void   EraseSequence(int SeqIndex);               // erase a sequence from the set of seqs
    bool   SeqIdsMatch(CRef<CSeq_id>& ID1, CRef<CSeq_id>& ID2);  // see if ID's match
    bool   IsAMatchFor(CRef<CSeq_id>& ID);            // see if ID matches any ID in alignment
    bool   IsAMatchFor(CRef<CSeq_id>& ID, int& RowIndex);  // same, but return row that matches
    void   EraseStructureEvidence();                  // scan structure-evidence, erase missing biostruc-ids
    void   EraseUID();                                // erase CD's uid
    string GetDefline(int SeqIndex);                  // get description from sequence list
    string GetSpecies(int SeqIndex);                  // get species from sequence list
    // convert sequences to ncbieaa (extended ASCII 1 letter aa code) (return index of master)
    int    ConvertSequences(std::deque< std::string >& ConvertedSequences);
    // get dense-diag info for one row
    bool   GetDenDiagSet(int Row, const TDendiag*& pDenDiagSet);
    // get corresponding location on other row
    int    GetSeqPosition(const TDendiag* pDenDiagSet, int Position, bool OnMasterRow);
    // get the list of Seq-aligns
    bool   IsSeqAligns();
    const  list< CRef< CSeq_align > >& GetSeqAligns();
    string GetCurationStatusStr();                    // curation status of CD
    int    GetCurationStatus();
    bool   IsCurationStatus();
    void   SetCurationStatus(int Status);
    bool   IsOldRoot();                               // old-root of CD
    void   SetOldRoot(string Accession, int Version);
    bool   GetOldRoot(int Index, string& Accession, int& Version);
    int    GetNumIdsInOldRoot();
    bool   UsesConsensusSequence();

private:
    // get dense-diag info for one row
    bool SetDenDiagSet(int Row, TDendiag*& pDenDiagSet);
    // get either the first or last dense-diag of Row
    bool GetDenDiag(int Row, bool First, CRef<CDense_diag>& DenDiag);
    // for erasing biostruc-ids that are no longer valid, from structure-evidence
    bool IsNoEvidenceFor(list<int>& MmdbIds, list< CRef< CFeature_evidence > >::iterator& FeatureIterator);
    list< CRef< CFeature_evidence > >& GetFeatureSet(list<int>& MmdbIds);
    // copied from Paul.  for converting ncbistdaa sequences to ncbieaa sequences
    static void StringFromStdaa(const std::vector < char >& vec, std::string *str) {
      static const char *stdaaMap = "-ABCDEFGHIKLMNPQRSTVWXYZU*";
      str->resize(vec.size());
      for (int i=0; i<vec.size(); i++)
        str->at(i) = stdaaMap[vec[i]];
    }
    void  Make_GI_or_PDB_String(CRef<CSeq_id> SeqID, std::string& Str, bool Pad, int Len);

private:
    // Prohibit copy constructor and assignment operator
    CCdd(const CCdd& value);
    CCdd& operator=(const CCdd& value);

};



/////////////////// CCdd inline methods

// constructor
inline
CCdd::CCdd(void)
{
}


/////////////////// end of CCdd inline methods


END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_CDD_CDD_HPP
/* Original file checksum: lines: 90, chars: 2283, CRC32: e0b16239 */
