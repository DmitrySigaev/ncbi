`configure' configures ncbi-tools++ 0.0 to adapt to many kinds of systems.

Usage: configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR           user executables [EPREFIX/bin]
  --sbindir=DIR          system admin executables [EPREFIX/sbin]
  --libexecdir=DIR       program executables [EPREFIX/libexec]
  --datadir=DIR          read-only architecture-independent data [PREFIX/share]
  --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
  --libdir=DIR           object code libraries [EPREFIX/lib]
  --includedir=DIR       C header files [PREFIX/include]
  --oldincludedir=DIR    C header files for non-gcc [/usr/include]
  --infodir=DIR          info documentation [PREFIX/info]
  --mandir=DIR           man documentation [PREFIX/man]

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
===============================================================================
=============== NCBI C++ Toolkit specific configuration flags =================
 --without-debug         build non-debug versions of libs and apps
 --without-optimization  turn off optimization flags in non-debug mode
 --with-dll              build all libraries as DLLs
 --with-static           build all libraries statically even if --with-dll
 --with-mt               compile in a MultiThread-safe manner
 --with-64               compile to 64-bit code
 --without-exe           do not build executables
 --with-runpath=         hard-code the runtime path to DLLs
 --with-extra-action=    script to call after the configuration is complete
 --with-autodep          automatic generation of dependencies (GNU make)
 --with-build-root=DIR   specify a non-default build directory name
 --without-suffix        no Release/Debug, MT or DLL sfx in the build dir name
 --with-hostspec         add full host specs to the build dir name
 --without-execopy       do not copy built executables to the BIN area
 --without-bincopy       no check if libs or apps need to be copied to BIN
 --with-lib-rebuilds     ensure that apps use up-to-date libraries
 --with-lib-rebuilds=ask ask whether to update each app's libraries
 --with-projects=FILE    build projects listed in FILE by default
 --with-check=           run test suite after the build
 --without-ncbi-c        do not use NCBI C Toolkit
 --without-sss           do not use NCBI SSS libraries
 --without-utils         do not use NCBI SSS UTIL library
 --without-sssdb         do not use NCBI SSS DB library
 --without-geo           do not use NCBI GEO libraries
 --without-pubmed        do not use NCBI PubMed libraries
 --without-sybase        do not use SYBASE libraries
 --with-sybase-local=DIR use local SYBASE install (DIR is optional)
 --with-sybase-new       use newer SYBASE install (12.5 rather than 12.0)
 --without-ftds          do not use FreeTDS libraries
 --without-wxwin         do not use wxWindows
 --with-wxwin=DIR        use wxWindows installation in DIR
 --without-fastcgi       do not use Fast-CGI library
 --without-sp            do not use SP libraries
 --without-orbacus       do not use ORBacus CORBA libraries
 --with-orbacus=DIR      use ORBacus installation in DIR
 --without-local-lbsm    turn off support for IPC with locally running LBSMD
 --without-serial        do not build the serialization library and tools
 --with-objects          generate/build serializeable objects from ASNs
 --without-dbapi         do not build NCBI portable database libraries
 --with-app              build standalone applications like ID1_FETCH
 --without-ctools        do not build NCBI C Toolkit based projects
 --without-gui           do not build wxWindows based projects
 --with-internal         build all internal projects
***** See also HTML documentation in ./doc/index.html *****

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have
              headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <cpp-core@ncbi.nlm.nih.gov>.
