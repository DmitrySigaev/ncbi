<package>
	<job id="new-project-wsh-js">
	
		<script language="JScript" src="project_utilits.js">
		</script>

		<script language="JScript">
		// Framework
		
		// Verify command line arguments
		function VerifyArguments(oArgs)
		{
			if (oArgs.Length < 2) {
				return false;
			}
			if (oArgs.Length > 4) {
				return false;
			}
			
			return true;
		}
		// Verify task object
		function VerifyTask(oTask)
		{
			//Project name
			var oRe = /^[a-z]([a-z]|\d|[_])*$/g;
			if (oTask.ProjectName.match(oRe) == null) {
				WScript.Echo("Invalid project name: \'" + oTask.ProjectName + "\'");
				WScript.Echo("Project name should starts from lower-case letter");
				WScript.Echo("             and containts lower-case letter(s),");
				WScript.Echo("                           underscore(s)");
				WScript.Echo("                        or digit(s)");
				WScript.Quit(1);
			}
			
			//Project template
			templates_dict = new ActiveXObject("Scripting.Dictionary");
			templates_dict.Add("app/sample/alnmgr",  "app/alnmgr" );
			templates_dict.Add("app/sample/basic",   "app/basic"  );
			templates_dict.Add("app/sample/cgi",     "app/cgi"    );
			templates_dict.Add("app/sample/dbapi",   "app/dbapi"  );
			templates_dict.Add("app/sample/gui",     "app/gui"    );
			templates_dict.Add("app/sample/objects", "app/objects");
			templates_dict.Add("app/sample/objmgr",  "app/objmgr" );
			if ( !templates_dict.Exists(oTask.ProjectTemplate) ) {
				WScript.Echo("Project template \'" + oTask.ProjectTemplate + "\' is not supported by this script.");
				WScript.Echo("Supported project templates are:");

				var keys = (new VBArray(templates_dict.Keys())).toArray();   // Get the keys.
				for(var key_ind in keys) {
					WScript.Echo( templates_dict(keys[key_ind]) );
				}
				WScript.Quit(1);
			}
			
			//Path to C++ Toolkit
			var oFso = new ActiveXObject("Scripting.FileSystemObject");
			if ( !oFso.FolderExists(oTask.ToolkitPath) ) {
				WScript.Echo("Path to Pre-built C++ Toolkit: " + oTask.ToolkitPath + " does not exist");
				WScript.Quit(1);	
			}
		}
		// Create usage string
		function Usage()
		{
			var usage_str;
			//usage_str  = "Usage:\n";
			//usage_str += "cscript new_project.wsf <project-name> <project-template> <path-to-pre-built-toolkit> [-dll]";
			usage_str  = "USAGE: cscript new_project.wsf <name> <type> [builddir] [-dll]\n";
			usage_str += "SYNOPSIS:\n";
			usage_str += "    Create new MSVC7.1 application project from sample template:\n";
			usage_str += "      Create local build tree structure. Fill-in local tree.\n";
			usage_str += "      Copy and adjust sample code.\n";
			usage_str += "      Add to project_tree_builder.ini entries for pre-built NCBI C++ toolkit.\n";
			usage_str += "      Run project tree builder on local build tree.\n";
			usage_str += "      Open created solution in MSVC7.1 IDE.\n";
			usage_str += "ARGUMENTS:\n";
			usage_str += "    <name>      -- name of project\n";
			usage_str += "    <type>      -- one of following:\n";
			usage_str += "                   app/alnmgr  for application using the alignment manager\n";
			usage_str += "                   app/basic   for simple application\n";
			usage_str += "                   app/cgi     for CGI application\n";
			usage_str += "                   app/dbapi   for DBAPI application\n";
			usage_str += "                   app/gui     for FLTK application\n";
			usage_str += "                   app/objects for application using ASN.1 objects\n";
			usage_str += "                   app/objmgr  for application using object manager.\n";
			usage_str += "    [builddir]       -- path to the pre-built NCBI C++ toolkit\n";
			usage_str += "                        default path is: " + GetDefaultCXX_ToolkitFolder() + "\\" + GetDefaultCXX_ToolkitSubFolder() + "\n";
			usage_str += "                        you can only specify a subfolder of " + GetDefaultCXX_ToolkitFolder() + "\n";
			usage_str += "    [-dll]      -- use NCBI C++ toolkit DLLs' instead of static libraries\n";
			usage_str += "EXAMPLES:\n";
			usage_str += "    cscript new_project.wsf my_app app/basic\n";
			usage_str += "    cscript new_project.wsf my_app app/basic -dll\n";
			usage_str += "    cscript new_project.wsf my_app app/basic cxx.potluck -dll\n";
			usage_str += "    cscript new_project.wsf my_app app/basic \\\\Snowman\\win-coremake\\Lib\\Ncbi\\CXX_Toolkit\\msvc71\\cxx.current -dll\n";
			
			return usage_str;
		}
		// Task object constructor
		function Task()
		{
			var oArgs = WScript.Arguments;
			if ( !VerifyArguments(oArgs) ) {
				WScript.Echo(Usage());
				WScript.Quit(1);
			}
			this.ProjectName     = GetPositionalValue(oArgs, 0);
			this.ProjectTemplate = GetPositionalValue(oArgs, 1).replace("/", "/sample/");
			this.DllBuild        = GetFlagValue(oArgs, "-dll", false);
			var toolkit_path     = GetOptionalPositionalValue(oArgs, 
			                                              2, 
			                                              GetDefaultCXX_ToolkitFolder() +
			                                                     "\\" +
			                                                     GetDefaultCXX_ToolkitSubFolder());
			if (toolkit_path.indexOf("\\\\") == 0 || toolkit_path.indexOf(":\\") == 1) {
				this.ToolkitPath = toolkit_path;
			} else {
				this.ToolkitPath = GetDefaultCXX_ToolkitFolder() + "\\" + toolkit_path;	
			}

		}
		// Diagnostic dump of task object
		function DumpTask(oTask)
		{
			WScript.Echo(oTask.ProjectName        );
			WScript.Echo(oTask.ProjectTemplate    );
			WScript.Echo(oTask.ToolkitPath        );
			WScript.Echo(oTask.DllBuild.toString());
		}
		
		// Fill local tree
		function FillTree(oShell, oTree)
		{
			FillTreeStructure(oShell, oTree);
		}
		// Copy project template from CVS
		function CopyProjectTemplate(oShell, oTree, oTask)
		{
			var temp_dir = oTree.TreeRoot + "\\temp";
			var oFso = new ActiveXObject("Scripting.FileSystemObject");
			
			RemoveTempFolder(oShell, oFso, oTree);
			execute(oShell, "cvs checkout -d temp " + GetCvsTreeRoot()+"/src/" + oTask.ProjectTemplate);
			execute(oShell, "copy /Y temp\\*.* " + oTree.SrcProjectBranch);
			RemoveTempFolder(oShell, oFso, oTree);
		}
		// Change Makefile.in and Makefile.*.app
		function AdjustProject(oShell, oTree, oTask)
		{
			var oFso = new ActiveXObject("Scripting.FileSystemObject");
			
			// Makefile.in
			oFso.CopyFile(oTree.SrcProjectBranch + "\\Makefile.in",
			              oTree.SrcProjectBranch + "\\Makefile.in.old");
			
			              
			// open for reading
			var old_file = oFso.OpenTextFile(oTree.SrcProjectBranch + "\\Makefile.in.old", 1);
			var new_file = oFso.CreateTextFile(oTree.SrcProjectBranch + "\\Makefile.in", true);
			while( !old_file.AtEndOfStream ) {
				var old_line = old_file.ReadLine();
				if (old_line.indexOf("APP_PROJ") == 0) {
					new_file.WriteLine("# " + old_line);
					new_file.WriteLine("APP_PROJ = " + oTask.ProjectName);
					new_file.WriteLine("REQUIRES = CXX_Toolkit");
				} else {
					new_file.WriteLine(old_line);
				}
			}
			old_file.Close();
			new_file.Close();
			oFso.DeleteFile(oTree.SrcProjectBranch + "\\Makefile.in.old", true);
			
			// Makefile.*.app
			
			// lookup file name
			var src_folder = oFso.GetFolder(oTree.SrcProjectBranch);
			var src_folder_contents = new Enumerator(src_folder.files);
			var makefile_app = "";
			for( ; !src_folder_contents.atEnd(); src_folder_contents.moveNext()) {
				var src_file = src_folder_contents.item();
				if (oFso.GetExtensionName(src_file) == "app") {
					makefile_app = src_file;
				}
			}
			WScript.Echo("Makefile.*.app :" + makefile_app);
			
			// open for reading
			var old_makefile = oFso.OpenTextFile(makefile_app, 1);
			// Create new makefile with new project name
			var new_makefile = oFso.CreateTextFile(oTree.SrcProjectBranch + "\\Makefile." + oTask.ProjectName + ".app", true);
			while( !old_makefile.AtEndOfStream ) {
				var old_line = old_makefile.ReadLine();
				if (old_line.indexOf("APP") == 0) {
					new_makefile.WriteLine("# " + old_line);
					new_makefile.WriteLine("APP = " + oTask.ProjectName);
				} else {
					new_makefile.WriteLine(old_line);
				}
			}
			old_makefile.Close();
			new_makefile.Close();
			oFso.DeleteFile(makefile_app, true);
		}
		// Run project tree builder
		function RunPtb(oShell, oTree, oTask)
		{
			var conf = GetConfigs(oTask)[0];
			var target_path = oTree.BinPathStatic + "\\" + conf;
			var ptb_command_line = target_path + "\\project_tree_builder.exe";
			if ( oTask.DllBuild ) {
				ptb_command_line += " -dll";
			}
			ptb_command_line += " -logfile out.log";
			ptb_command_line += " -conffile " + oTree.CompilersBranch + "\\project_tree_builder.ini";
			ptb_command_line += " " + oTree.TreeRoot;
			ptb_command_line += " src\\";
			if ( oTask.DllBuild ) {
				ptb_command_line += " " + oTree.CompilersBranchDll   + "\\build\\" + oTask.ProjectName + ".sln";
			} else {
				ptb_command_line += " " + oTree.CompilersBranchStatic + "\\build\\" + oTask.ProjectName + ".sln";
			}
			WScript.Echo(ptb_command_line);
			execute(oShell, ptb_command_line);
		}
		// Open generated solution in  MSVC IDE
		function LoadSolution(oShell, oTree, oTask)
		{
			var sln_path = " ";
			if ( oTask.DllBuild ) {
				sln_path += oTree.CompilersBranchDll;
			} else {
				sln_path += oTree.CompilersBranchStatic;
			}
			sln_path += "\\build\\" + oTask.ProjectName + ".sln";

			execute(oShell, "start " + sln_path);
		}
		
		</script>
		
		<script language="JScript">
		var oShell = WScript.CreateObject("WScript.shell");
		
		var oTask  = new Task();
		VerifyTask(oTask);
		//DumpTask(oTask);
		
		var oTree  = new Tree(oShell, oTask);
		//DumpTree(oTree);
		
		CreateTreeStructure(oTree, oTask);
		FillTree           (oShell, oTree);
 		CopyProjectTemplate(oShell, oTree, oTask);
 		CopyPtb            (oShell, oTree, oTask);
 		AdjustProject      (oShell, oTree, oTask);
 		AdjustLocalSite    (oShell, oTree, oTask);
 		RunPtb             (oShell, oTree, oTask);
 		LoadSolution       (oShell, oTree, oTask);
 		
	 	</script>
	</job>
</package>
 
