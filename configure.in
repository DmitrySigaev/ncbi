#############################################################################
#  $Id$
# ==========================================================================
#
#                            PUBLIC DOMAIN NOTICE
#               National Center for Biotechnology Information
#
#  This software/database is a "United States Government Work" under the
#  terms of the United States Copyright Act.  It was written as part of
#  the author's official duties as a United States Government employee and
#  thus cannot be copyrighted.  This software/database is freely available
#  to the public for use. The National Library of Medicine and the U.S.
#  Government have not placed any restriction on its use or reproduction.
#
#  Although all reasonable efforts have been taken to ensure the accuracy
#  and reliability of the software and data, the NLM and the U.S.
#  Government do not and cannot warrant the performance or results that
#  may be obtained by using this software or data. The NLM and the U.S.
#  Government disclaim all warranties, express or implied, including
#  warranties of performance, merchantability or fitness for any particular
#  purpose.
#
#  Please cite the author in any work or product based on this material.
#
# ==========================================================================
#
# Author:  Denis Vakatov
#
# File Description:
#   Generate platform-dependent header("config.h") for NCBI C++ libs
#   USAGE:
#    1) Process this file with "autoconf" to produce a "configure" script.
#    2) Run the resultant "configure" script to produce
#      a) ".../inc/ncbiconf.h"
#      b) ".../build/Makefile.mk"
#      c) other "Makefile"s and scripts in ".../build"
#
#############################################################################

AC_INIT(include/corelib/ncbitype.h)


#############################################################################


#### Describe all "--with-*" arguments -- for the usage printout on "--help"

## Title
AC_ARG_WITH(title0,
   [===============================================================================])
AC_ARG_WITH(title1,
   [=============== NCBI C++ Toolkit specific configuration flags =================])
AC_ARG_WITH(title2,
   [===============================================================================])

## Code generation
AC_ARG_WITH(debug,
   [ --without-debug         build non-debug versions of libs and apps])
AC_ARG_WITH(optimization,
   [ --without-optimization  turn off optimization flags in non-debug mode])
AC_ARG_WITH(dll,
   [ --with-dll              build all libraries as DLLs])
AC_ARG_WITH(mt,
   [ --with-mt               compile in a MultiThread-safe manner])
AC_ARG_WITH(mt,
   [ --with-64               compile to 64-bit code])
AC_ARG_WITH(exe,
   [ --without-exe           do not build executables])
AC_ARG_WITH(runpath,
   [ --with-runpath=         hard-code the runtime path to DLLs])

## Scripts, make features, and directory naming
AC_ARG_WITH(extra-action,
   [ --with-extra-action=    script to call after the configuration is complete])
AC_ARG_WITH(autodep,
   [ --with-autodep          automatic generation of dependencies (GNU make)])
AC_ARG_WITH(foobar,
   [ --exec-prefix=          specify a non-default build directory name])
AC_ARG_WITH(suffix,
   [ --without-suffix        no Release/Debug and MT suffixes in the build dir name])
AC_ARG_WITH(hostspec,
   [ --with-hostspec         add full host specs to the build dir name])
AC_ARG_WITH(execopy,
   [ --without-execopy       do not copy built executables to the BIN area])
AC_ARG_WITH(bincopy,
   [ --without-bincopy       no check if libs or apps need to be copied to BIN])

## Third-party and system packages
AC_ARG_WITH(ncbi-c,
   [ --without-ncbi-c        do not use NCBI C Toolkit])
AC_ARG_WITH(wxwin,
   [ --without-wxwin         do not use wxWindows])
AC_ARG_WITH(fastcgi,
   [ --without-fastcgi       do not use Fast-CGI library])
AC_ARG_WITH(sss,
   [ --without-sss           do not use NCBI SSS libraries])
AC_ARG_WITH(sssdb,
   [ --without-sssdb         do not use NCBI SSS DB library])
AC_ARG_WITH(sssutils,
   [ --without-utils         do not use NCBI SSS UTIL library])
AC_ARG_WITH(pubmed,
   [ --without-pubmed        do not use NCBI PubMed libraries])
AC_ARG_WITH(sybase,
   [ --without-sybase        do not use SYBASE libraries])

## Optional projects
AC_ARG_WITH(serial,
   [ --without-serial        do not build the serialization library and tools])
AC_ARG_WITH(objects,
   [ --with-objects          do not generate/build serializeable objects from ASNs])
AC_ARG_WITH(ctools,
   [ --without-ctools        do not build NCBI C Toolkit based projects])
AC_ARG_WITH(gui,
   [ --without-gui           do not build wxWindows based projects])
AC_ARG_WITH(internal,
   [ --with-internal         build all internal projects])

## Manuals
AC_ARG_WITH(manuals,
   [***** See also HTML documentation in ./doc/index.html *****])


#### Check the passed arguments against the list of available ones
x_with_list="\
debug optimization dll runpath mt 64 \
exe autodep suffix hostspec execopy bincopy \
ncbi-c wxwin fastcgi sss sssdb sssutils pubmed sybase serial objects ctools gui internal"

changequote(, )dnl
x_with_list=`echo "$x_with_list" | sed 's/\([^ ][^ ]*\)/--with-\1 --without-\1/g'`
changequote([, ])dnl


for x_arg in "$@" ; do
   x_okay=
   for x_desc in $x_with_list ; do
      if test "$x_arg" = "$x_desc" ; then
         x_okay="okay"
         break
      fi
   done
   if test "$x_okay" = "okay" ; then
      continue
   fi

   case "$x_arg" in
      --with-extra-action= | --exec-prefix= \
      | --cache-file= | --build= | --host= | --target= | --with-runpath= )
      AC_MSG_ERROR(["  $x_arg:  requires value\;  use --help to show usage"])
      ;;

      --with-extra-action=* | --exec-prefix=* \
      | --cache-file=* | --build=* | --host=* \
      | --target=* | --with-runpath=* | --no-create | --no-recursion)
      ;;

      * )
      AC_MSG_ERROR(["  $x_arg:  unknown option\;  use --help to show usage"])
      ;;
   esac
done


#### Check for special options
if test "$with_extra_action" = "yes" ; then
   AC_MSG_ERROR(["--with-extra-action must have a value after ="])
fi
if test "$with_extra_action" = "no" ; then
   AC_MSG_ERROR(["--without-extra-action is not allowed"])
fi


#### Get the running host's properties
AC_CANONICAL_HOST
AC_DEFINE_UNQUOTED(HOST,        "$host")
AC_DEFINE_UNQUOTED(HOST_CPU,    "$host_cpu")
AC_DEFINE_UNQUOTED(HOST_VENDOR, "$host_vendor")
AC_DEFINE_UNQUOTED(HOST_OS,     "$host_os")


#### C and C++ compilers
AC_LANG_CPLUSPLUS
AC_PROG_CC
AC_PROG_CXX


#### Detect supported compilers
changequote(, )dnl
compiler=
compiler_ver=
ncbi_compiler="UNKNOWN"
ncbi_compiler_ver="0.0"
if test "$GCC" = "yes" ; then
   compiler_ver="`$CXX --version 2>&1`"
   case "$compiler_ver" in
     2\.95* )
       compiler="GCC"
       ncbi_compiler="GCC"
       ncbi_compiler_ver="2.95" ;;
   esac
else
   case "$host" in
    sparc-sun-solaris2\.[678]  |  i*86-pc-solaris2\.[678] )
      compiler_ver="`$CXX -V 2>&1`"
      case "$compiler_ver" in
        *WorkShop*Compilers*5\.0)
          compiler="WorkShop5"
          ncbi_compiler="WORKSHOP"
          ncbi_compiler_ver="5.0" ;;
        *Sun*WorkShop*6*5\.1*)
          compiler="WorkShop6"
          ncbi_compiler="WORKSHOP"
          ncbi_compiler_ver="5.1" ;;
      esac ;;

    mips-sgi-irix6\.* )
      compiler_ver="`$CXX -version 2>&1`"
      case "$compiler_ver" in
        MIPSpro*Compilers:*Version*7\.3* )
          compiler="MIPSpro73"
          ncbi_compiler="MIPSPRO"
          ncbi_compiler_ver="7.3" ;;
      esac ;;

    i*86*-pc-cygwin32 )
      case "$CXX" in
        *cl\.exe* | cl)
          compiler="MSVC" 
          ncbi_compiler="MSVC"
          ncbi_compiler_ver="6.0" ;;
      esac ;;
   esac
fi
changequote([, ])dnl
AC_DEFINE_UNQUOTED(NCBI_COMPILER_$ncbi_compiler, 1)
AC_DEFINE_UNQUOTED(NCBI_COMPILER_VERSION, $ncbi_compiler_ver)


#### Additional check for pre-defined compilers
case "$compiler" in
  MSVC )
    if test -z "$NCBI_COMPILER" ; then
       echo
       echo "Compiler \"${compiler}\" requires a special tuning, so you"
       echo "better use a special shell script located in \"compilers/*.sh\"!"
       echo
       echo "Do you still want to proceed (at your own risk)? [n/y]"
       read answer
       case "$answer" in
         y )  AC_MSG_WARN([Proceeding at your own risk...]) ;;
         * )  AC_MSG_WARN([Configuration has been canceled by user.]) ; exit ;;
       esac
       echo
    fi ;;
esac


#### Use full path to the compiler, if possible
set $CC
x_CC="`which $1`"
if test -x "$x_CC" ; then
  shift
  CC="$x_CC $*"
  echo "adjusted C   compiler: $CC"
fi
CC_PATH="`dirname $x_CC`"
x_CC=

set $CXX
x_CXX="`which $1`"
if test -x "$x_CXX" ; then
  shift
  CXX="$x_CXX $*"
  echo "adjusted C++ compiler: $CXX"
fi
CXX_PATH="`dirname $x_CXX`"
x_CXX=


#### Provide default environment setup for known platforms/compilers
DEPFLAGS="-M"
case "$host:$compiler" in
 sparc-sun-solaris2\.6:GCC )
   echo "GCC compiler is not supported for:  $host"
   compiler=
   ;;

 *-linux*:GCC )
   NETWORK_LIBS=${NETWORK_LIBS:=" "}
   ;;

 *-osf*:GCC )
   CXXFLAGS="-fsquangle $CXXFLAGS"
   NETWORK_LIBS=${NETWORK_LIBS:=" "}
   ;;

 mips-sgi-irix6\.*:GCC )
   if test "$with_debug" != "no" ; then
      LDFLAGS="-LD_LAYOUT:lgot_buffer=20 $LDFLAGS"
   fi
   ;;

 *:WorkShop* )
   with_bincopy=${with_bincopy:="no"}
   CXXFLAGS="+w +w2 $CXXFLAGS"
   DEPFLAGS="-xM1"
   LDFLAGS="-xildoff $LDFLAGS"
   AR=${AR:="$CXX -xar -o"}
   STRIP=":"
   if test "$with_debug" = "no" ; then
      LDFLAGS="-s $LDFLAGS"
   fi
   RANLIB=":"
   CXX_FILTER="2>&1 | $(top_srcdir)/compilers/cxx_filter.$compiler.sh"
   serial_ws50_rtti_kludge="rtti"
   THREAD_LIBS=${THREAD_LIBS:="-mt -lthread -lpthread"}
   ;;

 *:MIPSpro73 )
   COMMON_FLAGS="-fullwarn -brief_diagnostics -use_readonly_const -G0 -rdata_shared"
   CFLAGS="$COMMON_FLAGS"
   CXXFLAGS="$COMMON_FLAGS -ansiW -ptused -LANG:std -LANG:ansi-for-init-scope -woff 1460,1521,1429,1169,1209,1107,1424"
   CXXCPP=${CXXCPP:="$CXX -E -LANG:std"}
   LDFLAGS="-LANG:std $LDFLAGS"
   CPPFLAGS="-D__LONGLONG $CPPFLAGS"
   NETWORK_LIBS=" "
   ;;

 i*86*-pc-cygwin32:GCC )
   with_dll="no"
   NETWORK_LIBS=${NETWORK_LIBS:="-lwsock32"}
   CONF_exe_ext=".exe"
   ;;

 i*86*-pc-cygwin32:MSVC )
   with_dll="no"
   CFLAGS="/W4 /Od /Zi /DEBUG /D_DEBUG"
   CXXFLAGS="/W4 /Od /Zi /DEBUG /D_DEBUG"
   CPPFLAGS="/nologo $CPPFLAGS"
   LDFLAGS=${LDFLAGS:="/DEBUG"}
   AR="lib.exe"
   RANLIB=":"
   STRIP=":"
   CONF_obj_ext=".obj"
   CONF_lib_ext=".lib"
   CONF_dll_ext=".dll"
   CONF_lib_l_ext=".lib"
   CONF_lib_pre=" "
   CONF_lib_l_pre=" "
   CONF_exe_ext=".exe"
   CONF_f_compile="/c "
   CONF_f_outobj="/Fo"
   CONF_f_outlib="/OUT:"
   CONF_f_libpath="/LIBPATH:"
   CONF_f_outexe="/OUT:"
   script_shell=""
   make_shell=""
   ;;
esac


#### Check if the compiler matches one of supported compilers on this platform
if test -z "$compiler" ; then
  AC_MSG_ERROR(["Compiler $CXX $compiler_ver is not supported. Consult doc/config.html#ref_Compilers for the list of supported platforms/compilers"])
fi


#### 32/64-bit compilation, and extra LIBS
with_64=${with_64:="no"}
if test "$with_64" = "yes" ; then
   bit64_sfx="64"
   case "$compiler" in
    WorkShop5 )
      ARCH_CFLAGS="-xtarget=ultra -xarch=v9"
      ;;
    WorkShop6 )
      ARCH_CFLAGS="-xtarget=ultra -xarch=v9"
      LIBS="-Bstatic -L$CXX_PATH/../lib -lCrun -Bdynamic $LIBS"
      ;;
    MIPSpro73 )
      ARCH_CFLAGS="-64"
      CPPFLAGS="$ARCH_CFLAGS $CPPFLAGS"
      AR=${AR:="$CXX $ARCH_CFLAGS -ar -WR,-v -o"}
      ;;
    * )
      AC_MSG_ERROR(["Dont know how to compile 64-bit with compiler $CXX $compiler_ver"])
      ;;
   esac
else
   bit64_sfx=
   ARCH_CFLAGS=
   case "$compiler" in
    WorkShop5 )
      LIBS="-Bstatic -L$CXX_PATH/../SC5.0/lib -lm -Bdynamic $LIBS"
      MATH_LIBS=" "
      ;;
    WorkShop6 )
      LIBS="-Bstatic -L$CXX_PATH/../lib -lCrun -lm -Bdynamic $LIBS"
      MATH_LIBS=" "
      ;;
    MIPSpro73 )
      ARCH_CFLAGS="-n32"
      ;;
   esac
fi

CFLAGS="$ARCH_CFLAGS $CFLAGS"
CXXFLAGS="$ARCH_CFLAGS $CXXFLAGS"
LDFLAGS="$ARCH_CFLAGS $LDFLAGS"


#### DLLs

# Generate position-independent code (PIC)
case "$compiler" in
 GCC )
   CFLAGS_DLL="-fPIC"
   CXXFLAGS_DLL="-fPIC"
   ;;
 WorkShop* | MIPSpro73 )
   CFLAGS_DLL="-KPIC"
   CXXFLAGS_DLL="-KPIC"
   ;;
esac

# Provide runpath to the C++ Toolkit DLLs
rundir="\$(libdir)"

if test -z "$with_runpath"  &&  test "$with_dll" != "yes" ; then
   with_runpath="no"
fi

if test "$with_runpath" != "no" ; then
   case "$host:$compiler" in
    *:WorkShop* )
      CONF_f_runpath="-R"
      ;;
    *-linux*:GCC )
      CONF_f_runpath="-Xlinker -rpath "
      ;;
    mips-sgi-irix6\.*:GCC | *:MIPSpro73 )
      CONF_f_runpath="-rpath "
      ;;
   esac

   if test -n "$with_runpath"  &&  test "$with_runpath" != "yes" ; then
      rundir="$with_runpath"
   fi
else
   CONF_f_runpath=
fi

# Whether to build DLLs or static (and whether by default, or forcibly)
LIB_OR_DLL="lib"
if test "$with_dll" = "yes" ; then
   case "$host:$compiler" in
    *-linux*:GCC | mips-sgi-irix6\.*:GCC | *:WorkShop* | *:MIPSpro73 )
      ;;
    * )
      echo
      echo "DLLs may not be buildable by $CXX $compiler_ver on $host!"
changequote(, )dnl
      echo "Do you still want to try build DLLs (at your own risk)? [y/n]"
changequote([, ])dnl
      read answer
      case "$answer" in
         y | Y | yes | YES ) ;;
         * )  AC_MSG_WARN([Configuration has been canceled by user.]) ; exit ;;
      esac
      echo
      ;;
   esac
   LIB_OR_DLL="dll"
   FORCE_STATIC_LIB=
elif test "$with_dll" = "no" ; then
   FORCE_STATIC_LIB="LIB_OR_DLL = lib"
fi

# Linker command-line to build DLL
case "$compiler" in
 GCC | MIPSpro73 )
   LINK_DLL="$CXX $ARCH_CFLAGS -shared -o"
   ;;
 WorkShop* )
   LINK_DLL="$CXX $ARCH_CFLAGS -G -h \$@ -o"
   ;;
 * )
   if test "$with_dll" = "yes"  &&  test -z "$LINK_DLL" ; then
      AC_MSG_ERROR(["Dont know how to build DLLs with compiler $CXX $compiler_ver"])
   fi
   ;;
esac


#### Multi-Thread safety
with_mt=${with_mt:="no"}
if test "$with_mt" = "yes" ; then
   THREAD_LIBS=${THREAD_LIBS:="-lpthread"}
   case "$compiler" in
    GCC )
      CPPFLAGS="$CPPFLAGS -D_REENTRANT"
      ;;
    WorkShop* )
      CFLAGS="-mt $CFLAGS"
      CXXFLAGS="-mt $CXXFLAGS"
      LDFLAGS="-mt $LDFLAGS"
      ;;
    MIPSpro73 )
      ;;
    * )
      AC_MSG_ERROR(["Dont know how to build MT-safe with compiler $CXX $compiler_ver"])
      ;;
   esac
   LIBS="$LIBS $THREAD_LIBS"
   AC_DEFINE_UNQUOTED(NCBI_MT, 1)
else
   THREAD_LIBS=
fi


#### GNU compiler::  common flags and definitions
if test "$GCC" = "yes" ; then
   CFLAGS="-Wall $CFLAGS"
   CXXFLAGS="-Wall $CXXFLAGS"
   AC_DEFINE_UNQUOTED(__EXTENSIONS__, 1)
fi


#### Automatic generation of dependencies for/by the "make" utility
case "$host_os" in
  solaris* )  KeepStateTarget=".KEEP_STATE:" ;;
esac

if test "$with_autodep" = "yes" ; then
   Rules="rules_with_autodep"
elif test "$with_autodep" = "no" ; then
   Rules="rules"
elif make -v 2>/dev/null | grep 'GNU Make' ; then
   Rules="rules_with_autodep"
else
   Rules="rules"
fi


#### Tools
AC_PROG_RANLIB
AC_CHECK_PROG(AR, ar, ar cru, ErrorCannotFind_AR)
AC_CHECK_PROG(STRIP, strip, strip, :)


#### Check if "${exec_prefix}" is defined;  provide a default one
if test -z "${exec_prefix}"  ||  test "${exec_prefix}" = "NONE" ; then
   exec_prefix="${srcdir}/${compiler}"
else
   with_suffix=${with_suffix:="no"}
fi


#### Add "Release"/"Debug" and/or "MT", "DLL" suffixes to "${exec_prefix}"
if test "$with_suffix" != "no" ; then
   if test "$with_debug" = "no" ; then
      exec_prefix="${exec_prefix}-Release"
   else
      exec_prefix="${exec_prefix}-Debug"
   fi
   if test "$with_mt" = "yes" ; then
      exec_prefix="${exec_prefix}MT"
   fi
   if test "$with_dll" = "yes" ; then
      exec_prefix="${exec_prefix}DLL"
   fi
   if test "$with_64" = "yes" ; then
      exec_prefix="${exec_prefix}${bit64_sfx}"
   fi
fi


#### Add full host specs to "${exec_prefix}"
if test "$with_hostspec" = "yes" ; then
   exec_prefix="${exec_prefix}--${host}"
fi


#### Check if there is "${exec_prefix}" dir
test -d "${exec_prefix}"  ||  mkdir -p "${exec_prefix}"


#### Make "exec_prefix" absolute
case "${exec_prefix}" in
   /* ) ;;
   . )
      CDPATH=
      if test "${PWD}" != "" && test "`(cd ${PWD} ; sh -c pwd)`" = "`pwd`"  ;
      then
         exec_prefix="$PWD"
      else
         exec_prefix="`(cd ${exec_prefix}; pwd)`"
      fi
   ;;
   *  ) exec_prefix="`(cd ${exec_prefix}; pwd)`" ;;
esac


#### Make "srcdir" absolute
case "${srcdir}" in
   /* ) ;;
   . )
      CDPATH=
      if test "${PWD}" != "" && test "`(cd ${PWD} ; sh -c pwd)`" = "`pwd`"  ;
      then
        srcdir="$PWD"
      else
        srcdir="`(cd ${srcdir}; pwd)`"
      fi
   ;;
   * ) srcdir="`(cd ${srcdir}; pwd)`" ;;
esac


#### Source, include, and build directories
ncbiconf="$exec_prefix/inc/ncbiconf.h"
if test "$exec_prefix" = "$srcdir" ; then
   builddir="$srcdir/src"
else
   builddir="$exec_prefix/build"
fi


#### Create build directories
mkdir -p "$builddir" "$exec_prefix/lib" "$exec_prefix/bin"


#### Check if the target directory already has a configured system in it
if test "$no_create" != "yes"  -a  -f "${ncbiconf}" ; then
   echo
   echo "There is already a built \"${ncbiconf}\"!"
changequote(, )dnl
   echo "Do you want to re-configure in \"${builddir}\"? [y/n]"
changequote([, ])dnl
   read answer
   case "$answer" in
      y | Y | yes | YES ) ;;
      * )  AC_MSG_ERROR([Re-configuration has been canceled by user.]) ;;
   esac
   echo
fi


#### Use right command shell in scripts and makefiles
script_shell="#! ${CONFIG_SHELL:=/bin/sh}"
make_shell="SHELL=${CONFIG_SHELL:=/bin/sh}"


#### Turn on compilation warnings and adjust
#### some compiler-specific flags and features

if test "$CONF_obj_ext"   = " " ;  then obj_ext="" ; else obj_ext="${CONF_obj_ext:=.o}" ; fi
if test "$CONF_lib_pre"   = " " ;  then lib_pre="" ; else lib_pre="${CONF_lib_pre:=lib}" ; fi
if test "$CONF_lib_l_pre" = " " ;  then lib_l_pre="" ; else lib_l_pre="${CONF_lib_l_pre:=-l}" ; fi
if test "$CONF_lib_ext"   = " " ;  then lib_ext="" ; else lib_ext="${CONF_lib_ext:=.a}" ; fi
if test "$CONF_dll_ext"   = " " ;  then dll_ext="" ; else dll_ext="${CONF_dll_ext:=.so}" ; fi
if test "$CONF_lib_l_ext" = " " ;  then lib_l_ext="" ; else lib_l_ext="${CONF_lib_l_ext}" ; fi
if test "$CONF_exe_ext"   = " " ;  then exe_ext="" ; else exe_ext="${CONF_exe_ext}" ; fi
if test "$CONF_f_compile" = " " ;  then f_compile="" ; else f_compile="${CONF_f_compile:=-c }" ; fi
if test "$CONF_f_outobj"  = " " ;  then f_outobj="" ; else f_outobj="${CONF_f_outobj:=-o }" ; fi
if test "$CONF_f_outlib"  = " " ;  then f_outlib="" ; else f_outlib="${CONF_f_outlib}" ; fi
if test "$CONF_f_libpath" = " " ;  then f_libpath="" ; else f_libpath="${CONF_f_libpath:=-L}" ; fi
if test "$CONF_f_runpath" = " " ;  then f_runpath="" ; else f_runpath="${CONF_f_runpath:=$CONF_f_libpath}" ; fi
if test "$CONF_f_outexe"  = " " ;  then f_outexe="" ; else f_outexe="${CONF_f_outexe:=-o }" ; fi


#### For some compilers(e.g. SunPro 5.0), there is no sense to compare the
#### old object/lib/binary file with the new one -- they will always be
#### different because of some timestamp or smth. else ("--without-bincopy")
BINCOPY="${CONFIG_SHELL-/bin/sh} \$(top_srcdir)/scripts/if_diff.sh \"cp -p\""
if test "$with_bincopy" = "no" ; then
   BINCOPY="cp -p"
fi


#### Manage the debug-vs.-optimization flags ("--*-debug", "--*-optimization")
changequote(, )dnl
if test "$compiler" != "MSVC" ; then
   if test "$with_debug" = "no" ; then
      with_optimization=${with_optimization:="yes"}
      CFLAGS=`echo $CFLAGS     | sed 's/-g[0-9]*//g'`
      CXXFLAGS=`echo $CXXFLAGS | sed 's/-g[0-9]*//g'`
      LDFLAGS=`echo $LDFLAGS   | sed 's/-g[0-9]*//g'`
   else
      with_optimization=${with_optimization:="no"}
      if echo "$CFLAGS"   |grep -v >/dev/null '\-g' ; then
         CFLAGS="$CFLAGS -g"     ; fi
      if echo "$CXXFLAGS" |grep -v >/dev/null '\-g' ; then
         CXXFLAGS="$CXXFLAGS -g" ; fi
      if test "$with_optimization" = "no" ; then
         CPPFLAGS="-D_DEBUG $CPPFLAGS" ; fi
      if echo "$LDFLAGS"  |grep -v >/dev/null '\-g' ;
         then LDFLAGS="$LDFLAGS -g" ; fi
      STRIP=":"
   fi

   if test "$with_optimization" = "no" ; then
      CFLAGS=`echo $CFLAGS     | sed 's/-O[0-9]*//g'`
      CXXFLAGS=`echo $CXXFLAGS | sed 's/-O[0-9]*//g'`
      LDFLAGS=`echo $LDFLAGS   | sed 's/-O[0-9]*//g'`
   else
      if echo "$CXXFLAGS" |grep -v >/dev/null '\-O' ; then
         CXXFLAGS="$CXXFLAGS -O" ; fi
      if echo "$CFLAGS"   |grep -v >/dev/null '\-O' ; then
         CFLAGS="$CFLAGS -O" ; fi
      CPPFLAGS="-DNDEBUG $CPPFLAGS"
      if echo "$LDFLAGS"  |grep -v >/dev/null '\-O' ; then
         LDFLAGS="$LDFLAGS -O" ; fi
   fi

   if test "$with_debug" = "no"  &&  test "$with_optimization" = "no" ; then
      CPPFLAGS="-DNDEBUG $CPPFLAGS"
   fi
fi
changequote([, ])dnl



### ------------------------------------------------------------------
### ------------------------------------------------------------------

### Check for header files.
AC_CHECK_HEADERS(iostream  iostream.h)
AC_CHECK_HEADERS(fstream   fstream.h)
AC_CHECK_HEADERS(strstream strstream.h strstrea.h)


### Check for the platform (very roughly)
AC_CHECK_HEADERS(unistd.h,  x_have_unistd="yes")
AC_CHECK_HEADERS(windows.h, x_have_windows="yes")

if test "$x_have_windows" = "yes" ; then
   AC_DEFINE_UNQUOTED(NCBI_OS_MSWIN, 1)
   AC_DEFINE_UNQUOTED(NCBI_OS, "MSWIN")
elif test "$x_have_unistd" = "yes" ; then
   AC_DEFINE_UNQUOTED(NCBI_OS_UNIX, 1)
   AC_DEFINE_UNQUOTED(NCBI_OS, "UNIX")

   UNIX_SRC='$(UNIX_SRC)'
   UNIX_USR_PROJ='$(UNIX_USR_PROJ)'
   UNIX_LIB_PROJ='$(UNIX_LIB_PROJ)'
   UNIX_APP_PROJ='$(UNIX_APP_PROJ)'
   UNIX_SUB_PROJ='$(UNIX_SUB_PROJ)'
else
   AC_DEFINE_UNQUOTED(NCBI_OS_MAC, 1)
   AC_DEFINE_UNQUOTED(NCBI_OS, "MAC")
fi

### <sys/sockio.h>
AC_MSG_CHECKING(for sys/sockio.h)
AC_TRY_COMPILE(
   [#include <sys/sockio.h>],
   ,
   AC_DEFINE_UNQUOTED(HAVE_SYS_SOCKIO_H, 1)
)
AC_MSG_RESULT()


### Check for some library functions.
AC_MSG_CHECKING(for gethostbyname_r)
AC_TRY_COMPILE(
   [#include <netdb.h>],
   [ struct hostent x_hp;
     char   x_buf[1024];
     int    x_err;
     struct hostent *hp =
         gethostbyname_r("localhost", &x_hp, x_buf, sizeof(x_buf), &x_err); ],
   AC_DEFINE_UNQUOTED(HAVE_GETHOSTBYNAME_R, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(for strdup)
AC_TRY_COMPILE(
   [#include <string.h>],
   [ const char s[] = "abc";
     char* s1 = strdup(s); ],
   AC_DEFINE_UNQUOTED(HAVE_STRDUP, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(for Linux-like sysinfo with 1 arg)
AC_TRY_COMPILE(
   [#include <sys/sysinfo.h>],
   [ struct sysinfo* info = 0;
     int retval = sysinfo(info); ],
   AC_DEFINE_UNQUOTED(HAVE_SYSINFO_1, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(for getloadavg)
AC_TRY_COMPILE(
   [#include <sys/loadavg.h>],
   [ double loadavg[3];  int i = getloadavg(loadavg, 3); ],
   AC_DEFINE_UNQUOTED(HAVE_GETLOADAVG, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(for sysmp)
AC_TRY_COMPILE(
   [#include <sys/sysmp.h>],
   [ struct sysinfo si;  sysmp(MP_SAGET, MPSA_SINFO, &si, sizeof(si)); ],
   AC_DEFINE_UNQUOTED(HAVE_SYSMP, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(for strcasecmp)
AC_TRY_COMPILE(
   [#include <string.h>],
   [ const char* s1 = 0;  const char* s2 = 0;  int i = strcasecmp(s1, s2) ],
   AC_DEFINE_UNQUOTED(HAVE_STRCASECMP, 1)
)
AC_MSG_RESULT()


### Check for typedefs, structures, and compiler features.
AC_CXX_CONST
AC_TYPE_SIZE_T

AC_MSG_CHECKING(if in-class template functions are supported)
AC_TRY_COMPILE(
   [class C { template<class T> void operator<<(const T& t) {} };],
   ,
   ,
   AC_DEFINE_UNQUOTED(NO_INCLASS_TMPL, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(if can use exception specifications throw(...) in func.proto)
AC_TRY_RUN(
   [template <class T> inline int test_throw_spec(const T&) throw() {
      return 0;
   }
   int main(void) {
      return test_throw_spec(123);
   }],
   AC_DEFINE_UNQUOTED(NCBI_USE_THROW_SPEC, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(if have an obsolete basic_string::compare())
AC_TRY_COMPILE(
   [#include <string>],
   [std::string s;  int i = 0;  i = s.compare("aaa", 0, 2); ],
   AC_DEFINE_UNQUOTED(NCBI_OBSOLETE_STR_COMPARE, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(if the auto_ptr template class is poor or not implemented)
AC_TRY_COMPILE(
   [#include <memory>],
   [int *ip = 0;  std::auto_ptr<int> ap(ip);  *ip = *ap;  ap.reset(ip); ],
   ,
   AC_DEFINE_UNQUOTED(HAVE_NO_AUTO_PTR, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(if min/max templates are not implemented)
AC_TRY_COMPILE(
   [#include <algorithm>
    #ifdef min
    #undef min
    #endif
    #ifdef max
    #undef max
    #endif
   ],
   [int a=0, b=1;  a = std::min(a, b);  b = std::max(a, b); ],
   ,
   AC_DEFINE_UNQUOTED(HAVE_NO_MINMAX_TEMPLATE, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(if new C++ streams dont have ios_base::)
AC_TRY_COMPILE(
   [#include <iostream>],
   [(void)(std::ios_base::out != std::ios_base::beg); ],
   ,
   AC_DEFINE_UNQUOTED(HAVE_NO_IOS_BASE, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(for std::char_traits::)
AC_TRY_COMPILE(
   [#include <iostream>],
   [using namespace std;
   char_traits<char>::int_type  i = char_traits<char>::eof();
   i = char_traits<char>::not_eof(i);
   char_traits<char>::char_type c = '\0';
   char_traits<char>::pos_type  p = 0;
   char_traits<char>::off_type  o = 1;
   ],
   ,
   AC_DEFINE_UNQUOTED(HAVE_NO_CHAR_TRAITS, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(for union semun)
AC_TRY_COMPILE(
   [#include <sys/sem.h>
   union semun { double a;  void* b; };],
   ,
   ,
   AC_DEFINE_UNQUOTED(HAVE_SEMUN, 1)
)
AC_MSG_RESULT()



### Check for the availability of other packages
### --------------------------------------------


### Common-use system and miscellaneous libs
NETWORK_LIBS=${NETWORK_LIBS:="-lsocket -lnsl"}
MATH_LIBS=${MATH_LIBS:="-lm"}


### Math lib to be always linked in
LIBS="$MATH_LIBS $LIBS"


### Save original compilator/linker flags
orig_CPPFLAGS="$CPPFLAGS"
orig_LIBS="$LIBS"


## KSTAT system library and kstat_XXX() functions
KSTAT_LIBS=${KSTAT_LIBS:="-lkstat"}
AC_MSG_CHECKING(if KSTAT library and functions are available)
LIBS="$KSTAT_LIBS $orig_LIBS"
AC_TRY_LINK(
   [#include <kstat.h>],
   [kstat_ctl_t* kc = kstat_open(); ],
   [AC_DEFINE_UNQUOTED(HAVE_LIBKSTAT, 1)],
   [KSTAT_LIBS=""]
)
AC_MSG_RESULT([$KSTAT_LIBS])


## RPCSVC system library and rstat() function
RPCSVC_LIBS=${RPCSVC_LIBS:="-lrpcsvc"}
AC_MSG_CHECKING(if RPCSVC library and functions are available)
LIBS="$RPCSVC_LIBS $orig_LIBS"
AC_TRY_LINK(
   [#include <rpc/rpc.h>
    #include <rpcsvc/rstat.h>],
   [enum clnt_stat eee = rstat((char*) 0, (struct statstime*) 0); ],
   [AC_DEFINE_UNQUOTED(HAVE_LIBRPCSVC, 1)],
   [RPCSVC_LIBS=""]
)
AC_MSG_RESULT([$RPCSVC_LIBS])


## SYBASE libraries
AC_MSG_CHECKING(if SYBASE libraries are available)
if test "$with_sybase" != "no" ; then
   SYBASE_PATH=${SYBASE_PATH:="/netopt/Sybase/clients/current"}
   SYBASE_INCLUDE="-I$SYBASE_PATH/include"
   SYBASE_LIBLIST="-lblk -lct -lcs -ltcl -lcomn -lintl"
   SYBASE_DLLLIST="-ltli"
   changequote(<<, >>)dnl
   if test "$with_mt" = "yes" ; then
      SYBASE_LIBLIST=`echo $SYBASE_LIBLIST | sed 's/\(-l[a-z][a-z_]*\)/\1_r/g'`
      SYBASE_DLLLIST=`echo $SYBASE_DLLLIST | sed 's/\(-l[a-z][a-z_]*\)/\1_r/g'`
   fi
   if test -n "$bit64_sfx" ; then
      SYBASE_INCLUDE="$SYBASE_INCLUDE -DSYB_LP64"
      SYBASE_LIBLIST=`echo $SYBASE_LIBLIST | sed 's/\(-l[a-z][a-z_]*\)/\1'${bit64_sfx}'/g'`
      SYBASE_DLLLIST=`echo $SYBASE_DLLLIST | sed 's/\(-l[a-z][a-z_]*\)/\1'${bit64_sfx}'/g'`
   fi
   changequote([, ])dnl
   SYBASE_LIBS="-L$SYBASE_PATH/lib${bit64_sfx} -R/export/home/sybase/clients/current/lib${bit64_sfx}:$SYBASE_PATH/lib${bit64_sfx} $SYBASE_LIBLIST"
   SYBASE_DLLS="$SYBASE_DLLLIST"
   CPPFLAGS="$SYBASE_INCLUDE $orig_CPPFLAGS"
   LIBS="$SYBASE_LIBS $SYBASE_DLLS $NETWORK_LIBS $orig_LIBS"
   AC_TRY_LINK(
      [#include <ctpublic.h>],
      [CS_RETCODE i = ct_init(0,0);  i = cs_ctx_global(0,0); ],
      [AC_DEFINE_UNQUOTED(HAVE_LIBSYBASE, 1)],
      [with_sybase="no"]
   )
fi
if test "$with_sybase" = "no" ; then
   SYBASE_PATH="No_Sybase"
   SYBASE_INCLUDE=
   SYBASE_LIBS=
   SYBASE_DLLS=
   WithoutPackages="$WithoutPackages Sybase"
else
   WithPackages="$WithPackages Sybase"
fi
AC_MSG_RESULT([$SYBASE_PATH])


## NCBI C Toolkit
AC_MSG_CHECKING(if NCBI C Toolkit is available)
if test "$with_ncbi_c" != "no" ; then
   NCBI_C_PATH=${NCBI_C_PATH:="$NCBI"}
   NCBI_C_INCLUDE="-I$NCBI_C_PATH/include${bit64_sfx}"
   if test "$with_debug" = "no" ; then
     NCBI_C_LIBPATH="$NCBI_C_PATH/lib${bit64_sfx}"
   else
     NCBI_C_LIBPATH="$NCBI_C_PATH/altlib${bit64_sfx}"
   fi
   if test "$with_mt" = "yes" ; then
     NCBI_C_LIBPATH="$NCBI_C_LIBPATH $NCBI_C_LIBPATH/ncbithr.o"
   fi
   NCBI_C_LIBPATH="-L$NCBI_C_LIBPATH"
   CPPFLAGS="$NCBI_C_INCLUDE $orig_CPPFLAGS"
   LIBS="$NCBI_C_LIBPATH -lncbi $NETWORK_LIBS $orig_LIBS"
   AC_TRY_LINK(
      [#include <ncbi.h>],
      [ Nlm_Boolean b = Nlm_GetArgs("fake", -1, 0); ],
      [AC_DEFINE_UNQUOTED(HAVE_NCBI_C, 1)],
      [with_ncbi_c="no"]
   )
fi
if test "$with_ncbi_c" = "no" ; then
   NCBI_C_PATH="No_NCBI_CToolkit"
   NCBI_C_INCLUDE=
   NCBI_C_LIBPATH=
   NCBI_C_ncbi=
   WithoutPackages="$WithoutPackages C-Toolkit"
else
   WithPackages="$WithPackages C-Toolkit"
   NCBI_C_ncbi=${NCBI_C_ncbi:="-lncbi"}
fi
AC_MSG_RESULT([$NCBI_C_PATH])


## wxWindows
AC_MSG_CHECKING(if wxWindows is available)
if test "$with_wxwin" != "no" ; then
   if test -n "$WXWIN_PATH" ; then
      WXWIN_BINPATH=${WXWIN_BINPATH:="$WXWIN_PATH/bin"}
      WXWIN_LIBPATH=${WXWIN_LIBPATH:="$WXWIN_PATH/lib"}
   else
      WXWIN_PATH="$NCBI/wxwin"
      if test -z "$WXWIN_LIBPATH" ; then
         WXWIN_LIBPATH="$WXWIN_PATH/"
         if test "$compiler" = "GCC" ; then
            WXWIN_LIBPATH="${WXWIN_LIBPATH}GCC-"
         fi
         if test "$with_debug" = "no" ; then
            WXWIN_LIBPATH="${WXWIN_LIBPATH}Release"
            WXWIN_GTK="wx_gtk"
         else
            WXWIN_LIBPATH="${WXWIN_LIBPATH}Debug"
            WXWIN_GTK="wx_gtkd"
         fi
         if test "$with_mt" = "yes" ; then
            WXWIN_LIBPATH="${WXWIN_LIBPATH}MT"
         fi
      fi
      WXWIN_BINPATH=${WXWIN_BINPATH:="$WXWIN_LIBPATH/bin"}
      WXWIN_LIBPATH="$WXWIN_LIBPATH/lib"
   fi

   if test -x "$WXWIN_BINPATH/wx-config" ; then
      WXWIN_INCLUDE=`$WXWIN_BINPATH/wx-config --cflags`
      WXWIN_LIBS="-L$WXWIN_LIBPATH ${CONF_f_runpath}$WXWIN_LIBPATH -l${WXWIN_GTK} -lgtk -lgdk -lgmodule -lglib"

      CPPFLAGS="$WXWIN_INCLUDE $orig_CPPFLAGS"
      LIBS="$WXWIN_LIBS $orig_LIBS"
      AC_TRY_LINK(
         [#include <wx/wx.h>],
         [ wxExit(); ],
         [AC_DEFINE_UNQUOTED(HAVE_WXWINDOWS, 1)],
         [with_wxwin="no"]
      )
   else
      with_wxwin="no"
   fi
fi

if test "$with_wxwin" = "no" ; then
   WXWIN_LIBPATH="No_wxWindows"
   WXWIN_INCLUDE=
   WXWIN_LIBS=
   WithoutPackages="$WithoutPackages wxWindows"
else
   WithPackages="$WithPackages wxWindows"
fi
AC_MSG_RESULT([$WXWIN_LIBPATH])


## Inhouse Fast-CGI library
AC_MSG_CHECKING(if Fast-CGI library is available)
if test "$with_fastcgi" != "no" ; then
   FASTCGI_PATH=${FASTCGI_PATH:="$NCBI"}
   FASTCGI_INCLUDE="-I$FASTCGI_PATH/include${bit64_sfx}"
   if test "$with_debug" = "no" ; then
      FASTCGI_LIBS="-L$FASTCGI_PATH/lib${bit64_sfx} -lfcgi $NETWORK_LIBS"
   else
      FASTCGI_LIBS="-L$FASTCGI_PATH/altlib${bit64_sfx} -lfcgi $NETWORK_LIBS"
   fi
   FASTCGI_OBJS="fcgibuf"
   CPPFLAGS="$FASTCGI_INCLUDE $orig_CPPFLAGS"
   LIBS="$FASTCGI_LIBS $orig_LIBS"
   AC_TRY_LINK(
      [#include <fcgiapp.h>],
      [ (void) FCGX_IsCGI(); ],
      [AC_DEFINE_UNQUOTED(HAVE_LIBFASTCGI, 1)],
      [with_fastcgi="no"]
   )
fi
if test "$with_fastcgi" = "no" ; then
   FASTCGI_PATH="No_FastCgi"
   FASTCGI_INCLUDE=
   FASTCGI_LIBS=
   FASTCGI_OBJS=
   WithoutPackages="$WithoutPackages Fast-CGI"
else
   WithPackages="$WithPackages Fast-CGI"
fi
AC_MSG_RESULT([$FASTCGI_PATH])


## NCBI SSS libraries
with_sss=${with_sss:="yes"}
with_sssdb=${with_sssdb:="yes"}
with_sssutils=${with_sssutils:="yes"}

if test "$with_sybase" = "no" ; then
   with_sssdb="no"
fi

if test "$with_sss" = "no" ; then
   with_sssdb="no"
   with_sssutils="no"
   NCBI_SSS_PATH=
   NCBI_SSS_INCLUDE=
   NCBI_SSS_LIBPATH=
else
   NCBI_SSS_PATH=${NCBI_SSS_PATH:="$NCBI/sss/BUILD"}
   NCBI_SSS_INCLUDE=${NCBI_SSS_INCLUDE:="-I$NCBI_SSS_PATH/include"}
   if test -z "$NCBI_SSS_LIBPATH" ; then
      NCBI_SSS_LIBPATH="-L${NCBI_SSS_PATH}/lib"
      if test "$with_debug" = "no" ; then
         NCBI_SSS_LIBPATH="${NCBI_SSS_LIBPATH}/Release"
      else
         NCBI_SSS_LIBPATH="${NCBI_SSS_LIBPATH}/Debug"
      fi
      if test "$compiler" = "GCC" ; then
         NCBI_SSS_LIBPATH="${NCBI_SSS_LIBPATH}GNU"
      fi
      if test -n "$bit64_sfx" ; then
         NCBI_SSS_LIBPATH="${NCBI_SSS_LIBPATH}64"
      fi
      if test "$with_mt" = "yes" ; then
         NCBI_SSS_LIBPATH="${NCBI_SSS_LIBPATH}mt"
      fi
   fi
fi

# SSS DB
AC_MSG_CHECKING(if NCBI SSS DB library is available)
if test "$with_sssdb" != "no" ; then
   CPPFLAGS="$NCBI_SSS_INCLUDE $SYBASE_INCLUDE $orig_CPPFLAGS"
   LIBS="$NCBI_SSS_LIBPATH -lsssdb $SYBASE_LIBS $NETWORK_LIBS $orig_LIBS"
   AC_TRY_LINK(
      [#include <cslink.hpp>],
      [ (new CSLink)->connect2server("srv", "user", "pwd", "db"); ],
      [AC_DEFINE_UNQUOTED(HAVE_LIBSSSDB, 1)],
      [with_sssdb="no"]
   )
fi
AC_MSG_RESULT([$with_sssdb])

# SSS UTILS
AC_MSG_CHECKING(if NCBI SSS UTILS library is available)
if test "$with_sssutils" != "no" ; then
   CPPFLAGS="$NCBI_SSS_INCLUDE $SYBASE_INCLUDE $orig_CPPFLAGS"
   LIBS="$NCBI_SSS_LIBPATH -lsssutils $SYBASE_LIBS $NETWORK_LIBS $orig_LIBS"
   AC_TRY_LINK(
      [#include <hashtab.hpp>],
      [ (new C_HashTab(123))->Clear(); ],
      [AC_DEFINE_UNQUOTED(HAVE_LIBSSSUTILS, 1)],
      [with_sssutils="no"]
   )
fi
AC_MSG_RESULT([$with_sssutils])

if test "$with_sssdb" != "no"  ||  test "$with_sssutils" != "no" ; then
   WithPackages="$WithPackages SSS"
else
   WithoutPackages="$WithoutPackages SSS"
fi


## NCBI PubMed
AC_MSG_CHECKING(if NCBI PubMed libraries are available)
if test "$with_ncbi_c" = "no" ; then
   with_pubmed="no"
elif test "$with_pubmed" != "no" ; then
   NCBI_PM_PATH=${NCBI_PM_PATH:="$NCBI/pubmed"}${bit64_sfx}
   CPPFLAGS="-I$NCBI_PM_PATH/pmentrez/include/Ncbi $NCBI_C_INCLUDE $orig_CPPFLAGS"
   LIBS="-L$NCBI_PM_PATH/pmentrez/libs -lpmncbi $NCBI_C_LIBPATH -lncbi $orig_LIBS"
   AC_TRY_LINK(
      [#include <ncbistr.hpp>],
      [ CNcbiString("abc"); ],
      [AC_DEFINE_UNQUOTED(HAVE_LIBPUBMED, 1)],
      [with_pubmed="no"]
   )
fi
if test "$with_pubmed" = "no" ; then
   NCBI_PM_PATH="No_NCBI_PubMed"
   WithoutPackages="$WithoutPackages PubMed"
else
   WithPackages="$WithPackages PubMed"
fi
AC_MSG_RESULT([$NCBI_PM_PATH])


### Restore original compilator/linker flags
LIBS="$orig_LIBS"
CPPFLAGS="$orig_CPPFLAGS"



### Optional projects
### --------------------------------------------


## `serial' projects

if test "$with_serial" = "no" ; then
   WithoutProjects="$WithoutProjects serial"
   serial=
else
   WithProjects="$WithProjects serial"
   serial="serial"
fi

## `objects' projects

if test "$with_objects" = "yes"  &&  test -n "$serial" ; then
   WithProjects="$WithProjects objects"
   objects="objects"
else
   WithoutProjects="$WithoutProjects objects"
   objects=
fi


## `ctools' project group

if test -f src/ctools/Makefile.in  -a  -d include/ctools  -a  "$with_ncbi_c" != "no" ; then
   if test "$with_ctools" = "yes" ; then
      AC_MSG_ERROR(["--with-ctools:  Cannot build CTOOLS projects"])
   fi
else
   with_ctools="no"
fi

if test "$with_ctools" = "no" ; then
   WithoutProjects="$WithoutProjects ctools"
else
   OPT_GROUPS="$OPT_GROUPS ctools"
fi


## `gui' project group

if test -f src/gui/Makefile.in  -a  -d include/gui  -a  "$with_wxwin" != "no" ; then
   if test "$with_gui" = "yes" ; then
      AC_MSG_ERROR(["--with-gui:  Cannot build GUI projects"])
   fi
else
   with_gui="no"
fi

if test "$with_gui" = "no" ; then
   WithoutProjects="$WithoutProjects gui"
else
   OPT_GROUPS="$OPT_GROUPS gui"
fi


## `gui_ctools' project group

if test -f src/gui_ctools/Makefile.in  -a  -d include/gui_ctools  -a  "$with_tools" != "no"  -a  "$with_gui" != "no" ; then
   OPT_GROUPS="$OPT_GROUPS gui_ctools"
else
   WithoutProjects="$WithoutProjects gui_ctools"
fi


## `internal' project group

if test "$with_internal" = "yes" ; then
   OPT_GROUPS="$OPT_GROUPS internal"
   if test "$with_sybase" = "no" || test "$with_ncbi_c" = "no" || test "$with_sss" = "no" || test "$with_pubmed" = "no" || test "$no_internal" = "yes" ; then
      AC_MSG_ERROR(["--with-internal:  Cannot build INTERNAL projects"])
   fi
else
   WithoutProjects="$WithoutProjects internal"
fi



### Miscellanea
### --------------------------------------------

if test "$with_execopy" = "no" ; then
   APP_NOCOPY="BINCOPY=@:"
else
   APP_NOCOPY=
fi

if test "$with_exe" = "no" ; then
   APP_NOBUILD="APP_PROJ="
else
   APP_NOBUILD=
fi



### Check for C standard types and sizes
### --------------------------------------------

AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED
AC_CHECK_SIZEOF(void*)
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(__int64)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(long double)



### Cleanup
### ---------------------------------

case "$compiler" in
 WorkShop* )
   test -d SunWS_cache  &&  rm -r SunWS_cache
   ;;
 MIPSpro73 )
   test -d ii_files     &&  rm -r ii_files
   ;;
esac


#############################################################################
### Compose a list of configurables("*.in" -- makefiles, shell scripts, etc.)
### in subdirs to configure
### Compose their target counterparts
### Configure

configurables=`cd "${srcdir}/src"  &&  find . -name '*.in' -print | grep -v 'config\.h\.in' | grep -v 'configure\.in' | sed "s%\.\(.*\)\.in%$builddir\1:\./src\1\.in%g"`
if test -z "$configurables" ; then
  AC_MSG_ERROR([Cannot find any configurables below \"${srcdir}\"!])
fi


### Template substitutions
AC_SUBST(exec_prefix)

AC_SUBST(top_srcdir)
AC_SUBST(srcdir)
AC_SUBST(includedir)
AC_SUBST(builddir)
AC_SUBST(rundir)

AC_SUBST(CC)
AC_SUBST(CPP)
AC_SUBST(CXX)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(STRIP)

AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(DEPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(LIBS)

AC_SUBST(LIB_OR_DLL)
AC_SUBST(FORCE_STATIC_LIB)
AC_SUBST(LINK_DLL)
AC_SUBST(CFLAGS_DLL)
AC_SUBST(CXXFLAGS_DLL)

AC_SUBST(OPT_GROUPS)
AC_SUBST(serial)
AC_SUBST(objects)

AC_SUBST(script_shell)
AC_SUBST(make_shell)
AC_SUBST(obj_ext)
AC_SUBST(lib_pre)
AC_SUBST(lib_l_pre)
AC_SUBST(lib_ext)
AC_SUBST(dll_ext)
AC_SUBST(lib_l_ext)
AC_SUBST(exe_ext)
AC_SUBST(f_compile)
AC_SUBST(f_outobj)
AC_SUBST(f_outlib)
AC_SUBST(f_libpath)
AC_SUBST(f_runpath)
AC_SUBST(f_outexe)

AC_SUBST(THREAD_LIBS)
AC_SUBST(NETWORK_LIBS)
AC_SUBST(MATH_LIBS)
AC_SUBST(KSTAT_LIBS)
AC_SUBST(RPCSVC_LIBS)
AC_SUBST(SYBASE_INCLUDE)
AC_SUBST(SYBASE_LIBS)
AC_SUBST(SYBASE_DLLS)
AC_SUBST(NCBI_C_INCLUDE)
AC_SUBST(NCBI_C_LIBPATH)
AC_SUBST(WXWIN_INCLUDE)
AC_SUBST(WXWIN_LIBS)
AC_SUBST(FASTCGI_INCLUDE)
AC_SUBST(FASTCGI_LIBS)
AC_SUBST(FASTCGI_OBJS)
AC_SUBST(NCBI_SSS_INCLUDE)
AC_SUBST(NCBI_SSS_LIBPATH)
AC_SUBST(NCBI_PM_PATH)

AC_SUBST(NCBI_C_ncbi)

AC_SUBST(BINCOPY)
AC_SUBST(APP_NOCOPY)
AC_SUBST(APP_NOBUILD)
AC_SUBST(CC_FILTER)
AC_SUBST(CXX_FILTER)

AC_SUBST(KeepStateTarget)
AC_SUBST(Rules)
AC_SUBST(serial_ws50_rtti_kludge)

AC_SUBST(UNIX_SRC)
AC_SUBST(UNIX_USR_PROJ)
AC_SUBST(UNIX_LIB_PROJ)
AC_SUBST(UNIX_APP_PROJ)
AC_SUBST(UNIX_SUB_PROJ)


#############################################################################
### Create output files and do some post-configuration

## Compose a list of target files
changequote(<<, >>)dnl
x_configurables=`echo "$configurables" | sed 's/:[^:][^:]*\.in//g'`
changequote([, ])dnl

## Deploy the target directory tree
echo "$x_configurables" | while read x_file ; do
   x_dir=`dirname $x_file`
   test -d "$x_dir"  ||  mkdir -p "$x_dir"
done

## Configure the compiler/flag-dependent header
AC_CONFIG_HEADER(${ncbiconf}:config.h.in)

##
## Configure makefiles, shell scripts, etc.
##
AC_OUTPUT(

dnl AC_OUTPUT - 1
dnl list of files to configure
${configurables},

dnl AC_OUTPUT - 2
dnl restore some variables from the main configure script saved by AC_OUTPUT-3
builddir="$SAVE_builddir"
exec_prefix="$SAVE_exec_prefix"
x_configurables="$SAVE_x_configurables"
ncbiconf="$SAVE_ncbiconf"
CFLAGS="$SAVE_CFLAGS"
CXXFLAGS="$SAVE_CXXFLAGS"
CPPFLAGS="$SAVE_CPPFLAGS"
LDFLAGS="$SAVE_LDFLAGS"
with_dll="$SAVE_with_dll"
WithPackages="$SAVE_WithPackages"
WithoutPackages="$SAVE_WithoutPackages"
WithProjects="$SAVE_WithProjects"
WithoutProjects="$SAVE_WithoutProjects"
with_extra_action="$SAVE_with_extra_action"

dnl adjust "/$builddir" to "/src"
echo "Please wait while the makefiles are being adjusted..."
echo "$x_configurables" | while read x_file ; do
   mv "$x_file" "$x_file.tmp"
   cat "$x_file.tmp" | sed "s%/$builddir%/src%g" > "$x_file"
   rm "$x_file.tmp"
done

dnl make all shell scripts *.sh be executable
find "$exec_prefix/." -name '*.sh' -print | while read x_file ; do
   chmod a+x "$x_file"
done

dnl save status, cache, and log files to the build tree dir "status/"
if test -f config.status -a -f config.cache -a -f config.log ; then
   status_dir="$exec_prefix/status"
   test -d  "$status_dir"  ||  mkdir -p "$status_dir"
   mv config.status config.cache config.log "$status_dir"/
fi

dnl execute extra-action
if test -n "$with_extra_action" ; then
   with_extra_action=`echo "$with_extra_action" | sed "s%{}%$exec_prefix%g"`
   echo
   echo "executing:  $with_extra_action..."
   eval $with_extra_action
   exit_code="$?"
   if test $exit_code -ne 0 ; then
      echo "WARNING! non-zero exit code ($exit_code):  $with_extra_action"
   fi
   echo
fi

dnl printout additional configuration options
if test "$with_dll" = "yes" ; then
   DLL_USAGE="LIBRARIES:  build as dynamic by default"
elif test "$with_dll" = "no" ; then
   DLL_USAGE="LIBRARIES:  build as static only"
else
   DLL_USAGE="LIBRARIES:  build as static by default"
fi

cat << EOCONF
===============================================================================
Overall NCBI C++ Toolkit documentation:     ./doc/index.html 
For the available configuration flags run:  ./configure --help
or consult documentation at:                ./doc/config.html#ref_Running

CFLAGS   = $CFLAGS
CXXFLAGS = $CXXFLAGS
CPPFLAGS = $CPPFLAGS
LDFLAGS  = $LDFLAGS

$DLL_USAGE
PACKAGES:
  enabled:   $WithPackages
  disabled:  $WithoutPackages
PROJECTS:
  enabled:   $WithProjects
  disabled:  $WithoutProjects

Tools / flags / paths:  $builddir/Makefile.mk
Configuration  header:  $ncbiconf

To build everything:  cd $builddir && make all_r

******* CONFIGURATION SUCCESSFUL *******
EOCONF
,

dnl AC_OUTPUT - 3
dnl save some variables to use in the AC_OUTPUT-2
SAVE_builddir="$builddir"
SAVE_exec_prefix="$exec_prefix"
SAVE_x_configurables="$x_configurables"
SAVE_ncbiconf="$ncbiconf"
SAVE_CFLAGS="$CFLAGS"
SAVE_CXXFLAGS="$CXXFLAGS"
SAVE_CPPFLAGS="$CPPFLAGS"
SAVE_LDFLAGS="$LDFLAGS"
SAVE_with_dll="$with_dll"
SAVE_WithPackages="$WithPackages"
SAVE_WithoutPackages="$WithoutPackages"
SAVE_WithProjects="$WithProjects $OPT_GROUPS"
SAVE_WithoutProjects="$WithoutProjects"
SAVE_with_extra_action="$with_extra_action"
)
