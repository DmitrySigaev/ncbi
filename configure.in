#############################################################################
#  $RCSfile$  $Revision$  $Date$
# ==========================================================================
#
#                            PUBLIC DOMAIN NOTICE
#               National Center for Biotechnology Information
#
#  This software/database is a "United States Government Work" under the
#  terms of the United States Copyright Act.  It was written as part of
#  the author's official duties as a United States Government employee and
#  thus cannot be copyrighted.  This software/database is freely available
#  to the public for use. The National Library of Medicine and the U.S.
#  Government have not placed any restriction on its use or reproduction.
#
#  Although all reasonable efforts have been taken to ensure the accuracy
#  and reliability of the software and data, the NLM and the U.S.
#  Government do not and cannot warrant the performance or results that
#  may be obtained by using this software or data. The NLM and the U.S.
#  Government disclaim all warranties, express or implied, including
#  warranties of performance, merchantability or fitness for any particular
#  purpose.
#
#  Please cite the author in any work or product based on this material.
#
# ==========================================================================
#
# Author:  Denis Vakatov
#
# File Description:
#   Generate platform-dependent header("config.h") for NCBI C++ libs
#   USAGE:
#    1) Process this file with "autoconf" to produce a "configure" script.
#    2) Run the resultant "configure" script to produce
#      a) "ncbiconf.h"
#      a) "Makefile"s
#    NOTE:  "--exec_prefix" flag must be specified by the user!
#
#############################################################################


AC_INIT(include/corelib/ncbitype.h)


#############################################################################


#### Check if "${exec_prefix}" dir is defined
if test -z "${exec_prefix}"  ||  test "${exec_prefix}" = "NONE" ; then
   exec_prefix="${srcdir}/exec"
fi

#### Check if there is "${exec_prefix}" dir
test -d "${exec_prefix}"  ||  mkdir -p "${exec_prefix}"

#### Make "exec_prefix" absolute
case "${exec_prefix}" in
   /* ) ;;
   . )
      CDPATH=
      if test "${PWD}" != "" && test "`(cd ${PWD} ; sh -c pwd)`" = "`pwd`"  ;
      then
         exec_prefix="$PWD"
      else
         exec_prefix="`(cd ${exec_prefix}; pwd)`"
      fi
   ;;
   *  ) exec_prefix="`(cd ${exec_prefix}; pwd)`" ;;
esac

#### Make "srcdir" absolute
case "${srcdir}" in
   /* ) ;;
   . )
      CDPATH=
      if test "${PWD}" != "" && test "`(cd ${PWD} ; sh -c pwd)`" = "`pwd`"  ;
      then
        srcdir="$PWD"
      else
        srcdir="`(cd ${srcdir}; pwd)`"
      fi
   ;;
   *  ) srcdir="`(cd ${srcdir}; pwd)`" ;;
esac

#### Specify and create $includedir, $incdir, $libdir, $bindir and $builddir
includedir="$srcdir/include"
incdir="$exec_prefix/inc"
libdir="$exec_prefix/lib"
bindir="$exec_prefix/bin"
ncbiconf="$incdir/ncbiconf.h"
if test "$exec_prefix" = "$srcdir" ; then
   builddir="$srcdir/src"
else
   builddir="$exec_prefix/build"
fi

mkdir -p "$libdir" "$bindir" "$builddir"


#### Check if the target directory already has a configured system in it
if test -f "${ncbiconf}" ; then
   echo "There is already a built \"${ncbiconf}\"!"
   echo "Do you want to re-configure in \"${builddir}\"? [y/n]"
   read answer
   test "$answer" = "y"  ||  test "$answer" = "Y"  ||  exit
fi

#### Get the running host's properties
AC_CANONICAL_HOST
AC_DEFINE_UNQUOTED(HOST,        "$host")
AC_DEFINE_UNQUOTED(HOST_CPU,    "$host_cpu")
AC_DEFINE_UNQUOTED(HOST_VENDOR, "$host_vendor")
AC_DEFINE_UNQUOTED(HOST_OS,     "$host_os")

#### Use right command shell in scripts and makefiles
script_sh="#! ${CONFIG_SHELL:=/bin/sh}"
make_shell="SHELL=${CONFIG_SHELL:=/bin/sh}"

#### Tools
AC_LANG_CPLUSPLUS
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_CHECK_PROG(AR, ar, ar cru, ErrorCannotFind_AR)
AC_CHECK_PROG(STRIP, strip, strip, :)


#### Paths to another packages

# Sybase
SYBASE_PATH=${SYBASE_PATH:="No_SybasePath"}

# NCBI PubMed
PM_PATH=${PM_PATH:="No_PmPath"}

# NCBI C Toolkit
NCBI=${NCBI:="No_NCBI"}
NCBI_C_PATH=${NCBI_C_PATH:="$NCBI"}
NCBI_C_INCLUDE=${NCBI_C_INCLUDE:="$NCBI_C_PATH/include"}
NCBI_C_RELEASE_LIB=${NCBI_C_RELEASE_LIB:="$NCBI_C_PATH/lib"}
NCBI_C_DEBUG_LIB=${NCBI_C_DEBUG_LIB:="$NCBI_C_PATH/altlib"}

# NCBI SSS package
NCBI_SSS_PATH=${NCBI_SSS_PATH:="No_NcbiSSSPath"}
NCBI_SSS_INCLUDE=${NCBI_SSS_INCLUDE:="$NCBI_SSS_PATH"}
NCBI_SSS_RELEASE_LIB=${NCBI_SSS_RELEASE_LIB:="$NCBI_SSS_PATH/Release"}
NCBI_SSS_DEBUG_LIB=${NCBI_SSS_DEBUG_LIB:="$NCBI_SSS_PATH/Debug"}


### System and miscellaneous libs

THREAD_LIBS=${THREAD_LIBS:="-lpthread"}
NETWORK_LIBS=${NETWORK_LIBS:="-lsocket -lnsl"}

FASTCGI_LIBS=${FASTCGI_LIBS:="-lfcgi"}
FASTCGI_LIBS="$FASTCGI_LIBS $NETWORK_LIBS"


#### Turn on compilation warnings and adjust
#### some compiler-specific flags and features

if test "$CONF_obj_ext"   = " " ;  then obj_ext="" ; else obj_ext="${CONF_obj_ext:=.o}" ; fi
if test "$CONF_lib_pre"   = " " ;  then lib_pre="" ; else lib_pre="${CONF_lib_pre:=lib}" ; fi
if test "$CONF_lib_l_pre" = " " ;  then lib_l_pre="" ; else lib_l_pre="${CONF_lib_l_pre:=-l}" ; fi
if test "$CONF_lib_ext"   = " " ;  then lib_ext="" ; else lib_ext="${CONF_lib_ext:=.a}" ; fi
if test "$CONF_lib_l_ext" = " " ;  then lib_l_ext="" ; else lib_l_ext="${CONF_lib_l_ext}" ; fi
if test "$CONF_exe_ext"   = " " ;  then exe_ext="" ; else exe_ext="${CONF_exe_ext}" ; fi
if test "$CONF_f_compile" = " " ;  then f_compile="" ; else f_compile="${CONF_f_compile:=-c }" ; fi
if test "$CONF_f_outobj"  = " " ;  then f_outobj="" ; else f_outobj="${CONF_f_outobj:=-o }" ; fi
if test "$CONF_f_outlib"  = " " ;  then f_outlib="" ; else f_outlib="${CONF_f_outlib}" ; fi
if test "$CONF_f_libpath" = " " ;  then f_libpath="" ; else f_libpath="${CONF_f_libpath:=-L}" ; fi
if test "$CONF_f_outexe"  = " " ;  then f_outexe="" ; else f_outexe="${CONF_f_outexe:=-o }" ; fi

#### For some compilers(e.g. SunPro 5.0), there is no sense to compare the
#### old object/lib/binary file with the new one -- they will always be
#### different because of some timestamp or smth. else  (--without-bincopy)
BINCOPY="${CONFIG_SHELL-/bin/sh} $srcdir/src/if_diff.sh \"cp -p\""
if test "$with_bincopy" = "no" ; then
   BINCOPY="cp -p"
fi

#### GNU compiler
if test "$GCC" = "yes" ; then
   # GNU compiler
   CFLAGS="-Wall -ansi $CFLAGS"
   CXXFLAGS="-Wall -ansi $CXXFLAGS"
   AC_DEFINE_UNQUOTED(__EXTENSIONS__, 1)
   AC_DEFINE_UNQUOTED(_SVID_SOURCE,   1)
fi

#### MSVC++ compiler
if test "$CXX" = "cl.exe /TP" ; then
   # MSVC++ compiler
   script_shell=""
   make_shell=""
   msvc="yes"
fi

#### Do not include debug info to the libs and executables("--without-debug")
changequote(, )dnl
if test "$msvc" != "yes" ; then
   if test "$with_debug" = "no" ; then
      NCBI_C_LIB="$NCBI_C_RELEASE_LIB"
      NCBI_SSS_LIB="$NCBI_SSS_RELEASE_LIB"

      CFLAGS=`echo $CFLAGS     | sed 's/-g[0-9]*//g'`" -DNDEBUG"
      if echo "$CFLAGS"   |grep -v >/dev/null '\-O' ; then
         CFLAGS="$CFLAGS -O" ; fi
      CXXFLAGS=`echo $CXXFLAGS | sed 's/-g[0-9]*//g'`" -DNDEBUG"
      if echo "$CXXFLAGS" |grep -v >/dev/null '\-O' ; then
         CXXFLAGS="$CXXFLAGS -O" ; fi
      LDFLAGS=`echo $LDFLAGS   | sed 's/-g[0-9]*//g'`
      if echo "$LDFLAGS"  |grep -v >/dev/null '\-O' ; then
         LDFLAGS="$LDFLAGS -O"   ; fi
   else
      NCBI_C_LIB="$NCBI_C_DEBUG_LIB"
      NCBI_SSS_LIB="$NCBI_SSS_DEBUG_LIB"

      CFLAGS=`echo $CFLAGS     | sed 's/-O[0-9]*//g'`" -D_DEBUG"
      if echo "$CFLAGS"   |grep -v >/dev/null '\-g' ; then
         CFLAGS="$CFLAGS -g"     ; fi
      CXXFLAGS=`echo $CXXFLAGS | sed 's/-O[0-9]*//g'`" -D_DEBUG"
      if echo "$CXXFLAGS" |grep -v >/dev/null '\-g' ; then
         CXXFLAGS="$CXXFLAGS -g" ; fi
      LDFLAGS=`echo $LDFLAGS   | sed 's/-O[0-9]*//g'`
      if echo "$LDFLAGS"  |grep -v >/dev/null '\-g' ;
         then LDFLAGS="$LDFLAGS -g"   ; fi
      STRIP=":"
   fi
fi
changequote([, ])dnl



### ------------------------------------------------------------------
### ------------------------------------------------------------------

dnl Check for header files.
dnl ---------------------------------
AC_CHECK_HEADERS(iostream  iostream.h)
AC_CHECK_HEADERS(fstream   fstream.h)
AC_CHECK_HEADERS(strstream strstream.h strstrea.h)
AC_CHECK_HEADERS(string)
AC_CHECK_HEADERS(unistd.h windows.h)
AC_CHECK_HEADERS(limits)


dnl Check for typedefs, structures, and compiler features.
dnl ------------------------------------------------------
AC_CXX_CONST
AC_TYPE_SIZE_T

AC_MSG_CHECKING(if C++ namespaces are supported)
AC_TRY_COMPILE(
   [namespace NS { int i; }  using namespace NS;],
   ,
   ,
   [AC_DEFINE_UNQUOTED(HAVE_NO_NAMESPACE, 1)
    x_have_no_namespace="yes" ]
)
AC_MSG_RESULT()


x_std=""
if test "$x_have_no_namespace" != "yes" ; then
   AC_MSG_CHECKING(whether namespace std:: is used)
   AC_TRY_COMPILE(
      [#include <vector>],
      [std::vector<char> std_vector_char; ],
      x_std="std",
      AC_DEFINE_UNQUOTED(HAVE_NO_STD, 1)
   )
   AC_MSG_RESULT()
fi


AC_MSG_CHECKING(if in-class template functions are supported)
AC_TRY_COMPILE(
   [class C { template<class T> operator<<(const T& t) {} };],
   ,
   ,
   AC_DEFINE_UNQUOTED(NO_INCLASS_TMPL, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(can we use exception specifications throw(...) in func.proto)
AC_TRY_RUN(
   [template <class T> inline int test_throw_spec(const T&) throw() {
      return 0;
   }
   int main(void) {
      return test_throw_spec(123);
   }],
   AC_DEFINE_UNQUOTED(NCBI_USE_THROW_SPEC, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(obsolete basic_string::compare())
AC_TRY_COMPILE(
   [#include <string>],
   [$x_std::string s;  int i = 0;  i = s.compare("aaa", 0, 2); ],
   AC_DEFINE_UNQUOTED(NCBI_OBSOLETE_STR_COMPARE, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(if the auto_ptr template class is poor or not implemented)
AC_TRY_COMPILE(
   [#include <memory>],
   [int *ip = 0;  $x_std::auto_ptr<int> ap(ip);  *ip = *ap;  ap.reset(ip); ],
   ,
   AC_DEFINE_UNQUOTED(HAVE_NO_AUTO_PTR, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(if Fast-CGI library is available and not disabled)
FASTCGI_OBJS=
if test -x "$FASTCGI_LIBS"  ||  test "$with_fastcgi" = "no" ; then
   FASTCGI_LIBS=
else
   FASTCGI_LIBS="-L$NCBI_C_LIB $FASTCGI_LIBS"
   orig_CPPFLAGS="$CPPFLAGS" ; CPPFLAGS="$CPPFLAGS -I$NCBI_C_INCLUDE"
   orig_LIBS="$LIBS" ; LIBS="$FASTCGI_LIBS $LIBS  $NETWORK_LIBS"
   AC_TRY_LINK(
      [#include <fcgiapp.h>],
      [return FCGX_IsCGI(); ],
      [AC_DEFINE_UNQUOTED(HAVE_LIBFASTCGI, 1)
       FASTCGI_OBJS="fcgibuf"
      ],
      [FASTCGI_LIBS= ]
   )
   LIBS="$orig_LIBS"
   CPPFLAGS="$orig_CPPFLAGS"
fi
AC_MSG_RESULT()


AC_MSG_CHECKING(if new C++ streams dont have ios_base::)
AC_TRY_COMPILE(
   [#include <iostream>],
   [(void)($x_std::ios_base::out != $x_std::ios_base::beg); ],
   ,
   AC_DEFINE_UNQUOTED(HAVE_NO_IOS_BASE, 1)
)
AC_MSG_RESULT()


AC_MSG_CHECKING(for std::char_traits::)
AC_TRY_COMPILE(
   [#include <iostream>],
   [using namespace $x_std;
   char_traits<char>::int_type  i = char_traits<char>::eof();
   i = char_traits<char>::not_eof(i);
   char_traits<char>::char_type c = '\0';
   char_traits<char>::pos_type  p = 0;
   char_traits<char>::off_type  o = 1;
   ],
   ,
   AC_DEFINE_UNQUOTED(HAVE_NO_CHAR_TRAITS, 1)
)
AC_MSG_RESULT()


if test "$with_internal" = "yes" ; then
   internal="internal"   
else
   internal=
fi


dnl Check for C standard types
dnl ---------------------------------
AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED
AC_CHECK_SIZEOF(void*)
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(__int64)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(long double)


#############################################################################
### Compose a list of configurables("*.in" -- makefiles, shell scripts, etc.)
### in subdirs to configure
### Compose their target counterparts
### Configure

configurables=`cd "${srcdir}/src"  &&  find . -name '*.in' -print | grep -v 'config\.h\.in' | grep -v 'configure\.in' | sed "s%\.\(.*\)\.in%$builddir\1:\./src\1\.in%g"`
if test -z "$configurables" ; then
  AC_MSG_ERROR([Cannot find any configurables below \"${srcdir}\"!])
fi


dnl Template substitutions
dnl ----------------------

AC_SUBST(exec_prefix)

AC_SUBST(top_srcdir)
AC_SUBST(srcdir)
AC_SUBST(includedir)
AC_SUBST(incdir)
AC_SUBST(libdir)
AC_SUBST(bindir)
AC_SUBST(builddir)

AC_SUBST(CC)
AC_SUBST(CPP)
AC_SUBST(CXX)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(STRIP)

AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(LIBS)

AC_SUBST(internal)
AC_SUBST(script_shell)
AC_SUBST(make_shell)
AC_SUBST(obj_ext)
AC_SUBST(lib_pre)
AC_SUBST(lib_l_pre)
AC_SUBST(lib_ext)
AC_SUBST(lib_l_ext)
AC_SUBST(exe_ext)
AC_SUBST(f_compile)
AC_SUBST(f_outobj)
AC_SUBST(f_outlib)
AC_SUBST(f_libpath)
AC_SUBST(f_outexe)

AC_SUBST(THREAD_LIBS)
AC_SUBST(NETWORK_LIBS)
AC_SUBST(FASTCGI_LIBS)
AC_SUBST(FASTCGI_OBJS)

AC_SUBST(PM_PATH)
AC_SUBST(SYBASE_PATH)

AC_SUBST(NCBI_C_INCLUDE)
AC_SUBST(NCBI_C_LIB)
AC_SUBST(NCBI_SSS_INCLUDE)
AC_SUBST(NCBI_SSS_LIB)

AC_SUBST(BINCOPY)

AC_SUBST(KeepStateTarget)


#############################################################################
### Create output files and do some post-configuration

# compose a list of target files
changequote(<<, >>)dnl
x_configurables=`echo "$configurables" | sed 's/:[^:][^:]*\.in//g'`
changequote([, ])dnl

# deploy the target directory tree
echo "$x_configurables" | while read x_file ; do
   x_dir=`dirname $x_file`
   test -d "$x_dir"  ||  mkdir -p "$x_dir"
done

# configure the compiler/flag-dependent header
AC_CONFIG_HEADER(${ncbiconf}:config.h.in)

# configure makefiles, shell scripts, etc.
AC_OUTPUT(
${configurables},

builddir="$SAVE_builddir"
exec_prefix="$SAVE_exec_prefix"
x_configurables="$SAVE_x_configurables"
ncbiconf="$SAVE_ncbiconf"

echo "$x_configurables" | while read x_file ; do
   mv "$x_file" "$x_file.tmp"
   cat "$x_file.tmp" | sed "s%/$builddir%/src%g" > "$x_file"
   rm "$x_file.tmp"
done

find "$exec_prefix/." -name '*.sh' -print | while read x_file ; do
   chmod a+x "$x_file"
done

status_dir="$exec_prefix/status"
test -d  "$status_dir"  ||  mkdir -p "$status_dir"
mv config.status config.cache config.log "$status_dir"/

cat << EOCONF
Configuration completed.

Optional configure flags:
 --without-debug    to build the release versions of libs and apps
 --without-fastcgi  to prohibit the use of Fast-CGI library
 --with-internal    to build all projects including the internal ones
 --without-bincopy  dont check whether the copied binaries are identical

Tools / flags / paths:  $builddir/Makefile.mk
Preprocessor defines:   $ncbiconf

To build everything:    cd $builddir && make all_r
EOCONF
,

SAVE_builddir="$builddir"
SAVE_exec_prefix="$exec_prefix"
SAVE_x_configurables="$x_configurables"
SAVE_ncbiconf="$ncbiconf"
)
