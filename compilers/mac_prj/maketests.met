(* ================================================================================
	C++ tests

	An AppleScript to compile some NCBI C++ Toolkit test applications with
	Metrowerks CodeWarrior.

	$Id: C++Tests,v 1.2 2001/10/18 19:36:23 juran Exp $
	
   ================================================================================ *)

--
-- Properties
--

property pUsingCPlusPlus : true
property pProjectFileExtension : ".µ"
property pCPlusPlusExtension : ".cpp"

-- Whether to recreate existing project files.
property pAlwaysCreateProjects : false

-- Whether to compile everything.
property pShouldBuild : true

-- Which targets to create.
-- If these are changed you must recreate the project files.  There is no direct effect on building.
property pCreateBlueTargets : true -- 'Blue' was the codename for System 7.  Here, it means pre-Carbon.
property pCreateCarbonTargets : true
property pCreateDebugTargets : true
property pCreateOptimizedTargets : true

-- Putting a project tree inside a tool tree is evil.
property CPPROOT : "cxx:" (* head of C++ toolkit tree within CodeWarrior folder *)

property pDirsToCreate : {{relPath:"compilers:mac_prj", name:"bin"}}

property pDebugPrefix : "debug.pfx"
property pReleasePrefix : "release.pfx"

property pLinkExecutables : true

--
-- Global variables
--

global NCBICPP

global SOURCEFILES
global INCLUDEFILES
global LIBRARIES
global BINARIES

--
-- Routines specific to this project
--

on SimpleProjectData(projName, section, features)
	
	-- By default, the project name is also the name a source file in the project.
	set myFileList to {projName}
	-- Remove "ncbi_" from the project name, if present.
	set infix to "ncbi_"
	if projName contains infix then
		set offst to (offset of infix in projName)
		set pre to characters 1 through (offst - 1) of projName as string
		set post to characters (offst + (count characters of infix)) ¬
			through (count characters of projName) ¬
			of projName as string
		set projName to pre & post
	end if
	if (count characters of projName) > 18 then
		set projName to characters 1 through 18 of projName as string
	end if
	
	tell application "CodeWarrior IDE 4.2.5"
		
		if features does not contain "C" and features does not contain "C++" then
			error "Project " & projName & "'s default language (a feature) must be C or C++."
		end if
		set myFeatures to features
		--copy "BNDL" to end of myFeatures
		if section contains ":" then
			set myLibs to {}
			set myPath to section & ":"
		else
			set myLibs to {section}
			set myPath to section & ":test:"
		end if
		return {name:projName, features:myFeatures, rsrcs:{}, settings:¬
			{Prefix File:"", ppcProject:{}}, projLibs:myLibs, fileData:¬
			{{projPath:myPath, fileList:myFileList}}}
		
	end tell
end SimpleProjectData

on AddSimpleProject(projName, section, features)
	
	AddProject(SimpleProjectData(projName, section, features))
	
end AddSimpleProject

on DataPlusPathAndSources(dataRec, newPath, newSources)
	
	copy {projPath:newPath, fileList:newSources} to end of fileData of dataRec
	
	return dataRec
	
end DataPlusPathAndSources

on SetProjectData()
	tell application "CodeWarrior IDE 4.2.5"
		
		set corelib to "corelib"
		set connect to "connect"
		set serial to "serial"
		set util to "util"
		
		-- datatool
		set myName to "datatool"
		set myFeatures to {"C++"}
		set mySettings to ¬
			{Prefix File:"", ppcProject:{}}
		set myRsrcs to {}
		set myLibs to {"corelib", "serial", "util"}
		set myFiles to ¬
			{{projPath:"serial:datatool:", fileList:{"datatool", "type", "namespace", "statictype", ¬
				"enumtype", "reftype", "unitype", "blocktype", "choicetype", "typestr", "ptrstr", ¬
				"stdstr", "classstr", "enumstr", "stlstr", "choicestr", "choiceptrstr", "value", ¬
				"mcontainer", "module", "moduleset", "generate", "filecode", "code", "fileutil", ¬
				"alexer", "aparser", "parser", "lexer", "exceptions", "comments", "srcutil"}}}
		set datatoolData to ¬
			{name:myName, features:myFeatures, settings:mySettings, rsrcs:myRsrcs, projLibs:¬
				myLibs, fileData:myFiles}
		
		set commonObjLibs to {¬
			"corelib", "serial", "util", ¬
			"object_seqset", "object_seq", "object_seqres", ¬
			"object_seqloc", "object_seqalign", "object_seqfeat", "object_seqblock", "object_pub", ¬
			"object_medline", "object_biblio", "object_general"}
		
	end tell
	
	AddSimpleProject("coretest", corelib, {"C++"})
	AddProject(datatoolData)
	AddSimpleProject("test_ncbitime", corelib, {"C++"})
	AddSimpleProject("test_ncbi_limits", corelib, {"C++"})
	AddSimpleProject("test_ncbi_core", connect, {"C"})
	AddSimpleProject("test_ncbi_buffer", connect, {"C"})
	AddSimpleProject("test_ncbi_socket_", connect, {"C", "sockets"})
	AddSimpleProject("test_ncbi_heapmgr", connect, {"C"})
	AddSimpleProject("test_ncbi_connutil_hit", connect, {"C", "sockets"})
	AddSimpleProject("test_ncbi_connutil_misc", connect, {"C"})
	AddSimpleProject("socket_io_bouncer", connect, {"C", "sockets"})
	AddSimpleProject("test_ncbi_file_connector", connect, {"C"})
	--AddSimpleProject("test_sock_connutil_misc", connect, {"C++", "sockets"})
	--AddSimpleProject("test_http_connutil_misc", connect, {"C", "sockets"})
	--AddSimpleProject("test_srv_connutil_misc", connect, {"C", "sockets"})
	AddProject(DataPlusLibs(SimpleProjectData("test_ncbi_conn_stream", connect, ¬
		{"C++", "sockets"}), {"corelib"}))
	AddProject(DataPlusLibs(DataPlusSources(SimpleProjectData("testserial", serial, {"C++"}), ¬
		{"serialobject", "serialobject_Base", "cppwebenv", "we_cpp__", "we_cpp___"}), ¬
		{"corelib", "util"}))
	AddProject(DataPlusLibs(SimpleProjectData("asn2asn", "objects:asn2asn", {"C++"}), ¬
		commonObjLibs))
	AddProject(DataPlusLibs(DataPlusLibs(SimpleProjectData("testmedline", "objects:testmedline", ¬
		{"C++"}), commonObjLibs), ¬
		{"object_ncbimime", "object_mmdb1", "object_mmdb2", "object_mmdb3", ¬
			"object_medlars"}))
	(*
		AddProject(DataPlusLibs(DataPlusLibs(SimpleProjectData("testobjmgr", "objects:objmgr:test", ¬
			{"C++"}), commonObjLibs), {"objmgr"}))
	*)
	AddProject(DataPlusLibs(SimpleProjectData("testrangemap", util, {"C++"}), ¬
		{"corelib"}))
	AddProject(DataPlusLibs(DataPlusLibs(SimpleProjectData("id1_fetch_simple", "app:id1_fetch", ¬
		{"C++", "sockets"}), commonObjLibs), {"object_id1", "connect"}))
	
end SetProjectData

on CopyHeaders()
end CopyHeaders

--
-- Global variables
--

global gIsOSX
global gStartupDisk
global gHomeDir
global gDevDir
global gMWroot
global gMWCWfolder
global gMacLibs
global gStubLibs
global gPPCLibs
global gMSLPPCLibs

global gDistribRoot

global gProjectsDir
global gSourceDir
global gIncludeDir
global gLibsDir
global gRsrcsDir
global gOutputDir

global gProjectData

global gOpenGLdir
global gOpenGLpresent

on DataPlusLibs(dataRec, newLibs)
	
	repeat with i in newLibs
		copy i to end of projLibs of dataRec
	end repeat
	return dataRec
	
end DataPlusLibs

on DataPlusSources(dataRec, newSrcs)
	
	repeat with i in newSrcs
		copy i to end of fileList of item 1 of fileData of dataRec
	end repeat
	return dataRec
	
end DataPlusSources

on AddProject(projData)
	
	copy projData to end of gProjectData
	
end AddProject

on ResolveAlias(pathname)
	tell application "Finder"
		--if the last character of pathname is ":" then error "Don't use a trailing colon with ResolveAlias."
		if exists folder pathname then return pathname & ":"
		if exists alias file pathname then return the original item of alias file pathname as string
		error "The folder (or alias) '" & pathname & "' doesn't exist."
	end tell
end ResolveAlias

on IsOSX()
	tell application "Finder"
		
		set vers to the version as string as number
		return vers > 10 or vers = 10
		
	end tell
end IsOSX

on HomeDir()
	tell application "Finder"
		
		if my IsOSX() then
			return the home as string
		else
			return gStartupDisk
		end if
		
	end tell
end HomeDir

on DevDir()
	
	return ResolveAlias(HomeDir() & "Development")
	
end DevDir

on SandboxDir()
	
	-- "<Boot>:Development:Trees:NCBI:vault.ncbi:"
	-- "<Boot>:Users:<User>:Development:Trees:NCBI:vault.ncbi:"
	
	set Trees to ResolveAlias(DevDir() & "Trees")
	set NCBIgroup to ResolveAlias(Trees & "NCBI")
	set Vault to ResolveAlias(NCBIgroup & "vault.ncbi")
	return Vault
	
end SandboxDir

on DistribDir()
	
	-- "<Boot>:Development:NCBI:"
	-- This is NOT the "distrib" directory!  This is where toolkit distributions go.
	return ResolveAlias(DevDir() & "NCBI")
	
end DistribDir

on CToolkitRoot()
	
	try
		set modRoot to ResolveAlias(DistribDir() & "ncbi")
	on error
		try
			set modRoot to ResolveAlias(SandboxDir() & "distrib")
		on error
			set modRoot to ResolveAlias(gMWroot & "ncbi")
		end try
	end try
	
	return modRoot
	
end CToolkitRoot

on CPlusPlusToolkitRoot()
	
	try
		set modRoot to ResolveAlias(DistribDir() & "c++")
	on error
		try
			set modRoot to ResolveAlias(ResolveAlias(SandboxDir() & "internal") & "c++")
		on error
			set modRoot to ResolveAlias(gMWroot & "cxx")
		end try
	end try
	
	return modRoot
	
end CPlusPlusToolkitRoot

on ModuleRoot()
	
	if pUsingCPlusPlus then
		return CPlusPlusToolkitRoot()
	else
		return CToolkitRoot()
	end if
	
end ModuleRoot

on MWRootDir()
	
	set mwRoot to ""
	set mwLocations to {gStartupDisk, gStartupDisk & "Applications:", gStartupDisk & "Applications (Mac OS 9):"}
	repeat with mwVersion from 6 to 7
		set dirName to "Metrowerks CodeWarrior " & mwVersion & ".0"
		repeat with mwLoc in mwLocations
			try
				set mwRoot to ResolveAlias(mwLoc & dirName)
				return mwRoot
			end try
		end repeat
	end repeat
	
	error "Can't find the Metrowerks CodeWarrior folder."
	
end MWRootDir

on FindOpenGL()
	tell application "Finder"
		
		set results to every folder of folder gMWroot whose name starts with "OpenGL SDK"
		if (count results) > 0 then
			set dir to item 1 of results as string
		else
			set dir to ""
		end if
		
		return dir
		
	end tell
end FindOpenGL

on SetGlobals()
	tell application "Finder"
		
		set gProjectData to {}
		
		set gStartupDisk to startup disk as string
		set gIsOSX to my IsOSX()
		set gHomeDir to my HomeDir()
		set gMWroot to my MWRootDir()
		set gMWCWfolder to gMWroot & "Metrowerks CodeWarrior:"
		set gMacLibs to gMWCWfolder & "MacOS Support:Universal:Libraries:"
		set gStubLibs to gMacLibs & "StubLibraries:"
		set gPPCLibs to gMacLibs & "PPCLibraries:"
		set gMSLPPCLibs to gMWCWfolder & "MSL:MSL_C:MSL_MacOS:Lib:PPC:"
		
		set gDistribRoot to my ModuleRoot()
		
		set gIncludeDir to gDistribRoot & "include:"
		if pUsingCPlusPlus then
			set gSourceDir to gDistribRoot & "src:"
			set gLibsDir to gDistribRoot & "compilers:mac_prj:lib:"
			set gOutputDir to gDistribRoot & "compilers:mac_prj:bin:"
			set gProjectsDir to gOutputDir
		else
			set gSourceDir to gDistribRoot
			set gLibsDir to gDistribRoot & "lib:"
			set gOutputDir to gDistribRoot & "build:"
			set gCToolsDir to gDistribRoot & "ctools:"
			set gRsrcsDir to gDistribRoot & "link:macmet:"
		end if
		
		set gOpenGLdir to my FindOpenGL()
		set gOpenGLpresent to (gOpenGLdir is not "")
		
		if pLinkExecutables then
			set gProjectsDir to gOutputDir
		else
			set gProjectsDir to gLibsDir
		end if
		
	end tell
end SetGlobals

on SetDebugSettings(shouldDebug)
	tell application "CodeWarrior IDE 4.2.5"
		
		if shouldDebug then
			(* ===== Panel PPC Global Optimizer =====  *)
			Set Preferences of panel "PPC Global Optimizer" to ¬
				{Optimize For:code_Speed, Level:0}
			(* ===== Panel PPC Linker ===== *)
			Set Preferences of panel "PPC Linker" to ¬
				{Generate SYM File:true ¬
					, Suppress Warnings:false}
			(* ===== Panel C/C++ Language =====  *)
			Set Preferences of panel "C/C++ Compiler" to ¬
				{Inlining:inline_none ¬
					, AutoInlining:false}
			
		else
			(* ==== optimized/release settings ==== *)
			(* ===== Panel PPC Global Optimizer =====  *)
			Set Preferences of panel "PPC Global Optimizer" to ¬
				{Optimize For:code_Speed, Level:4}
			(* ===== Panel PPC Linker ===== *)
			Set Preferences of panel "PPC Linker" to ¬
				{Generate SYM File:false ¬
					, Suppress Warnings:true}
			(* ===== Panel C/C++ Language =====  *)
			Set Preferences of panel "C/C++ Compiler" to ¬
				{Inlining:inline_smart ¬
					, AutoInlining:true}
		end if
		
	end tell
end SetDebugSettings

on SetPreferences()
	tell application "CodeWarrior IDE 4.2.5"
		
		(* ===== Section "Target" ===== *)
		
		-- Panel "Target Settings"
		Set Preferences of panel "Target Settings" to {Linker:"MacOS PPC Linker"}
		
		-- Panel "PPC Target"
		if pLinkExecutables then
			Set Preferences of panel "PPC Project" to ¬
				{Project Type:standard application, SIZE Flags:22720, File Creator:"NCBI", File Type:"APPL", Preferred Size:8000, Minimum Size:5000, Stack Size:64}
		else
			Set Preferences of panel "PPC Project" to {Project Type:library}
		end if
		(* ===== Section "Language Settings" ===== *)
		
		-- Panel "C/C++ Language"
		Set Preferences of panel "C/C++ Compiler" to ¬
			{Activate CPlusPlus:false ¬
				, ARM Conformance:false ¬
				, Exception Handling:true ¬
				, RTTI:true ¬
				, Pool Strings:true ¬
				, Dont Reuse Strings:false ¬
				, Require Function Prototypes:true ¬
				, ANSI Strict:false ¬
				, ANSI Keywords Only:false ¬
				, Expand Trigraph Sequences:false ¬
				, MPW Newlines:false ¬
				, MPW Pointer Type Rules:false ¬
				, Enums Always Ints:false}
		
		-- Panel "C/C++ Warnings"
		Set Preferences of panel "C/C++ Warnings" to ¬
			{Treat Warnings As Errors:false ¬
				, Illegal Pragmas:true ¬
				, Empty Declarations:true ¬
				, Possible Errors:true ¬
				, Unused Variables:true ¬
				, Unused Arguments:false ¬
				, Extra Commas:true ¬
				, Extended Error Checking:true ¬
				, Hidden Virtual Functions:true ¬
				, Implicit Arithmetic Conversions:false ¬
				, NonInlined Functions:false ¬
				, Inconsistent Class Struct:true}
		
		(* ===== Section "Code Generation" ===== *)
		
		-- Panel "PPC Processor"
		Set Preferences of panel "PPC CodeGen" to ¬
			{Struct Alignment:Align_PPC ¬
				, Make Strings ReadOnly:true ¬
				, Store Data in TOC:true ¬
				, Use FMADD Instructions:false ¬
				, Use Profiler:false ¬
				, Traceback Tables:TB_Inline ¬
				, Schedule:false ¬
				, Peephole Optimizer:true}
		
		(* ===== Section "Linker" ===== *)
		
		-- Panel "PPC Linker"
		Set Preferences of panel "PPC Linker" to ¬
			{Generate SYM File:true ¬
				, Full Path In Sym Files:true ¬
				, Generate Link Map:false ¬
				, Link Mode:fast ¬
				, Initialization Name:¬
				"", Main Name:¬
				"__start", Termination Name:""} ¬
				
		-- Panel "PPC PEF"
		Set Preferences of panel "PPC PEF" to ¬
			{Export Symbols:none ¬
				, Old Definition:0 ¬
				, Old Implementation:0 ¬
				, Current Version:0 ¬
				, Code Sorting:nosort ¬
				, Share Data Section:false ¬
				, Expand Uninitialized Data:false ¬
				, Fragment Name:""}
		
		(* ===== Section "Debugger" ===== *)
		
		-- Panel "Debugger Settings"
		Set Preferences of panel "Debugger Target" to ¬
			{Log System Messages:false}
		
		my SetPaths1()
		
	end tell
end SetPreferences

on SetPaths1()
	tell application "CodeWarrior IDE 4.2.5"
		
		(* ===== Panel Access Paths ===== *)
		-- We need to be able to move the default system compiler folder to the end of the list
		-- because certain files like "all.h" and "all" are defined by both Metrowerks and NCBI.
		-- We want to find the NCBI "all.h" first.
		Set Preferences of panel "Access Paths" to {System Paths:{}} -- This removes the compiler default folder
		
		Set Preferences of panel "Access Paths" to {Always Full Search:true, Convert Paths:true}
		
	end tell
end SetPaths1

on SetPaths2()
	tell application "CodeWarrior IDE 4.2.5"
		
		-- Add recursive include dir AFTER source dirs to avoid major performance hit
		set pathsToAdd to {}
		-- gDistribRoot & "link:macmet:", 
		repeat with i in {gDistribRoot, ¬
			gLibsDir, gIncludeDir}
			copy {name:i, recursive:false, origin:absolute} to end of pathsToAdd
		end repeat
		if not pUsingCPlusPlus then
			copy {name:gDistribRoot & "link:macmet:", recursive:true, origin:absolute} to end of pathsToAdd
		end if
		Set Preferences of panel "Access Paths" to {User Paths:pathsToAdd}
		
		set pathsToAdd to {{name:gIncludeDir, recursive:true, origin:absolute}}
		if not pUsingCPlusPlus then
			copy {name:gDistribRoot, recursive:true, origin:absolute} to end of pathsToAdd
		end if
		
		-- After we have added all paths, reinsert compiler default at end of list
		set dirsToAdd to {¬
			":MacOS Support:", ¬
			":MSL:"}
		if gOpenGLpresent then
			copy gOpenGLdir to end of dirsToAdd
		end if
		-- if gPNGpresent ...
		
		repeat with i in dirsToAdd
			copy {name:i, recursive:true, origin:shell relative} to end of pathsToAdd
		end repeat
		Set Preferences of panel "Access Paths" to {System Paths:pathsToAdd}
		
	end tell
end SetPaths2

on SetWeakLink(libName)
	tell application "CodeWarrior IDE 4.2.5"
		
		set the weak link of ¬
			every target file of target (count targets of project document 1) of project document 1 ¬
			whose path ends with ":" & libName ¬
			to true
		
	end tell
end SetWeakLink

on AddBlueLibs()
	tell application "CodeWarrior IDE 4.2.5"
		
		set libsToAdd to {¬
			gMSLPPCLibs & "MSL C.PPC.Lib", ¬
			gMSLPPCLibs & "MSL C++.PPC.Lib", ¬
			gMSLPPCLibs & "MSL SIOUX.PPC.Lib", ¬
			gMWCWfolder & "MacOS Support:Libraries:Runtime:Runtime PPC:MSL RuntimePPC.Lib", ¬
			gMSLPPCLibs & "MSL_C_PPC.Lib", ¬
			gMSLPPCLibs & "MSL_C++_PPC.Lib", ¬
			gMSLPPCLibs & "MSL_SIOUX_PPC.Lib", ¬
			gMSLPPCLibs & "MSL_Extras_PPC.Lib", ¬
			gMWCWfolder & "MacOS Support:Libraries:Runtime:Libs:MSL_Runtime_PPC.Lib", ¬
			gStubLibs & "InterfaceLib", ¬
			gStubLibs & "AppearanceLib", ¬
			gStubLibs & "NavigationLib", ¬
			gStubLibs & "MathLib", ¬
			gStubLibs & "TextCommon", ¬
			gStubLibs & "UnicodeConverter", ¬
			gStubLibs & "UTCUtils", ¬
			gPPCLibs & "CarbonAccessors.o"}
		
		Add Files libsToAdd
		
		my SetWeakLink("AppearanceLib")
		my SetWeakLink("NavigationLib")
		
	end tell
end AddBlueLibs

on AddCarbonLibs()
	tell application "CodeWarrior IDE 4.2.5"
		
		set libsToAdd to {¬
			gMSLPPCLibs & "MSL C.Carbon.Lib", ¬
			gMSLPPCLibs & "MSL C++.PPC.Lib", ¬
			gMSLPPCLibs & "MSL SIOUX.Carbon.Lib", ¬
			gMWCWfolder & "MacOS Support:Libraries:Runtime:Runtime PPC:MSL RuntimePPC.Lib", ¬
			gMSLPPCLibs & "MSL_C_Carbon.Lib", ¬
			gMSLPPCLibs & "MSL_C++_PPC.Lib", ¬
			gMSLPPCLibs & "MSL_SIOUX_Carbon.Lib", ¬
			gMSLPPCLibs & "MSL_Extras_Carbon.Lib", ¬
			gMWCWfolder & "MacOS Support:Libraries:Runtime:Libs:MSL_Runtime_PPC.Lib", ¬
			gStubLibs & "CarbonLib"}
		
		Add Files libsToAdd
		
	end tell
end AddCarbonLibs

on AddFeatures(features, flags)
	tell application "CodeWarrior IDE 4.2.5"
		
		if features contains "BNDL" then
			Set Preferences of panel "Output Flags" to {Has Bundle:true}
		end if
		
		if features contains "sockets" and flags does not contain "Carbon" then
			set libsToAdd to {¬
				gStubLibs & "ThreadsLib", ¬
				gStubLibs & "OpenTransportLib", ¬
				gStubLibs & "OpenTptInternetLib", ¬
				gStubLibs & "InternetConfigLib", ¬
				gPPCLibs & "OpenTptInetPPC.o", ¬
				gPPCLibs & "OpenTransportAppPPC.o"}
			
			Add Files libsToAdd
			
		end if
		
		if features contains "OpenGL" then
			set OpenGLLibs to gOpenGLdir & "Libraries:"
			Set Preferences of panel "Access Paths" to {System Paths:{{name:OpenGLLibs, recursive:true, origin:absolute}}}
			Add Files {OpenGLLibs & "OpenGLLibraryStub", OpenGLLibs & "OpenGLUtilityStub"}
		end if
		
	end tell
end AddFeatures

on SetupTarget(proj, flags)
	tell application "CodeWarrior IDE 4.2.5"
		
		-- initialize variables
		set projRsrcs to {}
		set projFeatures to {}
		set sysPaths to {}
		
		-- Grab the fields of our project record and store them in local variables.
		set projName to proj's name
		set projSettings to proj's settings
		try
			set projFeatures to proj's features
		end try
		try
			set sysPaths to proj's sysPaths
		end try
		try
			set projRsrcs to proj's rsrcs
		end try
		set projLibs to proj's projLibs
		set projFileData to proj's fileData
		
		-- Figure out what our output file and input libraries will be named.
		if flags contains "Carbon" then
			set targetAPI to "C2"
		else
			set targetAPI to "Mac"
		end if
		if flags contains "debug" then
			set targetDebug to "dbg"
		else
			set targetDebug to ""
		end if
		set targetName to projName & " " & targetAPI
		set libNameSuffix to "-" & targetAPI
		if targetDebug is not "" then
			set targetName to targetName & " " & targetDebug
			set libNameSuffix to libNameSuffix & "-" & targetDebug
		end if
		if pLinkExecutables then
			set targetFilename to targetName
		else
			set targetFilename to projName & libNameSuffix & ".lib"
		end if
		
		-- Make the new target, and set the current target to be it.
		make new target at project document 1 with properties {name:targetName}
		set the current target of project document 1 to the result
		
		-- Set default settings.  do this BEFORE setting per-project settings!
		my SetPreferences()
		
		-- Set the name of the output file (the application)
		Set Preferences of panel "PPC Project" to {File Name:targetFilename}
		
		-- If we have any per-project override settings, set them.
		if (count ppcProject of projSettings) > 0 then
			Set Preferences of panel "PPC Project" to ppcProject of projSettings
		end if
		--Set Preferences of panel "Access Paths" to {User Paths:{{name:NCBISOURCE & projPath, origin:absolute}}}
		my SetPaths2()
		
		-- Add per-project system paths.
		set pathsToAdd to {}
		repeat with i in sysPaths
			copy {name:i, recursive:true, origin:absolute} to end of pathsToAdd
		end repeat
		if (count pathsToAdd) > 0 then ¬
			Set Preferences of panel "Access Paths" to {System Paths:pathsToAdd}
		
		-- Set the appropriate prefix file.
		set prefixFile to Prefix File of projSettings
		if prefixFile is "" then
			if flags contains "debug" then
				set prefixFile to pDebugPrefix
			else
				set prefixFile to pReleasePrefix
			end if
		end if
		if flags contains "Carbon" then
			if prefixFile is "" then
				set prefixFile to "CarbonPrefix.h"
			else
				set prefixFile to "Carbon-" & prefixFile
			end if
		end if
		Set Preferences of panel "C/C++ Compiler" to {Prefix File:prefixFile}
		
		-- Are we assuming a .c or a .cpp extension?
		if projFeatures contains "C++" then
			set fileExtension to pCPlusPlusExtension
		else
			set fileExtension to ".c"
		end if
		
		-- Add source files.
		repeat with group in projFileData
			set projPath to projPath of group
			Set Preferences of panel "Access Paths" to ¬
				{User Paths:{{name:gSourceDir & projPath, origin:absolute}}}
			set fileList to group's fileList
			set filesToAdd to {}
			repeat with i in fileList
				if i does not contain "." then set i to i & fileExtension
				copy gSourceDir & projPath & i to end of filesToAdd
			end repeat
			Add Files filesToAdd
		end repeat
		
		if flags contains "debug" then
			set the debug of every target file of target (count targets of project document 1) ¬
				of project document 1 to true
			my SetDebugSettings(true)
		else
			my SetDebugSettings(false)
		end if
		
		-- Add appropriate system libraries.
		if pLinkExecutables then
			if flags contains "Carbon" then
				my AddCarbonLibs()
			else
				my AddBlueLibs()
			end if
		end if
		my AddFeatures(projFeatures, flags)
		
		set filesToAdd to {}
		
		-- Add user libraries.
		if projFeatures contains "sockets" then
			if projLibs does not contain "mitsock" then
				copy "mitsock" to beginning of projLibs
			end if
		end if
		repeat with i in projLibs
			copy gLibsDir & i & libNameSuffix & ".lib" to end of filesToAdd
		end repeat
		
		-- Add resources.
		repeat with i in projRsrcs
			copy gRsrcsDir & i to end of filesToAdd
		end repeat
		
		Add Files filesToAdd
		
		Reset File Paths
		
	end tell
end SetupTarget

on CreateFolders()
	tell application "Finder"
		
		repeat with i in pDirsToCreate
			set pth to relPath of i
			if pth is not "" then set pth to pth & ":"
			if not (exists folder (gDistribRoot & pth & i's name)) then
				make new folder at folder (gDistribRoot & pth) with properties {name:i's name}
			end if
		end repeat
		
	end tell
end CreateFolders

on CreateProject(proj)
	tell application "CodeWarrior IDE 4.2.5"
		
		-- This statement doesn't work, because AppleScript is broken.
		if proj is {} then return
		
		try
			get proj's name
		on error
			return
		end try
		
		set projFilename to proj's name & pProjectFileExtension
		set projPathname to gProjectsDir & projFilename
		if pAlwaysCreateProjects or not (exists file projPathname of application "Finder") then
			
			try
				close (the first project document whose name is projFilename)
			end try
			
			Create Project {projPathname}
			
			if pCreateBlueTargets and pCreateDebugTargets then
				my SetupTarget(proj, "Blue debug")
			end if
			
			if pCreateBlueTargets and pCreateOptimizedTargets then
				my SetupTarget(proj, "Blue")
			end if
			
			if pCreateCarbonTargets and pCreateDebugTargets then
				my SetupTarget(proj, "Carbon debug")
			end if
			
			if pCreateCarbonTargets and pCreateOptimizedTargets then
				my SetupTarget(proj, "Carbon")
			end if
			
			set the current target of project document 1 to target 1 of project document 1
			
			Close Project
			
		end if
		
	end tell
end CreateProject

on CreateAllProjects()
	
	repeat with proj in gProjectData
		CreateProject(proj)
	end repeat
	
end CreateAllProjects

on BuildProject(projName)
	tell application "CodeWarrior IDE 4.2.5"
		open (gProjectsDir & projName & pProjectFileExtension)
		repeat with i from 2 to (count targets of project document 1)
			set the current target of project document 1 to target i of project document 1
			Make Project
			-- If there were compiler warnings, then a compiler window will be in front.
			-- For whatever reason, this causes the next "set the current target..." to fail.
			-- An easy way to make the window go away without having to know if it's there or not 
			-- is to build again, which, because everything is already compiled, finishes instantly
			-- and produces no warnings.
			--Make Project
			-- An even better way is to check for the window and close it.
			if the name of window 1 is "Errors & Warnings" then
				close first window -- "close window 1" becomes "Close Window 1" (different event)
			end if
		end repeat
		set the current target of project document 1 to target 1 of project document 1
		Close Project
	end tell
end BuildProject

on BuildAllProjects()
	
	repeat with proj in gProjectData
		try
			set projName to proj's name
		on error
			set projName to ""
		end try
		-- This statement doesn't work, because AppleScript is broken.
		if proj is not {} then
			if projName is not "" then
				BuildProject(projName)
			end if
		end if
	end repeat
	
end BuildAllProjects

on SignalCompletion()
	
	try
		say "Make complete."
	on error
		beep
	end try
	
end SignalCompletion

with timeout of 60000 seconds
	
	SetGlobals()
	
	SetProjectData()
	
	CreateFolders()
	CopyHeaders()
	
	tell application "CodeWarrior IDE 4.2.5" to activate
	
	CreateAllProjects()
	
	if pShouldBuild then
		BuildAllProjects()
	end if
	
	SignalCompletion()
	
end timeout

